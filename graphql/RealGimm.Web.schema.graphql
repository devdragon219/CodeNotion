schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface DocumentExpiredNotification implements Notification {
  documentCmisId: String!
  entityId: Int!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

interface GeoJSONInterface {
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType!
  "The minimum bounding box around the geometry object"
  bbox: [Float]
  "The coordinate reference system integer identifier"
  crs: Int
}

interface ISubject {
  id: Int!
  name: String!
  personType: PersonType!
  internalCode: String!
  externalSourceCode: String
  customPersonType: Int
  customSubjectStatus: Int
  creationDate: DateTime!
  closureDate: DateTime
  deletionDate: DateTime
  entryStatus: EntryStatus!
  addresses: [Address!]!
  contacts: [Contact!]!
  orgUnits: [OrgUnit!]!
  bankAccounts: [BankAccount!]!
  categories: [SubjectCategory!]!
  relationMains: [SubjectRelation!]!
  relationSubordinates: [SubjectRelation!]!
  taxStatuses: [TaxStatus!]!
  officers: [SubjectRelation!]!
  owningMgmtSubjects: [SubjectRelation!]!
  subOrganizations: [SubjectRelation!]!
  heirs: [SubjectRelation!]!
}

interface ITaxConfiguration {
  availableMainTables: [Table!]!
  availableSubTables: [KeyValuePairOfStringAndTable__!]!
}

interface Notification {
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

interface QuoteHistoryEntry {
  timestamp: DateTime!
  userId: Int!
  id: Int!
}

interface TicketCondition {
  id: Int!
}

interface TicketHistoryEntry {
  timestamp: DateTime!
  userId: Int!
  id: Int!
}

type AccountingItem {
  description: String!
  internalCode: String!
  externalCode: String!
  id: Int!
}

type AccountingItemMutations {
  add(input: AccountingItemInput!): ResultOfAccountingItem! @authorize(roles: [ "322_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: AccountingItemInput!): ResultOfAccountingItem! @authorize(roles: [ "322_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "322_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "322_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type AccountingItemQueries {
  get(id: Int!): AccountingItem @authorize(roles: [ "322_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listAccountingTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AccountingItemFilterInput order: [AccountingItemSortInput!]): ListAccountingTypesConnection @authorize(roles: [ "322_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: AccountingItemFilterInput order: [AccountingItemSortInput!]): FileUrlOutput! @authorize(roles: [ "322_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentAccountingItemId: Int): Boolean! @authorize(roles: [ "322_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "322_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ActRegistrationDate {
  dateType: RegistrationDateType!
  value: Date!
  id: Int!
}

type ActRegistrationField {
  fieldType: RegistrationFieldType!
  value: String
  id: Int!
}

type ActiveContractMutations {
  takeoverLandlord(contractId: Int! legalRepresentativeSubjectId: Int! paymentDate: Date! successorIds: [Int!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  addTenants(contractId: Int! updatedCounterpartInputs: [ContractVariationUpdatedCounterpartInput!]! newCounterpartInputs: [ContractVariationNewCounterpartInput!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  takeoverTenants(contractId: Int! takeoverDate: Date! takeoverType: TakeoverType! updatedCounterpartInputs: [ContractNoDateUpdateCounterpartInput!]! newCounterpartInputs: [ContractNoDateNewCounterpartInput!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  transferTenants(contractId: Int! transferDate: Date! updatedCounterpartInputs: [ContractNoDateUpdateCounterpartInput!]! newCounterpartInputs: [ContractNoDateNewCounterpartInput!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  takeoverDeadTenant(contractId: Int! deadCounterpartId: Int! heirInputs: [ContractDeathVariationNewCounterpartInput!]! updatedCounterpartInputs: [ContractVariationUpdatedCounterpartInput!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
}

type Address {
  addressType: AddressType!
  cityName: String
  cityReference: UUID
  countyName: String
  countyReference: UUID
  regionName: String
  regionReference: UUID
  countryName: String
  countryISO: String
  toponymy: String
  numbering: String
  localPostCode: String
  notes: String
  creationDate: DateTime!
  id: Int!
  city: City
}

type AdminMutations {
  addUser(userInput: AdminUserInput!): ResultOfUser! @authorize(roles: [ "921_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateUser(userId: Int! userInput: AdminUserInput!): ResultOfUser! @authorize(roles: [ "921_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteUser(userId: Int!): Result! @authorize(roles: [ "921_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteByIds(userIds: [Int!]!): Result! @authorize(roles: [ "921_D" ]) @authorize(roles: [ "OFFICE_B" ])
  addGroup(groupInput: AdminGroupInput!): ResultOfGroup! @authorize(roles: [ "921_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateGroup(groupId: Int! groupInput: AdminGroupInput!): ResultOfGroup! @authorize(roles: [ "921_U" ]) @authorize(roles: [ "OFFICE_B" ])
  addUserToGroup(groupId: Int! userId: Int!): Boolean! @authorize(roles: [ "921_U" ]) @authorize(roles: [ "OFFICE_B" ])
  removeUserFromGroup(groupId: Int! userId: Int!): Boolean! @authorize(roles: [ "921_U" ]) @authorize(roles: [ "OFFICE_B" ])
  setPasswordToUser(userId: Int! newPassword: String!): Boolean! @authorize(roles: [ "921_U" ]) @authorize(roles: [ "OFFICE_B" ])
  revokeSession(userId: Int! sessionId: Int!): Result! @authorize(roles: [ "921_U" ]) @authorize(roles: [ "OFFICE_B" ])
  revokeAllSessions(userId: Int!): Result! @authorize(roles: [ "921_U" ]) @authorize(roles: [ "OFFICE_B" ])
  setGroupFeature(groupId: Int! feature: AdminGroupFeatureInput!): Boolean! @authorize(roles: [ "921_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteGroupsByIds(groupsIds: [Int!]!): Result! @authorize(roles: [ "921_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteGroup(groupId: Int!): Result! @authorize(roles: [ "921_D" ]) @authorize(roles: [ "OFFICE_B" ])
  updateConfig(function: ConfigFunction! name: String! value: String): ResultOfConfig! @authorize(roles: [ "923_U" ]) @authorize(roles: [ "OFFICE_B" ])
}

type AdminQueries {
  user(userId: Int!): User @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listUsers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UserFilterInput order: [UserSortInput!]): ListUsersConnection @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseUsername(userName: String! currentUserId: Int): Boolean! @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  groupPermissions(groupIds: [Int!]!): [PermissionSummary!]! @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  group(groupId: Int!): Group @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listGroup("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: GroupFilterInput order: [GroupSortInput!]): ListGroupConnection @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listFeatures: [String!]! @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listAuditEvents("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AuditLogFilterInput order: [AuditLogSortInput!]): ListAuditEventsConnection @authorize(roles: [ "922_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: UserFilterInput order: [UserSortInput!]): FileUrlOutput! @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportGroupsToExcel(where: GroupFilterInput order: [GroupSortInput!]): FileUrlOutput! @authorize(roles: [ "921_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listConfigs(where: ConfigFilterInput order: [ConfigSortInput!]): [Config!]! @authorize(roles: [ "923_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type Administration {
  estateId: Int!
  administratorSubjectId: Int!
  administratorBankAccountId: Int
  externalCode: String
  administrationType: AdministrationType!
  paymentType: PaymentType!
  since: Date!
  until: Date
  terms: [AdministrationTerm!]!
  notes: String
  isPaymentDataIncluded: Boolean!
  id: Int!
  estate: Estate!
  administratorSubject: ISubject!
  bankAccount: BankAccount
}

type AdministrationMutations {
  add(estateId: Int! inputs: [AdministrationInput!]!): ResultOfAdministration__! @authorize(roles: [ "531_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: AdministrationInput!): ResultOfAdministration! @authorize(roles: [ "531_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "531_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "531_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type AdministrationQueries {
  get(id: Int!): Administration @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listAdministrations("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AdministrationFilterInput order: [AdministrationSortInput!]): ListAdministrationsConnection @authorize(roles: [ "531_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listAdministrationsFull(where: AdministrationFilterInput order: [AdministrationSortInput!]): [Administration!]! @authorize(roles: [ "531_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listAdministrationTerms(administrationId: Int! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AdministrationTermFilterInput order: [AdministrationTermSortInput!]): ListAdministrationTermsConnection @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: AdministrationFilterInput order: [AdministrationSortInput!]): FileUrlOutput! @authorize(roles: [ "531_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type AdministrationTerm {
  administration: Administration!
  termType: TermType!
  name: String!
  since: Date!
  until: Date!
  expectedAmount: Decimal!
  installments: [TermInstallment!]!
  id: Int!
  payments: [TermGroupedInstallmentPayment!]!
}

type AdministrationTermMutations {
  add(administrationId: Int! input: AdministrationTermInput!): ResultOfAdministrationTerm! @authorize(roles: [ "531_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: AdministrationTermInput!): ResultOfAdministrationTerm! @authorize(roles: [ "531_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "531_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "531_D" ]) @authorize(roles: [ "OFFICE_B" ])
  addInstallmentPayments(administrationTermId: Int! inputs: [InstallmentPaymentInput!]!): Result! @authorize(roles: [ "531_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateInstallmentPayments(administrationTermId: Int! installmentPaymentIds: [Int!]! input: InstallmentPaymentInput!): Result! @authorize(roles: [ "531_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteInstallmentPayment(administrationTermId: Int! installmentPaymentId: Int!): Result! @authorize(roles: [ "531_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type AdministrationTermQueries {
  get(id: Int!): AdministrationTerm @authorize(roles: [ "531_R" ]) @authorize(roles: [ "OFFICE_B" ])
  groupedPayments(administrationTermId: Int!): [TermGroupedInstallmentPayment!]! @authorize(roles: [ "531_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

"A connection to a list of items."
type AllDocumentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AllDocumentsEdge!]
  "A flattened list of the nodes."
  nodes: [DocumentRow!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type AllDocumentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DocumentRow!
}

type AmountUpdatedQuoteHistoryEntry implements QuoteHistoryEntry {
  oldAmount: Decimal
  newAmount: Decimal
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type ApprovedAmountUpdatedQuoteHistoryEntry implements QuoteHistoryEntry {
  oldApprovedAmount: Decimal
  newApprovedAmount: Decimal
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type ArticlePricePeriod {
  since: Date!
  until: Date
  price: Decimal!
  id: Int!
}

type AssetTaxCalculation {
  cadastralUnit: CadastralUnit!
  taxCalculator: String!
  taxCalculatorId: UUID!
  year: Int!
  installments: [AssetTaxPayment!]!
  totalAmount: Decimal!
  expectedInstallments: Int!
  id: Int!
}

type AssetTaxDetailEstateItem {
  year: Int!
  managementSubjectId: Int!
  address: AsstAddress!
  estateInternalCode: String
  totalAmountPaid: Decimal!
  totalBaseTaxableAmount: Decimal!
  totalGrossCadastralIncome: Decimal!
  totalActualizedCadastralIncome: Decimal!
  subRows: [AssetTaxDetailEstateUnitItem!]!
}

type AssetTaxDetailEstateUnitItem {
  year: Int!
  cadastralUnitIncome: CadastralUnitIncome
  cadastralUnitTaxConfig: CadastralUnitTaxConfig
  estate: Estate!
  address: AsstAddress!
  cadastralCoordinates: [CadastralCoordinates!]!
  estateUnitInternalCode: String
  estateUnitOwnershipPercent: Float
  amountPaid: Decimal!
  baseTaxableAmount: Decimal!
  grossCadastralIncome: Decimal!
  actualizedCadastralIncome: Decimal!
}

type AssetTaxDetailRow {
  year: Int!
  cityName: String
  address: AsstAddress!
  estatesCount: Int!
  estateUnitsCount: Int!
  managementSubjectName: String
  subRows: [AssetTaxDetailEstateItem!]!
}

type AssetTaxGroupedRow {
  assetTaxCalculation: AssetTaxCalculation!
  year: Int!
  managementSubjectId: Int!
  managementSubject: String
  expectedDueDate: Date
  lastUpdate: Date
  totalAmount: Decimal
  totalTaxableAmount: Decimal
  payments: [AssetTaxPayment!]
}

type AssetTaxMutations {
  setIssueOverridden(taxCalculatorId: UUID! year: Int! managementSubjectId: Int! expectedDueDate: Date! inputValues: [KeyValuePairOfInt32AndBooleanInput!]!): ResultOfIEnumerableOfAssetTaxCalculation! @authorize(roles: [ "250_U" ]) @authorize(roles: [ "OFFICE_B" ])
  setDefinitive(taxPaymentIds: [Int!]! taxCalculatorId: UUID!): ResultOfIEnumerableOfAssetTaxPayment! @authorize(roles: [ "250_U" ]) @authorize(roles: [ "OFFICE_B" ])
}

type AssetTaxPayment {
  assetTaxCalculation: AssetTaxCalculation
  managementSubjectId: Int!
  managementSubjectBankAccountId: Int
  date: Date!
  propertyMonths: Int!
  grossCadastralIncome: Decimal!
  actualizedCadastralIncome: Decimal!
  baseTaxableAmount: Decimal!
  debitedAmount: Decimal!
  creditedAmount: Decimal
  amountPaid: Decimal!
  taxName: String
  isDefinitive: Boolean!
  expectedDueDate: Date!
  installmentsPaid: [Int!]!
  issue: CalculationIssue
  isIssueOverridden: Boolean!
  id: Int!
}

type AssetTaxQueries {
  singleGroupedPayment(taxCalculatorId: UUID! year: Int! managementSubjectId: Int! expectedDueDate: Date!): AssetTaxGroupedRow @authorize(roles: [ "250_R" ]) @authorize(roles: [ "OFFICE_B" ])
  groupedPayments(taxCalculatorId: UUID! currentYear: Boolean! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AssetTaxGroupedRowFilterInput order: [AssetTaxGroupedRowSortInput!]): GroupedPaymentsConnection @authorize(roles: [ "250_R" ]) @authorize(roles: [ "OFFICE_B" ])
  fullGroupedPayments(taxCalculatorId: UUID! currentYear: Boolean! where: AssetTaxGroupedRowFilterInput order: [AssetTaxGroupedRowSortInput!]): [AssetTaxGroupedRow!]! @authorize(roles: [ "250_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportGroupedPayments(taxCalculatorId: UUID! currentYear: Boolean! where: AssetTaxGroupedRowFilterInput order: [AssetTaxGroupedRowSortInput!]): FileUrlOutput! @authorize(roles: [ "250_R" ]) @authorize(roles: [ "OFFICE_B" ])
  detailGroupedPayments(taxCalculatorId: UUID! year: Int! managementSubjectId: Int! expectedDueDate: Date! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AssetTaxDetailRowFilterInput order: [AssetTaxDetailRowSortInput!]): DetailGroupedPaymentsConnection @authorize(roles: [ "250_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportDetailGroupedPayments(taxCalculatorId: UUID! year: Int! managementSubjectId: Int! expectedDueDate: Date! where: AssetTaxDetailRowFilterInput order: [AssetTaxDetailRowSortInput!]): FileUrlOutput! @authorize(roles: [ "250_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type AsstAddress {
  addressType: AsstAddressType!
  cityName: String
  cityReference: UUID
  countyName: String
  countyReference: UUID
  regionName: String
  regionReference: UUID
  countryName: String
  countryISO: String
  toponymy: String
  numbering: String
  localPostCode: String
  notes: String
  creationDate: DateTime!
  deletionDate: DateTime
  locationLatLon: GeoJSONPointType
  id: Int!
  city: City
}

type AuditLog {
  entityType: String!
  tablePk: String!
  auditData: String
  auditUser: String!
  action: String!
  auditDate: DateTime!
  id: Int!
}

type BankAccount {
  bankAccountType: BankAccountType!
  referenceCode: String
  referenceCodeType: BankAccountCodeType!
  notes: String
  accountHolder: String
  creationDate: DateTime!
  id: Int!
}

type Bill {
  internalCode: String!
  externalSourceCode: String
  externalExportCode: String
  isTemporary: Boolean!
  year: Int!
  transactorSubjectId: Int!
  mainCounterpartSubjectId: Int!
  estateUnitId: Int
  invoiceId: Int
  isOccupiedWithoutRight: Boolean!
  isInvoiced: Boolean!
  transactorPaymentType: PaymentType!
  contract: Contract
  date: Date!
  since: Date
  until: Date
  finalDate: DateTime
  emissionType: BillEmissionType!
  contractBillingPeriod: BillingPeriod!
  totalAmount: Decimal!
  billRows: [BillRow!]!
  id: Int!
  transactorSubject: ISubject!
  counterpartSubject: ISubject!
  estateUnit: EstateUnit
}

type BillFullListOutput {
  id: Int!
  contractId: Int!
  contractInternalCode: String!
  contractManagementSubjectId: Int!
  mainCounterpartSubjectId: Int!
  since: Date
  mainCounterpartSubject: ISubject!
  contractManagementSubject: ISubject!
}

type BillItemType {
  description: String!
  internalCode: String!
  isForContractFee: Boolean!
  isForContractCosts: Boolean!
  isForAdministration: Boolean!
  isPositive: Boolean!
  isForTax: Boolean!
  defaultAccountingItemId: Int
  activeSubjectVRId: Int!
  activeExemptVRId: Int!
  activeNonTaxableVRId: Int!
  passiveSubjectVRId: Int!
  passiveExemptVRId: Int!
  passiveNonTaxableVRId: Int!
  administrationVRId: Int!
  id: Int!
  activeSubjectVR: VATRate!
  activeNonTaxableVR: VATRate!
  activeExemptVR: VATRate!
  passiveSubjectVR: VATRate!
  passiveNonTaxableVR: VATRate!
  passiveExemptVR: VATRate!
  defaultAccountingItem: AccountingItem
  administrationVR: VATRate!
}

type BillItemTypeMutations {
  add(input: BillItemTypeInput!): ResultOfBillItemType! @authorize(roles: [ "323_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: BillItemTypeInput!): ResultOfBillItemType! @authorize(roles: [ "323_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "323_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "323_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type BillItemTypeQueries {
  get(id: Int!): BillItemType @authorize(roles: [ "323_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listBillItemTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BillItemTypeFilterInput order: [BillItemTypeSortInput!]): ListBillItemTypesConnection @authorize(roles: [ "323_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: BillItemTypeFilterInput order: [BillItemTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "323_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentBillItemTypeId: Int): Boolean! @authorize(roles: [ "323_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "323_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type BillMutations {
  update(id: Int! input: BillInput!): ResultOfBill! @authorize(roles: [ "521_U" ]) @authorize(roles: [ "OFFICE_B" ])
  finalize(ids: [Int!]!): Result! @authorize(roles: [ "521_U" ]) @authorize(roles: [ "OFFICE_B" ])
}

type BillQueries {
  get(id: Int!): Bill @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listBills("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BillFilterInput order: [BillSortInput!]): ListBillsConnection @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listBillsFull(where: BillFilterInput order: [BillSortInput!]): [BillFullListOutput!]! @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportActiveToExcel(where: BillFilterInput order: [BillSortInput!]): FileUrlOutput! @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportPassiveToExcel(where: BillFilterInput order: [BillSortInput!]): FileUrlOutput! @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
  billStateStatisticsOutput: BillStateStatisticsOutput! @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
  generatePdf(billId: Int!): ResultOfFileUrlOutput! @authorize(roles: [ "521_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type BillRow {
  bill: Bill!
  itemType: BillItemType!
  vatRateId: Int!
  amount: Decimal!
  since: Date
  until: Date
  notes: String
  recurringAdditionSource: RecurringAddition
  oneshotAdditionSource: OneshotAddition
  termInstallmentSource: TermInstallment
  id: Int!
  vatRate: VATRate!
}

type BillStateStatisticsOutput {
  finalBillsCount: Int!
  finalBillsPercentage: Float!
  temporaryBillsCount: Int!
  temporaryBillsPercentage: Float!
}

type BillingInfo {
  billingPeriod: BillingPeriod
  vatPercentage: Decimal
  purchaseFeeWithoutVAT: Decimal
  fixedRateFee: Decimal
  discountPercentage: Decimal
}

type BillingPause {
  since: Date!
  until: Date
  isRecoveryArrears: Boolean
  notes: String
  id: Int!
}

type CadastralCategory {
  description: String!
  externalCode: String
  groupName: String!
  countryISO: String!
  cadastralValueFactor: Decimal
  cadastralValueTaxFactor: Decimal
  isInstrumental: Boolean!
  isTaxed: Boolean!
  id: Int!
}

type CadastralCategoryQueries {
  listCadastralCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CadastralCategoryFilterInput order: [CadastralCategorySortInput!]): ListCadastralCategoriesConnection @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CadastralCoordinates {
  notes: String
  level1: String
  level2: String
  level3: String
  level4: String
  level5: String
  coordinateType: CoordinateType!
  itTavPartita: String
  itTavCorpo: String
  itTavPorzione: String
  hasITTavData: Boolean!
  unmanagedOverride: String
  id: Int!
}

type CadastralExpenses {
  expenseType: CadastralExpenseType!
  referenceYear: Int!
  fiscalYear: Int
  amount: Decimal
  revaluationFactor: Float
  id: Int!
}

"A connection to a list of items."
type CadastralLandCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CadastralLandCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [CadastralLandCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CadastralLandCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CadastralLandCategory!
}

type CadastralLandCategory {
  description: String!
  internalCode: String!
  countryISO: String!
  ordering: Int!
  id: Int!
}

type CadastralLandCategoryMutations {
  add(input: CadastralLandCategoryInput!): ResultOfCadastralLandCategory! @authorize(roles: [ "240_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: CadastralLandCategoryInput!): ResultOfCadastralLandCategory! @authorize(roles: [ "240_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "240_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "240_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CadastralLandCategoryQueries {
  get(id: Int!): CadastralLandCategory @authorize(roles: [ "240_R" ]) @authorize(roles: [ "OFFICE_B" ])
  cadastralLandCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CadastralLandCategoryFilterInput order: [CadastralLandCategorySortInput!]): CadastralLandCategoriesConnection @authorize(roles: [ "240_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "240_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentCadastralLandCategoryId: Int): Boolean! @authorize(roles: [ "240_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: CadastralLandCategoryFilterInput order: [CadastralLandCategorySortInput!]): FileUrlOutput! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CadastralUnavailability {
  since: Date
  until: Date
  notes: String
  id: Int!
}

type CadastralUnit {
  internalCode: String!
  status: CadastralUnitStatus!
  type: EstateUnitType!
  estateUnit: EstateUnit!
  address: AsstAddress!
  addressId: Int
  since: Date
  until: Date
  deletionDate: DateTime
  lastRelevantChangeDate: DateTime
  historyTags: [UUID!]!
  isCadastralRegistrationInProgress: Boolean!
  isAncillaryUnit: Boolean!
  unavailabilities: [CadastralUnavailability!]!
  coordinates: [CadastralCoordinates!]!
  expenses: [CadastralExpenses!]!
  taxConfig: [CadastralUnitTaxConfig!]!
  taxPayments: [AssetTaxCalculation!]!
  income: CadastralUnitIncome!
  cadastralNotes: String
  fiscalNotes: String
  consortiumNotes: String
  inspection: CadastralUnitInspection
  id: Int!
  history: [CadastralUnit!]!
  taxCalculators: [ConfigSection!]!
}

type CadastralUnitIncome {
  cadastralCategory: CadastralCategory
  cadastralLandCategory: CadastralLandCategory
  macroCategory: String
  microCategory: String
  metric: IncomeMetric
  metricAmount: Decimal
  metricRentedAmount: Decimal
  registeredSurface: Decimal
  type: IncomeType
  cadastralAmount: Decimal
  farmAmount: Decimal
  landAmount: Decimal
  marketValue: Decimal
}

type CadastralUnitInspection {
  date: Date
  protocolDate: Date
  protocolNumber: String
  heading: String
  macroZone: String
  microZone: String
  isHistoricalEstate: Boolean!
  isDirectRestriction: Boolean!
}

type CadastralUnitMutations {
  addCadastralUnit(input: CadastralUnitInput!): ResultOfCadastralUnit! @authorize(roles: [ "217_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateCadastralUnit(id: Int! isVariation: Boolean input: CadastralUnitInput!): ResultOfCadastralUnit! @authorize(roles: [ "217_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "217_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "217_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CadastralUnitQueries {
  cadastralUnit(id: Int!): CadastralUnit @authorize(roles: [ "217_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCadastralUnits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CadastralUnitFilterInput order: [CadastralUnitSortInput!]): ListCadastralUnitsConnection @authorize(roles: [ "217_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode(parentId: Int!): String @authorize(roles: [ "217_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCodeByParentCode(parentCode: String!): String! @authorize(roles: [ "217_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: CadastralUnitFilterInput order: [CadastralUnitSortInput!]): FileUrlOutput! @authorize(roles: [ "217_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CadastralUnitTaxConfig {
  taxCalculator: UUID!
  code: String!
  isMandatory: Boolean!
  templateTypeId: UUID!
  type: CustomFieldType!
  value: String
  id: Int!
}

type Calendar {
  name: String!
  timeZoneId: String!
  sunday: CalendarDay
  monday: CalendarDay
  tuesday: CalendarDay
  wednesday: CalendarDay
  thursday: CalendarDay
  friday: CalendarDay
  saturday: CalendarDay
  holidays: [Holiday!]!
  id: Int!
}

type CalendarDay {
  dayOfWeek: DayOfWeek!
  timeRanges: [TimeRange!]!
  id: Int!
}

type CalendarMutations {
  add(input: CalendarInput!): ResultOfCalendar! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: CalendarInput!): ResultOfCalendar! @authorize(roles: [ "830_U" ]) @authorize(roles: [ "OFFICE_B" ])
  duplicate(id: Int!): ResultOfCalendar! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CalendarQueries {
  get(id: Int!): Calendar @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCalendars("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CalendarFilterInput order: [CalendarSortInput!]): ListCalendarsConnection @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCalendarsFull(where: CalendarFilterInput order: [CalendarSortInput!]): [Calendar!]! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: CalendarFilterInput order: [CalendarSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CalendarTicketOutput {
  id: Int
  mainType: TicketMainType!
  requestDateTime: DateTime!
  dueDate: Date!
  internalCode: String
  workOrderReference: String
  description: String
  masterStatus: TicketMasterStatus
  supplierSubjectId: Int!
  requestor: String
  isExcludedFromMaintenanceContract: Boolean!
  supplierSubject: ISubject!
}

type CatalogueCategory {
  name: String!
  internalCode: String!
  subCategories: [CatalogueSubCategory!]!
  catalogueTypes: [CatalogueType!]!
  id: Int!
}

type CatalogueCategoryMutations {
  add(input: CatalogueCategoryInput!): ResultOfCatalogueCategory! @authorize(roles: [ "230_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: CatalogueCategoryInput!): ResultOfCatalogueCategory! @authorize(roles: [ "230_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "230_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "230_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CatalogueCategoryQueries {
  get(id: Int!): CatalogueCategory @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogueCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CatalogueCategoryFilterInput order: [CatalogueCategorySortInput!]): ListCatalogueCategoriesConnection @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogueSubCategories(catalogueCategoryId: Int "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CatalogueSubCategoryFilterInput order: [CatalogueSubCategorySortInput!]): ListCatalogueSubCategoriesConnection @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogueCategoriesFull(where: CatalogueCategoryFilterInput order: [CatalogueCategorySortInput!]): [CatalogueCategory!]! @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogueSubCategoriesFull(catalogueCategoryId: Int! where: CatalogueSubCategoryFilterInput order: [CatalogueSubCategorySortInput!]): [CatalogueSubCategory!]! @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCodeSubCategory(parentInternalCode: String! additionallyOccupiedCodes: [String!]!): String @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentCatalogueCategoryId: Int): Boolean! @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCodeSubCategory(internalCode: String! catalogueCategoryId: Int currentCatalogueSubCategoryId: Int): Boolean! @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CatalogueDocumentMutations {
  addRange(catalogueTypeId: Int! estateId: Int! inputs: [DocumentInput!]!): ResultOfDocument__! @authorize(roles: [ "230_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(catalogueTypeId: Int! estateId: Int! input: DocumentInput!): ResultOfDocument! @authorize(roles: [ "230_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(catalogueTypeId: Int! estateId: Int! cmisIds: [String!]!): Result! @authorize(roles: [ "230_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CatalogueDocumentOutput {
  catalogueItemInternalCode: String
  estateId: Int!
  catalogueTypeId: Int!
  cmisId: String!
  entityId: String
  catalogueItemId: Int
  name: String!
  fileName: String
  since: DateTime
  until: DateTime
  protocolNumber: String
  issueDate: Date
  issuer: String
  uploaderName: String
  creationDate: DateTime!
  notes: String
}

type CatalogueDocumentQueries {
  listDocuments(catalogueTypeId: Int! estateId: Int! where: DocumentFilterInput order: [DocumentsPerContentCategoryGroupOutputSortInput!]): [DocumentsPerContentCategoryGroupOutput!]! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CatalogueDocumentsCategoryOutput {
  guid: UUID!
  categoryName: String!
  subRows: [CatalogueDocumentsSubCategoryOutput!]!
}

"A connection to a list of items."
type CatalogueDocumentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CatalogueDocumentsEdge!]
  "A flattened list of the nodes."
  nodes: [CatalogueDocumentsOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CatalogueDocumentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CatalogueDocumentsOutput!
}

type CatalogueDocumentsOutput {
  guid: UUID!
  estateInternalCode: String!
  subRows: [CatalogueDocumentsCategoryOutput!]!
}

type CatalogueDocumentsPerContentCategoryGroupOutput {
  guid: UUID!
  contentCategoryGroup: String!
  subRows: [CatalogueDocumentsPerContentCategoryOutput!]!
}

type CatalogueDocumentsPerContentCategoryOutput {
  guid: UUID!
  contentCategory: ContentCategory!
  subRows: [CatalogueDocumentOutput!]!
}

type CatalogueDocumentsSubCategoryOutput {
  guid: UUID!
  subCategoryName: String
  subRows: [CatalogueDocumentsTypeOutput!]!
}

type CatalogueDocumentsTypeOutput {
  guid: UUID!
  catalogueTypeName: String!
  subRows: [CatalogueDocumentsPerContentCategoryGroupOutput!]!
}

type CatalogueItem {
  estate: Estate!
  catalogueType: CatalogueType!
  internalCode: String!
  status: EstateStatus!
  activationDate: Date!
  lastMaintenanceDate: Date!
  decommissioningDate: Date
  fields: [CatalogueItemField!]!
  id: Int!
  documents(where: DocumentFilterInput order: [DocumentsPerContentCategoryGroupOutputSortInput!]): [DocumentsPerContentCategoryGroupOutput!]!
}

type CatalogueItemDocumentExpiredNotification implements DocumentExpiredNotification & Notification {
  estateId: Int!
  catalogueTypeId: Int!
  documentCmisId: String!
  entityId: Int!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type CatalogueItemDocumentMutations {
  addRange(catalogueItemId: Int! inputs: [DocumentInput!]!): ResultOfDocument__! @authorize(roles: [ "212_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(catalogueItemId: Int! input: DocumentInput!): ResultOfDocument! @authorize(roles: [ "212_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(catalogueItemId: Int! cmisIds: [String!]!): ResultOfDocument__! @authorize(roles: [ "212_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CatalogueItemDocumentQueries {
  listDocuments(catalogueItemIds: [Int!]! where: CatalogueDocumentsFlatOutputFilterInput order: [CatalogueDocumentsCategoryOutputSortInput!]): [CatalogueDocumentsCategoryOutput!]! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CatalogueItemField {
  name: String!
  isMandatory: Boolean!
  templateTypeId: UUID!
  type: CustomFieldType!
  value: String
}

type CatalogueItemMutations {
  delete(id: Int!): Result! @authorize(roles: [ "212_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "212_D" ]) @authorize(roles: [ "OFFICE_B" ])
  update(input: CatalogueItemInput!): ResultOfCatalogueItem! @authorize(roles: [ "212_U" ]) @authorize(roles: [ "OFFICE_B" ])
  document: CatalogueItemDocumentMutations!
}

type CatalogueItemQueries {
  get(id: Int!): CatalogueItem @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogueItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CatalogueItemFilterInput order: [CatalogueItemSortInput!]): ListCatalogueItemsConnection @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogueItemsFull(where: CatalogueItemFilterInput order: [CatalogueItemSortInput!]): [CatalogueItem!]! @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode(additionallyOccupiedCodes: [String!]!): String @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentCatalogueItemId: Int): Boolean! @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: CatalogueItemFilterInput order: [CatalogueItemSortInput!]): FileUrlOutput! @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  documents: CatalogueItemDocumentQueries!
}

type CatalogueMutations {
  add(inputs: [CatalogueItemInput!]!): ResultOfCatalogueItem__! @authorize(roles: [ "212_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: CatalogueIdInput! inputs: [CatalogueItemInput!]!): ResultOfCatalogueItem__! @authorize(roles: [ "212_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: CatalogueIdInput!): Result! @authorize(roles: [ "212_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [CatalogueIdInput!]!): Result! @authorize(roles: [ "212_D" ]) @authorize(roles: [ "OFFICE_B" ])
  document: CatalogueDocumentMutations!
}

type CatalogueOutput {
  estateId: Int!
  estateInternalCode: String
  catalogueTypeId: Int!
  catalogueCategory: String
  catalogueSubCategory: String
  catalogueType: String
  catalogueTypeCount: Int!
}

type CatalogueQueries {
  get(estateId: Int! catalogueTypeId: Int!): [CatalogueItem!]! @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogues("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CatalogueOutputFilterInput order: [CatalogueOutputSortInput!]): ListCataloguesConnection @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: CatalogueOutputFilterInput order: [CatalogueOutputSortInput!]): FileUrlOutput! @authorize(roles: [ "212_R" ]) @authorize(roles: [ "OFFICE_B" ])
  documents: CatalogueDocumentQueries!
}

type CatalogueSubCategory {
  name: String!
  internalCode: String!
  category: CatalogueCategory!
  catalogueTypes: [CatalogueType!]!
  id: Int!
}

type CatalogueType {
  name: String!
  internalCode: String!
  notes: String
  category: CatalogueCategory!
  subCategory: CatalogueSubCategory
  items: [CatalogueItem!]!
  activities: [CatalogueTypeActivity!]!
  fields: [[CatalogueTypeField!]!]
  usageTypes: [EstateUsageType!]!
  id: Int!
}

type CatalogueTypeActivity {
  name: String!
  activityType: CatalogueTypeActivityType!
  isMandatoryByLaw: Boolean!
  type: CatalogueType!
  id: Int!
}

type CatalogueTypeField {
  name: String!
  isMandatory: Boolean!
  id: UUID!
  type: CustomFieldType!
  validValues: [String!]
}

type CatalogueTypeMutations {
  add(input: CatalogueTypeInput!): ResultOfCatalogueType! @authorize(roles: [ "230_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: CatalogueTypeInput!): ResultOfCatalogueType! @authorize(roles: [ "230_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "230_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "230_U" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CatalogueTypeQueries {
  get(id: Int!): CatalogueType @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogueTypes(keepTopIds: [Int!] "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CatalogueTypeFilterInput order: [CatalogueTypeSortInput!]): ListCatalogueTypesConnection @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCatalogueTypesFull(where: CatalogueTypeFilterInput order: [CatalogueTypeSortInput!]): [CatalogueType!]! @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: CatalogueTypeFilterInput order: [CatalogueTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentCatalogueTypeId: Int): Boolean! @authorize(roles: [ "230_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CategoryFunctionFlags {
  isNone: Boolean!
  isOfficer: Boolean!
  isAgreementParty: Boolean!
  isSupplier: Boolean!
  isEmployee: Boolean!
  isLandlord: Boolean!
  isTenant: Boolean!
  isCompanyGroup: Boolean!
  isHeir: Boolean!
  isBuildingAdministrator: Boolean!
}

type ChecklistTicketsCountLineChartDataPoint {
  preventiveCount: Int!
  onTriggerConditionCount: Int!
}

type City {
  name: String!
  name2: String
  name3: String
  guid: UUID!
  cityProvider: UUID!
  countyName: String
  countyGuid: UUID
  regionName: String
  regionGuid: UUID
  countryName: String
  countryISO: String!
  lastUpdated: DateTime!
  creationDate: DateTime!
  cadastralCode: String
  cityExternalCode: String
  countyExternalCode: String
  regionExternalCode: String
  countyShortCode: String
  isCountyMainCity: Boolean!
  climateZoneCode: String
  administrativeBoundary: GeoJSONPolygonType
  id: Int!
}

type CityMutations {
  add(city: CityInput!): City @authorize(roles: [ "331_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(cityId: Int! city: CityInput!): Boolean! @authorize(roles: [ "331_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(cityId: Int!): Boolean! @authorize(roles: [ "331_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CityQueries {
  city(cityId: Int!): City @authorize(roles: [ "331_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCities("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CityFilterInput order: [CitySortInput!]): ListCitiesConnection @authorize(roles: [ "331_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCitiesFull(where: CityFilterInput order: [CitySortInput!]): [City!]! @authorize(roles: [ "331_R" ]) @authorize(roles: [ "OFFICE_B" ])
  findCountyCity(countyShortCode: String!): ResultOfCity! @authorize(roles: [ "331_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type Column {
  code: String!
  sourceField: String
  sourceKey: String!
  filterKey: String
  writebackKey: String
  valueType: SubValueType!
  isVisibleInTable: Boolean!
  isVisibleInDetail: Boolean!
  isReadonly: Boolean!
  isMandatory: Boolean!
}

type CommEstateUnit {
  communicationIndex: Int!
  estateUnitId: Int!
  estateUnitType: String
  cityId: Int
  cadastreType: String
  estatePartition: String
  cadastralCoordinateLevel1: String
  cadastralCoordinateLevel2: String
  cadastralCoordinateLevel3: String
  cadastralCoordinateLevel4: String
  cadastralCategory: String
  cadastralAddressToponymy: String
  cadastralAddressNumbering: String
  cadastralIncome: Decimal
  id: Int!
  estateUnit: EstateUnit!
}

type ComplexTicketCondition implements TicketCondition {
  operator: BooleanOperator!
  internalConditions: [TicketCondition!]!
  id: Int!
}

type Config {
  function: ConfigFunction!
  name: String!
  value: String
  lastUpdated: DateTime!
  id: Int!
}

type ConfigField {
  name: String
  isMandatory: Boolean!
  id: UUID!
  type: CustomFieldType!
  validValues: [KeyValuePairOfStringAndString!]
}

type ConfigSection {
  name: String!
  taxCalculator: UUID!
  form: [[ConfigField!]!]!
}

type ConfirmedRegistryCommunicationMutations {
  cancelConfirmation(groupId: ConfirmedRegistryCommunicationGroupIdInput!): Result! @authorize(roles: [ "541_U" ]) @authorize(roles: [ "OFFICE_B" ])
  cancelRangeConfirmation(groupIds: [ConfirmedRegistryCommunicationGroupIdInput!]!): Result! @authorize(roles: [ "541_U" ]) @authorize(roles: [ "OFFICE_B" ])
}

type Contact {
  contactType: ContactType!
  contactInfo: String
  contactInfoType: ContactInfoType!
  notes: String
  creationDate: DateTime!
  id: Int!
}

type Contract {
  status: EntryStatus!
  internalCode: String!
  externalCode: String
  previousCode: String
  managementSubjectId: Int!
  type: ContractType!
  reason: Reason!
  agreementDate: Date!
  effectStartDate: Date!
  lastRenewalStartDate: Date!
  firstTermDurationMonths: Int
  secondTermDurationMonths: Int
  firstTermExpirationDate: Date
  secondTermExpirationDate: Date
  anytimeTerminationWarningMonths: Int
  nonRenewalWarningMonths: Int
  billingStartDate: Date!
  billingAfterTerm: Boolean!
  recoverBillsAfterSuspension: Boolean!
  billingAlignedToCalendarYear: Boolean!
  billingAppliesBaseFee: Boolean!
  billingBaseFee: Decimal
  billingBaseFeeBillItemType: BillItemType
  billingVATRateType: VATRateType
  billingPeriod: BillingPeriod
  billingWithSplitPayment: Boolean!
  billingWithStampTax: AutomaticBoolean
  notes: String
  billingNotes: String
  releaseReason: ReleaseReason
  releaseDate: Date
  isReleased: Boolean!
  terminationDate: Date
  terminator: ContractTerminator
  isOccupiedWithoutRight: Boolean
  billingEndDate: Date
  sublocatedContract: Contract
  registrationTaxData: RegistrationTax
  revaluationData: Revaluation
  subLocations: [Contract!]!
  locatedUnits: [LocatedUnit!]!
  counterparts: [Counterpart!]!
  transactors: [Transactor!]!
  securityDeposits: [SecurityDeposit!]!
  takeovers: [Takeover!]!
  registrationPayments: [RegistrationPayment!]!
  billingPauses: [BillingPause!]!
  ratePlans: [RatePlan!]!
  revaluationHistories: [RevaluationHistory!]!
  oneshotAdditions: [OneshotAddition!]!
  recurringAdditions: [RecurringAddition!]!
  bills: [Bill!]!
  registryCommunications: [RegistryCommunication!]!
  durationYears: Int!
  id: Int!
  managementSubject: ISubject!
  landlord: ISubject!
  tenant: ISubject!
  canUseDocumentName(name: String!): Boolean!
  documents(where: DocumentFilterInput order: [DocumentsPerContentCategoryGroupOutputSortInput!]): [DocumentsPerContentCategoryGroupOutput!]!
}

type ContractDocumentExpiredNotification implements DocumentExpiredNotification & Notification {
  isContractActive: Boolean!
  isContractSublocated: Boolean!
  documentCmisId: String!
  entityId: Int!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type ContractDocumentMutations {
  addRange(contractId: Int! inputs: [DocumentInput!]!): ResultOfDocument__! @authorize(roles: [ "501_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(contractId: Int! input: DocumentInput!): ResultOfDocument! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(contractId: Int! cmisIds: [String!]!): ResultOfDocument__! @authorize(roles: [ "501_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ContractDocumentOutput {
  isContractSublocated: Boolean!
  isContractActive: Boolean!
  cmisId: String!
  entityId: String
  entityIntId: Int
  name: String!
  fileName: String
  since: DateTime
  until: DateTime
  protocolNumber: String
  issueDate: Date
  issuer: String
  uploaderName: String
  creationDate: DateTime!
  notes: String
}

"A connection to a list of items."
type ContractDocumentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContractDocumentsEdge!]
  "A flattened list of the nodes."
  nodes: [ContractDocumentsOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ContractDocumentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ContractDocumentsOutput!
}

type ContractDocumentsOutput {
  guid: UUID!
  contractInternalCode: String!
  subRows: [ContractDocumentsPerContentCategoryGroupOutput!]!
}

type ContractDocumentsPerContentCategoryGroupOutput {
  guid: UUID!
  contentCategoryGroup: String!
  subRows: [ContractDocumentsPerContentCategoryOutput!]!
}

type ContractDocumentsPerContentCategoryOutput {
  guid: UUID!
  contentCategory: ContentCategory!
  subRows: [ContractDocumentOutput!]!
}

type ContractExpiryOutput {
  contractId: Int!
  internalCode: String!
  typeDescription: String
  daysToExpiration: Int!
  managementSubjectName: String
  billingBaseFee: Decimal
}

type ContractListLocatedUnitOutput {
  estateUnitOrSubUnitInternalCode: String
  estateUnitName: String
  estateUnitAddress: AsstAddress
  isMainUnit: Boolean!
  isRegistryUpdateEnabled: Boolean!
  isPartialLocation: Boolean!
  surfaceSqM: Int
}

type ContractListOutput {
  id: Int!
  isActive: Boolean!
  internalCode: String!
  externalCode: String
  counterpartName: String
  typeDescription: String
  isSublocated: Boolean!
  status: EntryStatus!
  effectStartDate: Date!
  expirationDate: Date
  daysToExpiration: Int
  locatedUnits: [ContractListLocatedUnitOutput!]!
  managementSubjectName: String
  releaseReason: ReleaseReason
  releaseDate: Date
  isOccupiedWithoutRight: Boolean
  terminationDate: Date
  terminator: ContractTerminator
  firstTermDurationMonths: Int
  secondTermDurationMonths: Int
  firstTermExpirationDate: Date
  secondTermExpirationDate: Date
  anytimeTerminationWarningMonths: Int
  nonRenewalWarningMonths: Int
  reason: Reason!
  agreementDate: Date!
  lastRenewalStartDate: Date!
}

type ContractMonthlyStatisticsOutput {
  date: Date!
  totalActiveContractsCount: Int!
  totalPassiveContractsCount: Int!
  totalActiveContractsRevenue: Decimal!
  totalPassiveContractsRevenue: Decimal!
}

type ContractMutations {
  add(input: ContractInput!): ResultOfContract! @authorize(roles: [ "501_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: ContractInput!): ResultOfContract! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  pauseBilling(contractId: Int! since: Date! notes: String): ResultOfBillingPause! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  resumeBilling(contractId: Int! pauseEndDate: Date! isRecoveryArrears: Boolean! notes: String): ResultOfBillingPause! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  release(id: Int! releaseReason: ReleaseReason releaseDate: Date isOccupiedWithoutRight: Boolean!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  transferManagementSubject(contractIds: [Int!]! newManagementSubjectId: Int! legalRepresentativeSubjectId: Int! paymentDate: Date! terminationDate: Date! takeoverType: TakeoverType!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "511_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "511_D" ]) @authorize(roles: [ "OFFICE_B" ])
  document: ContractDocumentMutations!
}

type ContractQueries {
  listContracts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ContractFilterInput order: [ContractSortInput!]): ListContractsConnection @authorize(roles: [ "501_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listContractsFull(where: ContractFilterInput order: [ContractSortInput!]): [Contract!]! @authorize(roles: [ "501_R" ]) @authorize(roles: [ "OFFICE_B" ])
  contract(contractId: Int!): Contract @authorize(roles: [ "501_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: ContractFilterInput order: [ContractSortInput!]): FileUrlOutput! @authorize(roles: [ "501_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentContractId: Int): Boolean! @authorize(roles: [ "501_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode(isActiveContract: Boolean!): String @authorize(roles: [ "501_R" ]) @authorize(roles: [ "OFFICE_B" ])
  lastContractExpiries(isActive: Boolean!): [ContractExpiryOutput!]! @authorize(roles: [ "501_R" ]) @authorize(roles: [ "OFFICE_B" ])
  statistics: ContractStatisticsOutput! @authorize(roles: [ "501_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ContractStatisticsOutput {
  monthly: [ContractMonthlyStatisticsOutput!]!
  yearly: [ContractYearlyStatisticsOutput!]!
}

type ContractTemplate {
  description: String!
  internalCode: String!
  contractType: FcltContractType!
  catalogueTypeIds: [Int!]!
  slas: [SLA!]!
  penalties: [Penalty!]!
  id: Int!
  catalogueTypes: [CatalogueType!]!
}

type ContractTemplateMutations {
  add(input: ContractTemplateInput!): ResultOfContractTemplate! @authorize(roles: [ "811_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: ContractTemplateInput!): ResultOfContractTemplate! @authorize(roles: [ "811_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "811_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "811_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ContractTemplateQueries {
  get(id: Int!): ContractTemplate @authorize(roles: [ "811_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listContractTemplates("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ContractTemplateFilterInput order: [ContractTemplateSortInput!]): ListContractTemplatesConnection @authorize(roles: [ "811_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "811_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentContractTemplateId: Int): Boolean! @authorize(roles: [ "811_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: ContractTemplateFilterInput order: [ContractTemplateSortInput!]): FileUrlOutput! @authorize(roles: [ "811_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ContractType {
  description: String!
  internalCode: String!
  isActive: Boolean!
  isStampTax: Boolean!
  isRegistrationTax: Boolean!
  nature: AssetNature!
  usageTypeId: Int!
  isRentChargeApplicable: Boolean!
  isAbsoluteRevaluation: Boolean!
  isRevaluationApplicable: Boolean!
  revaluationRatePercent: Decimal
  revaluationCalculationMonth: Int
  revaluationIndexMonth: Int
  registrationTaxPercent: Float
  registrationTaxTenantPercent: Float
  registrationTaxIncomeType: RegistrationTaxIncomeTypeRLI
  id: Int!
  usageType: EstateUsageType!
}

type ContractTypeMutations {
  add(input: ContractTypeInput!): ResultOfContractType! @authorize(roles: [ "511_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: ContractTypeInput!): ResultOfContractType! @authorize(roles: [ "511_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "511_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "511_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ContractTypeQueries {
  get(id: Int!): ContractType @authorize(roles: [ "511_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listContractTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ContractTypeFilterInput order: [ContractTypeSortInput!]): ListContractTypesConnection @authorize(roles: [ "511_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: ContractTypeFilterInput order: [ContractTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "511_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentContractTypeId: Int): Boolean! @authorize(roles: [ "511_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "511_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ContractYearlyStatisticsOutput {
  month: Int!
  totalActiveContractsCount: Int!
  totalPassiveContractsCount: Int!
  totalActiveContractsRevenue: Decimal!
  totalPassiveContractsRevenue: Decimal!
}

type ContractsExpirationNotification implements Notification {
  contractIds: [Int!]!
  isActiveContracts: Boolean!
  daysToExpiration: Int!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type ConvertedToExcludedFromMaintenanceContractTicketHistoryEntry implements TicketHistoryEntry {
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type CostCharge {
  service: UtilityService!
  periodStart: Date!
  periodEnd: Date!
  totalAmount: Decimal!
  referenceDate: Date!
  dueDate: Date!
  invoiceNumber: String!
  totalVATAmount: Decimal!
  invoicedConsumptionAmount: Decimal!
  actualConsumption: CostChargeConsumption
  expectedConsumption: CostChargeConsumption
  fields: [CostChargeField!]!
  id: Int!
}

type CostChargeAnalysis {
  measurementUnit: String!
  surface: CostChargeAnalysisSurface!
  consumption: CostChargeAnalysisConsumption!
  cost: CostChargeAnalysisCost!
  perYear: [KeyValuePairOfInt32AndCostChargeYearlyAnalysis!]!
}

type CostChargeAnalysisConsumption {
  currentYearValue: Decimal!
  previousYearValue: Decimal!
  difference: Decimal!
  differencePercentage: Decimal
}

type CostChargeAnalysisCost {
  currentYearValue: Decimal!
  previousYearValue: Decimal!
  difference: Decimal!
  differencePercentage: Decimal
}

type CostChargeAnalysisSurface {
  currentYear: CostChargeAnalysisSurfaceValue
  previousYear: CostChargeAnalysisSurfaceValue
}

type CostChargeAnalysisSurfaceValue {
  area: Int!
  date: Date!
}

type CostChargeAnalysisValue {
  totalConsumption: Decimal!
  consumptionPerGrossSurface: Decimal
  consumptionPerHeatingCoolingSurface: Decimal
  totalCost: Decimal!
  costPerGrossSurface: Decimal
  costPerHeatingCoolingSurface: Decimal
}

type CostChargeConsumption {
  since: Date!
  until: Date!
  values: [ReadingValue!]!
}

type CostChargeField {
  name: String!
  isMandatory: Boolean!
  templateTypeId: UUID!
  type: CustomFieldType!
  value: String
}

type CostChargeMutations {
  add(input: CostChargeInput!): ResultOfCostCharge! @authorize(roles: [ "621_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: CostChargeInput!): ResultOfCostCharge! @authorize(roles: [ "621_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "621_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "621_D" ]) @authorize(roles: [ "OFFICE_B" ])
  import(file: Upload!): ResultOfInt32! @authorize(roles: [ "621_C" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CostChargeQueries {
  get(id: Int!): CostCharge @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCostCharges("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CostChargeFilterInput order: [CostChargeSortInput!]): ListCostChargesConnection @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  filteredEstates(filters: CostChargeAnalysisFiltersInput "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateFilterInput order: [EstateSortInput!]): FilteredEstatesConnection @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  filteredAddresses(filters: CostChargeAnalysisFiltersInput "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AsstAddressFilterInput order: [AsstAddressSortInput!]): FilteredAddressesConnection @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  filteredCountyNames(filters: CostChargeAnalysisFiltersInput "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: FilteredCountyNameFilterInput order: [FilteredCountyNameSortInput!]): FilteredCountyNamesConnection @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  filteredCityNames(filters: CostChargeAnalysisFiltersInput "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: FilteredCityNameFilterInput order: [FilteredCityNameSortInput!]): FilteredCityNamesConnection @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  filteredUtilityTypes(filters: CostChargeAnalysisFiltersInput "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UtilityTypeFilterInput order: [UtilityTypeSortInput!]): FilteredUtilityTypesConnection @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  filteredUtilityServices(filters: CostChargeAnalysisFiltersInput "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UtilityServiceFilterInput order: [UtilityServiceSortInput!]): FilteredUtilityServicesConnection @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  analysis(filters: CostChargeAnalysisFiltersInput!): [KeyValuePairOfCostChargeAnalysisCategoryAndCostChargeAnalysis!]! @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: CostChargeFilterInput order: [CostChargeSortInput!]): FileUrlOutput! @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  templateOfImportFromExcel: FileUrlOutput! @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
  templateOfImportFromCsv: FileUrlOutput! @authorize(roles: [ "621_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CostChargeYearlyAnalysis {
  value: CostChargeAnalysisValue!
  perMonth: [KeyValuePairOfInt32AndCostChargeAnalysisValue!]
}

type CostChargesExpirationNotification implements Notification {
  costChargeIds: [Int!]!
  daysToExpiration: Int!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type Counterpart {
  subjectId: Int!
  isMainCounterpart: Boolean!
  contractSharePercent: Float!
  since: Date!
  until: Date
  type: CounterpartType!
  id: Int!
  subject: ISubject!
}

type Craft {
  internalCode: String!
  name: String!
  ordering: Int!
  id: Int!
}

type CraftMutations {
  add(input: CraftInput!): ResultOfCraft! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: CraftInput!): ResultOfCraft! @authorize(roles: [ "830_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type CraftQueries {
  get(id: Int!): Craft @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listCrafts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CraftFilterInput order: [CraftSortInput!]): ListCraftsConnection @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentCraftId: Int): Boolean! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: CraftFilterInput order: [CraftSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

"A connection to a list of items."
type DetailGroupedPaymentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DetailGroupedPaymentsEdge!]
  "A flattened list of the nodes."
  nodes: [AssetTaxDetailRow!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type DetailGroupedPaymentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AssetTaxDetailRow!
}

type Document {
  name: String!
  fileName: String
  contentType: ContentType!
  contentCategory: ContentCategory!
  contentCategoryGroup: String!
  creationDate: DateTime!
  since: DateTime
  until: DateTime
  mimeType: String
  folder: String!
  tenantId: String!
  managementSubjectIds: [String!]!
  entityId: String
  estateId: String
  cmisId: String!
  uploaderName: String
  issuer: String
  issuerCode: String
  issueDate: Date
  protocolNumber: String
  notes: String
  entityIntId: Int
  id: Int!
}

type DocumentQueries {
  allDocuments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: DocumentRowFilterInput order: [DocumentRowSortInput!]): AllDocumentsConnection @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  subjectDocuments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SubjectDocumentsFlatOutputFilterInput order: [SubjectDocumentsOutputSortInput!]): SubjectDocumentsConnection @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  estateDocuments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateDocumentsFlatOutputFilterInput order: [EstateDocumentsOutputSortInput!]): EstateDocumentsConnection @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  estateUnitDocuments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateUnitDocumentsFlatOutputFilterInput order: [EstateUnitDocumentsOutputSortInput!]): EstateUnitDocumentsConnection @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  ticketDocuments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TicketDocumentsFlatOutputFilterInput order: [TicketDocumentsOutputSortInput!]): TicketDocumentsConnection @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  catalogueDocuments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CatalogueDocumentsFlatOutputFilterInput order: [CatalogueDocumentsOutputSortInput!]): CatalogueDocumentsConnection @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  contractDocuments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ContractDocumentsFlatOutputFilterInput order: [ContractDocumentsOutputSortInput!]): ContractDocumentsConnection @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  fcltContractDocuments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: FcltContractDocumentsFlatOutputFilterInput order: [FcltContractDocumentsOutputSortInput!]): FcltContractDocumentsConnection @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportDocumentsToExcel(where: DocumentRowFilterInput order: [DocumentRowSortInput!]): FileUrlOutput! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportEstateDocumentsToExcel(where: EstateDocumentsFlatOutputFilterInput order: [EstateDocumentsOutputSortInput!]): FileUrlOutput! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportEstateUnitDocumentsToExcel(where: EstateUnitDocumentsFlatOutputFilterInput order: [EstateUnitDocumentsOutputSortInput!]): FileUrlOutput! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportCatalogueDocumentsToExcel(where: CatalogueDocumentsFlatOutputFilterInput order: [CatalogueDocumentsOutputSortInput!]): FileUrlOutput! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportSubjectDocumentsToExcel(where: SubjectDocumentsFlatOutputFilterInput order: [SubjectDocumentsOutputSortInput!]): FileUrlOutput! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportTicketDocumentsToExcel(where: TicketDocumentsFlatOutputFilterInput order: [TicketDocumentsOutputSortInput!]): FileUrlOutput! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportContractDocumentsToExcel(where: ContractDocumentsFlatOutputFilterInput order: [ContractDocumentsOutputSortInput!]): FileUrlOutput! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportFcltContractDocumentsToExcel(where: FcltContractDocumentsFlatOutputFilterInput order: [FcltContractDocumentsOutputSortInput!]): FileUrlOutput! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type DocumentRow {
  document: Document!
  estateId: Int
  estateInternalCode: String
  estateUnitInternalCode: String
  catalogueItemInternalCode: String
  catalogueTypeId: Int
  catalogueTypeInternalCode: String
  catalogueCategory: String
  catalogueSubCategory: String
  subjectInternalCode: String
  contractInternalCode: String
  isContractActive: Boolean
  isContractSublocated: Boolean
  ticketId: Int
  ticketInternalCode: String
  isTicketExcludedFromMaintenanceContract: Boolean
  fcltContractId: Int
  fcltContractInternalCode: String
}

type DocumentsPerContentCategoryGroupOutput {
  guid: UUID!
  contentCategoryGroup: String!
  subRows: [DocumentsPerContentCategoryOutput!]!
}

type DocumentsPerContentCategoryOutput {
  guid: UUID!
  contentCategory: ContentCategory!
  subRows: [Document!]!
}

type Estate {
  name: String
  internalCode: String!
  externalCode: String
  status: EstateStatus!
  type: EstateType!
  ownership: EstateOwnership!
  mainUsageType: EstateMainUsageType!
  usageType: EstateUsageType!
  surfaceAreaSqM: Int
  buildYear: Int
  decommissioningDate: Date
  managementSubjectId: Int!
  managementOrgUnitId: Int
  notes: String
  deletionDate: DateTime
  totalMarketValue: EstateTotalMarketValue
  addresses: [AsstAddress!]!
  stairs: [Stair!]!
  floors: [Floor!]!
  valuations: [Valuation!]!
  estateUnits: [EstateUnit!]!
  refactorings: [Refactoring!]!
  catalogueItems: [CatalogueItem!]!
  id: Int!
  managementOrgUnit: OrgUnit
  managementSubject: ISubject!
  canUseDocumentName(name: String!): Boolean!
  documents(where: DocumentFilterInput order: [DocumentsPerContentCategoryGroupOutputSortInput!]): [DocumentsPerContentCategoryGroupOutput!]!
  images: [Document!]!
}

type EstateDocumentExpiredNotification implements DocumentExpiredNotification & Notification {
  documentCmisId: String!
  entityId: Int!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type EstateDocumentMutations {
  addRange(estateId: Int! inputs: [DocumentInput!]!): ResultOfDocument__! @authorize(roles: [ "211_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(estateId: Int! input: DocumentInput!): ResultOfDocument! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(estateId: Int! cmisIds: [String!]!): ResultOfDocument__! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateDocumentQueries {
  exportPortfolioToZip(estateId: Int! cmisIds: [String!]!): Result! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

"A connection to a list of items."
type EstateDocumentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EstateDocumentsEdge!]
  "A flattened list of the nodes."
  nodes: [EstateDocumentsOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type EstateDocumentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EstateDocumentsOutput!
}

type EstateDocumentsOutput {
  guid: UUID!
  estateInternalCode: String!
  subRows: [DocumentsPerContentCategoryGroupOutput!]!
}

type EstateLightDto {
  id: Int!
  managementSubjectId: Int!
  internalCode: String!
  name: String
  managementSubjectName: String
  status: EstateStatus!
  type: EstateType!
  usageType: EstateUsageType!
  addresses: [AsstAddress!]!
}

type EstateLocation {
  estateId: Int!
  estateInternalCode: String!
  estateName: String
  address: AsstAddress
}

type EstateMainUsageType {
  name: String!
  internalCode: String!
  ordering: Int!
  id: Int!
}

type EstateMainUsageTypeMutations {
  add(input: EstateMainUsageTypeInput!): ResultOfEstateMainUsageType! @authorize(roles: [ "211_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: EstateMainUsageTypeInput!): ResultOfEstateMainUsageType! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateMainUsageTypeQueries {
  get(id: Int!): EstateMainUsageType @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstateMainUsageTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateMainUsageTypeFilterInput order: [EstateMainUsageTypeSortInput!]): ListEstateMainUsageTypesConnection @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentEstateMainUsageTypeId: Int): Boolean! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: EstateMainUsageTypeFilterInput order: [EstateMainUsageTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateMarketValue {
  type: EstateMarketValueType!
  value: Decimal!
  id: Int!
}

type EstateMutations {
  addEstate(estateInput: EstateInput!): ResultOfEstate! @authorize(roles: [ "211_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateEstate(estateId: Int! estateInput: EstateInput!): ResultOfEstate! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  calculateTotalMarketValue(estateId: Int! totalMarketValueInput: EstateTotalMarketValueInput!): ResultOfIReadOnlyDictionaryOfEstateMarketValueTypeAndDecimal! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(estateId: Int!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(estateIds: [Int!]!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
  document: EstateDocumentMutations!
}

type EstateOccupationMonthlyStatisticsOutput {
  date: Date!
  totalOccupiedEstatesCount: Int!
  averageTotalOccupiedEstatesCount: Int!
}

type EstateOccupationStatisticsOutput {
  lastMonth: [EstateOccupationMonthlyStatisticsOutput!]!
  lastYear: [EstateOccupationYearlyStatisticsOutput!]!
  percentageIncreaseComparedToLastYear: Int
  percentageIncreaseComparedToTwoYears: Int
}

type EstateOccupationYearlyStatisticsOutput {
  month: Int!
  totalOccupiedEstatesCount: Int!
  averageTotalOccupiedEstatesCount: Int!
}

type EstatePortfolioExportIsReadyNotification implements Notification {
  downloadGuid: UUID
  isSuccess: Boolean!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type EstateQueries {
  estate(estateId: Int!): Estate @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstates(keepTopIds: [Int!] "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateFilterInput order: [EstateSortInput!]): ListEstatesConnection @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstatesFull(where: EstateFilterInput order: [EstateSortInput!]): [EstateLightDto!]! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentEstateId: Int): Boolean! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: EstateFilterInput order: [EstateSortInput!]): FileUrlOutput! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  surfaces(estateId: Int!): [EstateSurfaces!]! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  statistics: EstateStatisticsOutput! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  locations: [EstateLocation!]! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  occupationStatistics: EstateOccupationStatisticsOutput! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  documents: EstateDocumentQueries!
}

type EstateStatisticsOutput {
  estatesCount: Int!
  estateUnitsCount: Int!
  occupiedEstatesCount: Int!
  vacantEstatesCount: Int!
}

type EstateSubUnit {
  internalCode: String!
  occupantType: OccupantType
  occupantId: Int
  usageType: EstateUsageType
  estateUnit: EstateUnit!
  orgUnitId: Int
  notes: String
  since: Date
  until: Date
  deletionDate: DateTime
  surfaceSqM: Int
  occupancyPercent: Int
  id: Int!
  occupantSubject: ISubject
  orgUnit: OrgUnit
}

type EstateSubUnitMutations {
  add(subInput: EstateSubUnitInput!): ResultOfEstateSubUnit! @authorize(roles: [ "214_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(subInput: EstateSubUnitInput!): ResultOfEstateSubUnit! @authorize(roles: [ "214_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "214_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "214_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateSubUnitQueries {
  get(id: Int!): EstateSubUnit @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstateSubUnit("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateSubUnitFilterInput order: [EstateSubUnitSortInput!]): ListEstateSubUnitConnection @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstateSubUnitsFull(where: EstateSubUnitFilterInput order: [EstateSubUnitSortInput!]): [EstateSubUnit!]! @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode(parentUnitEstateId: Int!): String @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateSurfaces {
  metric: SurfaceMeasurementMetric!
  heritageType: EstateUnitHeritageType!
  surfaceSqMTotal: Int!
  surfaceSqMCommonArea: Int!
  surfaceSqMSideArea: Int!
}

type EstateTotalMarketValue {
  calculate: [KeyValuePairOfEstateMarketValueTypeAndDecimal!]!
  totalSurfaceAreaSqM: Int!
  notes: String
  coefficients: [EstateTotalMarketValueCoefficient!]!
  marketValues: [EstateMarketValue!]!
}

type EstateTotalMarketValueCoefficient {
  type: EstateTotalMarketValueCoefficientType!
  value: Decimal!
  id: Int!
}

type EstateUnit {
  name: String
  internalCode: String!
  externalCode: String
  notes: String
  type: EstateUnitType!
  status: EstateUnitStatus!
  usageType: EstateUsageType!
  ownershipType: EstateUnitOwnershipType!
  ownershipStartDate: Date!
  ownershipEndDate: Date
  ownershipPercent: Float
  sharedArea: Boolean!
  procurementActId: Int
  managementSubjectId: Int!
  costCentreId: Int
  disusedDate: Date
  deletionDate: DateTime
  lastRelevantChangeDate: DateTime
  estate: Estate!
  address: AsstAddress!
  subNumbering: String
  stair: Stair
  officialActId: Int
  historyTags: [UUID!]!
  estateSubUnits: [EstateSubUnit!]!
  repossessions: [Repossession!]!
  unitExpenses: [UnitExpenses!]!
  surfaces: [EstateUnitSurface!]!
  floors: [Floor!]!
  lastRepossession: Repossession
  cadastralUnits: [CadastralUnit!]!
  currentCadastralUnit: CadastralUnit
  netSurface: Int
  grossSurface: Int
  id: Int!
  managementSubject: ISubject!
  officialAct: OfficialAct
  surfacesTree: [EstateUnitSurfaceSummary!]!
  canUseDocumentName(name: String!): Boolean!
  documents(where: DocumentFilterInput order: [DocumentsPerContentCategoryGroupOutputSortInput!]): [DocumentsPerContentCategoryGroupOutput!]!
}

type EstateUnitDocumentExpiredNotification implements DocumentExpiredNotification & Notification {
  documentCmisId: String!
  entityId: Int!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type EstateUnitDocumentMutations {
  addRange(estateUnitId: Int! inputs: [DocumentInput!]!): ResultOfDocument__! @authorize(roles: [ "214_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(estateUnitId: Int! input: DocumentInput!): ResultOfDocument! @authorize(roles: [ "214_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(estateUnitId: Int! cmisIds: [String!]!): ResultOfDocument__! @authorize(roles: [ "214_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateUnitDocumentQueries {
  listDocuments(estateUnitIds: [Int!]! where: EstateUnitDocumentsFlatOutputFilterInput order: [EstateUnitDocumentsOutputSortInput!]): [EstateUnitDocumentsOutput!]! @authorize(roles: [ "401_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

"A connection to a list of items."
type EstateUnitDocumentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EstateUnitDocumentsEdge!]
  "A flattened list of the nodes."
  nodes: [EstateUnitDocumentsOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type EstateUnitDocumentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EstateUnitDocumentsOutput!
}

type EstateUnitDocumentsOutput {
  guid: UUID!
  estateUnitInternalCode: String!
  subRows: [DocumentsPerContentCategoryGroupOutput!]!
}

type EstateUnitFloor {
  estateUnit: EstateUnit!
  estateUnitId: Int!
  floor: Floor!
  floorId: Int!
  id: Int!
}

type EstateUnitGroup {
  name: String!
  internalCode: String!
  managementSubjectId: Int!
  estateUnitIds: [Int!]!
  id: Int!
  managementSubject: ISubject!
  estateUnits: [EstateUnit!]!
}

type EstateUnitGroupMutations {
  add(input: EstateUnitGroupInput!): ResultOfEstateUnitGroup! @authorize(roles: [ "800_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: EstateUnitGroupInput!): ResultOfEstateUnitGroup! @authorize(roles: [ "800_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "800_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "800_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateUnitGroupQueries {
  get(id: Int!): EstateUnitGroup @authorize(roles: [ "800_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstateUnitGroups("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateUnitGroupFilterInput order: [EstateUnitGroupSortInput!]): ListEstateUnitGroupsConnection @authorize(roles: [ "800_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "800_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentEstateUnitGroupId: Int): Boolean! @authorize(roles: [ "800_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: EstateUnitGroupFilterInput order: [EstateUnitGroupSortInput!]): FileUrlOutput! @authorize(roles: [ "800_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateUnitMutations {
  add(input: EstateUnitInput!): ResultOfEstateUnit! @authorize(roles: [ "214_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: EstateUnitInput!): ResultOfEstateUnit! @authorize(roles: [ "214_U" ]) @authorize(roles: [ "OFFICE_B" ])
  split(id: Int! inputs: [EstateUnitInput!]!): ResultOfEstateUnit__! @authorize(roles: [ "215_U" ]) @authorize(roles: [ "OFFICE_B" ])
  transform(id: Int! input: EstateUnitInput!): ResultOfEstateUnit! @authorize(roles: [ "215_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "214_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "214_D" ]) @authorize(roles: [ "OFFICE_B" ])
  merge(ids: [Int!]! input: EstateUnitInput!): ResultOfEstateUnit! @authorize(roles: [ "215_C" ]) @authorize(roles: [ "OFFICE_B" ])
  document: EstateUnitDocumentMutations!
}

type EstateUnitQueries {
  estateUnit(estateUnitId: Int!): EstateUnit @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstateUnits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateUnitFilterInput order: [EstateUnitSortInput!]): ListEstateUnitsConnection @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstateUnitsFull(where: EstateUnitFilterInput order: [EstateUnitSortInput!]): [EstateUnit!]! @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode(parentEstateId: Int!): String @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCodeExceptOccupied(parentId: Int! additionallyOccupiedCodes: [String!]!): String! @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: EstateUnitFilterInput order: [EstateUnitSortInput!]): FileUrlOutput! @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  estateUnitTypeDistribution(showAll: Boolean! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateUnitTypeDistributionFilterInput order: [EstateUnitTypeDistributionSortInput!]): EstateUnitTypeDistributionConnection @authorize(roles: [ "214_R" ]) @authorize(roles: [ "OFFICE_B" ])
  documents: EstateUnitDocumentQueries!
}

type EstateUnitSurface {
  estateUnit: EstateUnit!
  metric: SurfaceMeasurementMetric!
  surfaceSqMTotal: Int
  surfaceSqMCommonArea: Int
  surfaceSqMSideArea: Int
  floorId: Int
  floor: Floor
  functionAreaId: Int
  functionArea: FunctionArea
  id: Int!
}

type EstateUnitSurfaceSummary {
  surfaceId: Int
  metric: SurfaceMeasurementMetric!
  surfaceSqMTotal: Int
  surfaceSqMCommonArea: Int
  surfaceSqMSideArea: Int
  floors: [EstateUnitSurfaceSummaryFloor!]!
}

type EstateUnitSurfaceSummaryFloor {
  surfaceId: Int
  surfaceSqMTotal: Int
  surfaceSqMCommonArea: Int
  surfaceSqMSideArea: Int
  floor: EstateUnitSurfaceSummaryFloorSummary!
  functionAreas: [EstateUnitSurfaceSummaryFunctionArea!]!
}

type EstateUnitSurfaceSummaryFloorSummary {
  id: Int
  name: String
  position: Float!
  templateReference: UUID
}

type EstateUnitSurfaceSummaryFunctionArea {
  surfaceId: Int
  surfaceSqMTotal: Int
  surfaceSqMCommonArea: Int
  surfaceSqMSideArea: Int
  functionArea: EstateUnitSurfaceSummaryFunctionAreaSummary!
}

type EstateUnitSurfaceSummaryFunctionAreaSummary {
  id: Int
  name: String
  surfaceType: SurfaceType!
}

type EstateUnitTypeDistribution {
  percentage: Float!
  estateUnitType: EstateUnitType!
}

"A connection to a list of items."
type EstateUnitTypeDistributionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EstateUnitTypeDistributionEdge!]
  "A flattened list of the nodes."
  nodes: [EstateUnitTypeDistribution!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type EstateUnitTypeDistributionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EstateUnitTypeDistribution!
}

type EstateUsageType {
  name: String!
  internalCode: String!
  ordering: Int!
  isForEstate: Boolean!
  isForEstateUnit: Boolean!
  isForEstateSubUnit: Boolean!
  isForContracts: Boolean!
  id: Int!
}

type EstateUsageTypeMutations {
  add(input: EstateUsageTypeInput!): ResultOfEstateUsageType! @authorize(roles: [ "211_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: EstateUsageTypeInput!): ResultOfEstateUsageType! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type EstateUsageTypeQueries {
  get(id: Int!): EstateUsageType @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstateUsageTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EstateUsageTypeFilterInput order: [EstateUsageTypeSortInput!]): ListEstateUsageTypesConnection @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listEstateUsageTypesFull(where: EstateUsageTypeFilterInput order: [EstateUsageTypeSortInput!]): [EstateUsageType!]! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentEstateUsageTypeId: Int): Boolean! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: EstateUsageTypeFilterInput order: [EstateUsageTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  usageTypeDistribution(showAll: Boolean! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UsageTypeDistributionFilterInput order: [UsageTypeDistributionSortInput!]): UsageTypeDistributionConnection @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type FcltContract {
  internalCode: String!
  externalCode: String
  description: String!
  type: FcltContractType!
  originalTemplate: ContractTemplate
  entryStatus: EntryStatus!
  providerSubjectId: Int!
  agreementDate: Date
  effectiveDate: Date!
  expirationDate: Date!
  cancellationNoticeDaysCount: Int
  renewalNoticeDaysCount: Int
  maximumRenewalDaysCount: Int
  frameworkAgreements: [FrameworkAgreement!]!
  originalEstateUnitGroup: EstateUnitGroup
  estateUnitIds: [Int!]!
  catalogueTypeIds: [Int!]!
  slas: [SLA!]!
  penalties: [Penalty!]!
  ticketChecklists: [TicketChecklist!]!
  billingInfo: BillingInfo!
  priceLists: [PriceList!]!
  termExtensions: [TermExtension!]!
  id: Int!
  providerSubject: ISubject!
  estateUnits: [EstateUnit!]!
  catalogueTypes: [CatalogueType!]!
  canUseDocumentName(name: String!): Boolean!
  documents(where: DocumentFilterInput order: [DocumentsPerContentCategoryGroupOutputSortInput!]): [DocumentsPerContentCategoryGroupOutput!]!
}

type FcltContractDocumentMutations {
  addRange(contractId: Int! inputs: [DocumentInput!]!): ResultOfDocument__! @authorize(roles: [ "810_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(contractId: Int! input: DocumentInput!): ResultOfDocument! @authorize(roles: [ "810_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(contractId: Int! cmisIds: [String!]!): ResultOfDocument__! @authorize(roles: [ "810_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

"A connection to a list of items."
type FcltContractDocumentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FcltContractDocumentsEdge!]
  "A flattened list of the nodes."
  nodes: [FcltContractDocumentsOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type FcltContractDocumentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FcltContractDocumentsOutput!
}

type FcltContractDocumentsOutput {
  guid: UUID!
  fcltContractInternalCode: String!
  subRows: [DocumentsPerContentCategoryGroupOutput!]!
}

type FcltContractMutations {
  add(input: FcltContractInput!): ResultOfFcltContract! @authorize(roles: [ "811_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: FcltContractInput!): ResultOfFcltContract! @authorize(roles: [ "811_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "811_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "811_D" ]) @authorize(roles: [ "OFFICE_B" ])
  document: FcltContractDocumentMutations!
}

type FcltContractQueries {
  get(id: Int!): FcltContract @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listFcltContracts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: FcltContractFilterInput order: [FcltContractSortInput!]): ListFcltContractsConnection @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentContractId: Int): Boolean! @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: FcltContractFilterInput order: [FcltContractSortInput!]): FileUrlOutput! @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type FcltContractType {
  name: String!
  internalCode: String!
  ordering: Int!
  contracts: [FcltContract!]!
  contractTemplates: [ContractTemplate!]!
  id: Int!
}

type FcltContractTypeMutations {
  add(input: FcltContractTypeInput!): ResultOfFcltContractType! @authorize(roles: [ "812_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: FcltContractTypeInput!): ResultOfFcltContractType! @authorize(roles: [ "812_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "812_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "812_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type FcltContractTypeQueries {
  get(id: Int!): FcltContractType @authorize(roles: [ "812_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listFcltContractTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: FcltContractTypeFilterInput order: [FcltContractTypeSortInput!]): ListFcltContractTypesConnection @authorize(roles: [ "812_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "812_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentContractTypeId: Int): Boolean! @authorize(roles: [ "812_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: FcltContractTypeFilterInput order: [FcltContractTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "812_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type FileUrlOutput {
  resourceUrl: String!
}

"A connection to a list of items."
type FilteredAddressesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FilteredAddressesEdge!]
  "A flattened list of the nodes."
  nodes: [AsstAddress!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type FilteredAddressesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AsstAddress!
}

type FilteredCityName {
  value: String!
}

"A connection to a list of items."
type FilteredCityNamesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FilteredCityNamesEdge!]
  "A flattened list of the nodes."
  nodes: [FilteredCityName!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type FilteredCityNamesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FilteredCityName!
}

type FilteredCountyName {
  value: String!
}

"A connection to a list of items."
type FilteredCountyNamesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FilteredCountyNamesEdge!]
  "A flattened list of the nodes."
  nodes: [FilteredCountyName!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type FilteredCountyNamesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FilteredCountyName!
}

"A connection to a list of items."
type FilteredEstatesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FilteredEstatesEdge!]
  "A flattened list of the nodes."
  nodes: [Estate!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type FilteredEstatesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Estate!
}

"A connection to a list of items."
type FilteredUtilityServicesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FilteredUtilityServicesEdge!]
  "A flattened list of the nodes."
  nodes: [UtilityService!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type FilteredUtilityServicesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UtilityService!
}

"A connection to a list of items."
type FilteredUtilityTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FilteredUtilityTypesEdge!]
  "A flattened list of the nodes."
  nodes: [UtilityType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type FilteredUtilityTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UtilityType!
}

type Floor {
  name: String!
  position: Float!
  templateReference: UUID!
  estateUnits: [EstateUnit!]!
  estateUnitFloor: [EstateUnitFloor!]!
  id: Int!
}

type FloorTemplate {
  name: String!
  position: Float!
  guid: UUID!
  id: Int!
}

type FloorTemplateMutations {
  addFloorTemplate(input: FloorTemplateInput!): ResultOfFloorTemplate! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  addFloorTemplates(input: [FloorTemplateInput!]!): ResultOfListOfFloorTemplate! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  updateFloor(floorTemplateId: Int! input: FloorTemplateInput!): ResultOfFloorTemplate! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteFloor(floorId: Int!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRangeFloor(floorIds: [Int!]!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type FloorTemplateQueries {
  listFloorTemplates(where: FloorFilterInput order: [FloorTemplateSortInput!]): [FloorTemplate!]! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listFloorTemplatesPaginated("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: FloorTemplateFilterInput order: [FloorTemplateSortInput!]): ListFloorTemplatesPaginatedConnection @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  floorTemplate(id: Int!): FloorTemplate @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type FrameworkAgreement {
  externalCode: String!
  notes: String
  id: Int!
}

type FunctionArea {
  name: String!
  internalCode: String!
  surfaceType: SurfaceType!
  id: Int!
}

type FunctionAreaMutations {
  add(input: FunctionAreaInput!): ResultOfFunctionArea! @authorize(roles: [ "211_C" ]) @authorize(roles: [ "OFFICE_B" ])
  addRange(inputs: [FunctionAreaInput!]!): ResultOfFunctionArea__! @authorize(roles: [ "211_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: FunctionAreaInput!): ResultOfFunctionArea! @authorize(roles: [ "211_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "211_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type FunctionAreaQueries {
  proposeNewInternalCode(additionallyOccupiedCodes: [String!]!): String @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentFunctionAreaId: Int): Boolean! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listFunctionAreas("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: FunctionAreaFilterInput order: [FunctionAreaSortInput!]): ListFunctionAreasConnection @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listFunctionAreasFull(where: FunctionAreaFilterInput order: [FunctionAreaSortInput!]): [FunctionArea!]! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: FunctionAreaFilterInput order: [FunctionAreaSortInput!]): FileUrlOutput! @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type GeoJSONLineStringType implements GeoJSONInterface {
  "The \"coordinates\" field is an array of two or more positions."
  coordinates: [Position]
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType!
  "The minimum bounding box around the geometry object"
  bbox: [Float!]!
  "The coordinate reference system integer identifier"
  crs: Int!
}

type GeoJSONMultiLineStringType implements GeoJSONInterface {
  "The \"coordinates\" field is an array of LineString coordinate arrays."
  coordinates: [Position]
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType!
  "The minimum bounding box around the geometry object"
  bbox: [Float!]!
  "The coordinate reference system integer identifier"
  crs: Int!
}

type GeoJSONMultiPointType implements GeoJSONInterface {
  "The \"coordinates\" field is an array of positions."
  coordinates: [Position]
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType!
  "The minimum bounding box around the geometry object"
  bbox: [Float!]!
  "The coordinate reference system integer identifier"
  crs: Int!
}

type GeoJSONMultiPolygonType implements GeoJSONInterface {
  "The \"coordinates\" field is an array of Polygon coordinate arrays."
  coordinates: Coordinates
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType!
  "The minimum bounding box around the geometry object"
  bbox: [Float!]!
  "The coordinate reference system integer identifier"
  crs: Int!
}

type GeoJSONPointType implements GeoJSONInterface {
  "The \"coordinates\" field is a single position."
  coordinates: Position
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType!
  "The minimum bounding box around the geometry object"
  bbox: [Float!]!
  "The coordinate reference system integer identifier"
  crs: Int!
}

type GeoJSONPolygonType implements GeoJSONInterface {
  "The \"coordinates\" field MUST be an array of linear ring coordinate arrays. For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface."
  coordinates: [[Position]]
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType!
  "The minimum bounding box around the geometry object"
  bbox: [Float!]!
  "The coordinate reference system integer identifier"
  crs: Int!
}

type GeocodingQueries {
  position(address: AsstAddressInput!): GeocodingResult @authorize(roles: [ "211_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type GeocodingResult {
  boundingBox: [Float!]!
  position: [Float!]
}

type Group {
  name: String!
  description: String
  creationDate: DateTime!
  features: [GroupFeature!]!
  users: [User!]!
  id: Int!
  permissionSummary: [PermissionSummary!]!
}

type GroupFeature {
  feature: String!
  group: Group!
  groupId: Int!
  canRead: Boolean!
  canCreate: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

"A connection to a list of items."
type GroupedPaymentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [GroupedPaymentsEdge!]
  "A flattened list of the nodes."
  nodes: [AssetTaxGroupedRow!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type GroupedPaymentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AssetTaxGroupedRow!
}

type Holiday {
  name: String!
  date: Date!
  periodicity: HolidayPeriodicity!
  id: Int!
}

type IAMContact {
  contactType: ContactType!
  contactInfo: String
  contactInfoType: ContactInfoType!
  notes: String
  creationDate: DateTime!
  deletionDate: DateTime
  id: Int!
}

type InterestRate {
  rate: Decimal!
  since: Date
  until: Date
  countryISO3: String!
  id: Int!
}

type InterestRateMutations {
  add(input: InterestRateInput!): ResultOfInterestRate! @authorize(roles: [ "321_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: InterestRateInput!): ResultOfInterestRate! @authorize(roles: [ "321_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "321_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "321_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type InterestRateQueries {
  get(id: Int!): InterestRate @authorize(roles: [ "321_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listInterestRates("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: InterestRateFilterInput order: [InterestRateSortInput!]): ListInterestRatesConnection @authorize(roles: [ "321_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: InterestRateFilterInput order: [InterestRateSortInput!]): FileUrlOutput! @authorize(roles: [ "321_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type InterventionType {
  internalCode: String!
  name: String!
  id: Int!
}

type InterventionTypeMutations {
  add(input: InterventionTypeInput!): ResultOfInterventionType! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: InterventionTypeInput!): ResultOfInterventionType! @authorize(roles: [ "830_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type InterventionTypeQueries {
  get(id: Int!): InterventionType @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listInterventionTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: InterventionTypeFilterInput order: [InterventionTypeSortInput!]): ListInterventionTypesConnection @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentInterventionTypeId: Int): Boolean! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: InterventionTypeFilterInput order: [InterventionTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type IssuesAverageResolutionDurationByStatusStatistics {
  newDuration: TimeSpan
  assignedDuration: TimeSpan
  inProgressDuration: TimeSpan
  resolvedDuration: TimeSpan
  completedDuration: TimeSpan
}

type IssuesCountByStatusStatistics {
  newStatusCount: Int!
  assignedStatusCount: Int!
  inProgressStatusCount: Int!
  resolvedStatusCount: Int!
  completedStatusCount: Int!
}

type IssuesExcludedFromMaintenanceContractLineChartDataPoint {
  excludedCount: Int!
  nonExcludedCount: Int!
}

type IssuesExcludedFromMaintenanceContractStatistics {
  excludedPercentage: Float!
  nonExcludedPercentage: Float!
}

type IssuesPercentageByPriorityStatistics {
  minorStatusPercentage: Float!
  normalStatusPercentage: Float!
  majorStatusPercentage: Float!
  criticalStatusPercentage: Float!
}

type IssuesPercentageByStatusStatistics {
  newStatusPercentage: Float!
  assignedStatusPercentage: Float!
  inProgressStatusPercentage: Float!
  resolvedStatusPercentage: Float!
  completedStatusPercentage: Float!
}

type IssuesSLARespectingPercentageStatistics {
  respectingPercentage: Float!
  notRespectingPercentage: Float!
}

type IssuesStatusLineChartDataPoint {
  newCount: Int!
  assignedCount: Int!
  inProgressCount: Int!
  resolvedCount: Int!
  completedCount: Int!
}

type ItaILIAConfiguration implements ITaxConfiguration {
  availableMainTables: [Table!]!
  availableSubTables: [KeyValuePairOfStringAndTable__!]!
}

type ItaIMUConfiguration implements ITaxConfiguration {
  availableMainTables: [Table!]!
  availableSubTables: [KeyValuePairOfStringAndTable__!]!
}

type KeyValuePairOfCostChargeAnalysisCategoryAndCostChargeAnalysis {
  key: CostChargeAnalysisCategory!
  value: CostChargeAnalysis!
}

type KeyValuePairOfEstateMarketValueTypeAndDecimal {
  key: EstateMarketValueType!
  value: Decimal!
}

type KeyValuePairOfInt32AndCostChargeAnalysisValue {
  key: Int!
  value: CostChargeAnalysisValue!
}

type KeyValuePairOfInt32AndCostChargeYearlyAnalysis {
  key: Int!
  value: CostChargeYearlyAnalysis!
}

type KeyValuePairOfStringAndDouble {
  key: String!
  value: Float!
}

type KeyValuePairOfStringAndITaxConfigSubTableRow__ {
  key: String!
  value: [TaxConfigSubTableRow!]!
}

type KeyValuePairOfStringAndString {
  key: String!
  value: String!
}

type KeyValuePairOfStringAndTable__ {
  key: String!
  value: [Table!]!
}

type KeyValuePairOfTicketTypeAndDouble {
  key: TicketType!
  value: Float!
}

type LegalSubject implements ISubject {
  contact(infoType: ContactInfoType!): Contact
  name: String!
  fullName: String!
  shorthandDescription: String
  personType: PersonType!
  baseCountryTaxIdCode: String
  additionalTaxIdCode: String
  baseCountryISO: String
  location: String
  businessStart: Date
  shareCapital: Decimal
  companiesHouseIdCode: String
  additionalGovIdCode: String
  bankingId1: String
  bankingId2: String
  interGroupSignature: String
  legalSubjectType: LegalSubjectType!
  internalCode: String!
  externalSourceCode: String
  customPersonType: Int
  customSubjectStatus: Int
  creationDate: DateTime!
  closureDate: DateTime
  deletionDate: DateTime
  entryStatus: EntryStatus!
  addresses: [Address!]!
  contacts: [Contact!]!
  orgUnits: [OrgUnit!]!
  bankAccounts: [BankAccount!]!
  categories: [SubjectCategory!]!
  relationMains: [SubjectRelation!]!
  relationSubordinates: [SubjectRelation!]!
  taxStatuses: [TaxStatus!]!
  officers: [SubjectRelation!]!
  owningMgmtSubjects: [SubjectRelation!]!
  subOrganizations: [SubjectRelation!]!
  companyGroupParent: SubjectRelation
  heirs: [SubjectRelation!]!
  id: Int!
  documents(where: DocumentFilterInput order: [DocumentSortInput!]): [Document!]!
  canUseDocumentName(name: String!): Boolean!
}

type LineChartDailySeriesOfChecklistTicketsCountLineChartDataPoint {
  date: Date!
  dataPoint: ChecklistTicketsCountLineChartDataPoint!
}

type LineChartDailySeriesOfIssuesExcludedFromMaintenanceContractLineChartDataPoint {
  date: Date!
  dataPoint: IssuesExcludedFromMaintenanceContractLineChartDataPoint!
}

type LineChartDailySeriesOfIssuesStatusLineChartDataPoint {
  date: Date!
  dataPoint: IssuesStatusLineChartDataPoint!
}

type LineChartDailySeriesOfTicketsAmountChartDataPoint {
  date: Date!
  dataPoint: TicketsAmountChartDataPoint!
}

type LineChartDailySeriesOfTicketsTypeLineChartDataPoint {
  date: Date!
  dataPoint: TicketsTypeLineChartDataPoint!
}

type LineChartMonthlySeriesOfChecklistTicketsCountLineChartDataPoint {
  year: Int!
  month: Int!
  dataPoint: ChecklistTicketsCountLineChartDataPoint!
}

type LineChartMonthlySeriesOfIssuesExcludedFromMaintenanceContractLineChartDataPoint {
  year: Int!
  month: Int!
  dataPoint: IssuesExcludedFromMaintenanceContractLineChartDataPoint!
}

type LineChartMonthlySeriesOfIssuesStatusLineChartDataPoint {
  year: Int!
  month: Int!
  dataPoint: IssuesStatusLineChartDataPoint!
}

type LineChartMonthlySeriesOfTicketsAmountChartDataPoint {
  year: Int!
  month: Int!
  dataPoint: TicketsAmountChartDataPoint!
}

type LineChartMonthlySeriesOfTicketsCountLineChartDataPoint {
  year: Int!
  month: Int!
  dataPoint: TicketsCountLineChartDataPoint!
}

type LineChartMonthlySeriesOfTicketsTotalAmountChartDataPoint {
  year: Int!
  month: Int!
  dataPoint: TicketsTotalAmountChartDataPoint!
}

type LineChartMonthlySeriesOfTicketsTypeLineChartDataPoint {
  year: Int!
  month: Int!
  dataPoint: TicketsTypeLineChartDataPoint!
}

type LineChartOfChecklistTicketsCountLineChartDataPoint {
  daily: [LineChartDailySeriesOfChecklistTicketsCountLineChartDataPoint!]
  weekly: [LineChartWeeklySeriesOfChecklistTicketsCountLineChartDataPoint!]
  monthly: [LineChartMonthlySeriesOfChecklistTicketsCountLineChartDataPoint!]
}

type LineChartOfIssuesExcludedFromMaintenanceContractLineChartDataPoint {
  daily: [LineChartDailySeriesOfIssuesExcludedFromMaintenanceContractLineChartDataPoint!]
  weekly: [LineChartWeeklySeriesOfIssuesExcludedFromMaintenanceContractLineChartDataPoint!]
  monthly: [LineChartMonthlySeriesOfIssuesExcludedFromMaintenanceContractLineChartDataPoint!]
}

type LineChartOfIssuesStatusLineChartDataPoint {
  daily: [LineChartDailySeriesOfIssuesStatusLineChartDataPoint!]
  weekly: [LineChartWeeklySeriesOfIssuesStatusLineChartDataPoint!]
  monthly: [LineChartMonthlySeriesOfIssuesStatusLineChartDataPoint!]
}

type LineChartOfTicketsAmountChartDataPoint {
  daily: [LineChartDailySeriesOfTicketsAmountChartDataPoint!]
  weekly: [LineChartWeeklySeriesOfTicketsAmountChartDataPoint!]
  monthly: [LineChartMonthlySeriesOfTicketsAmountChartDataPoint!]
}

type LineChartOfTicketsTypeLineChartDataPoint {
  daily: [LineChartDailySeriesOfTicketsTypeLineChartDataPoint!]
  weekly: [LineChartWeeklySeriesOfTicketsTypeLineChartDataPoint!]
  monthly: [LineChartMonthlySeriesOfTicketsTypeLineChartDataPoint!]
}

type LineChartWeeklySeriesOfChecklistTicketsCountLineChartDataPoint {
  year: Int!
  week: Int!
  weekStartDate: Date!
  weekEndDate: Date!
  dataPoint: ChecklistTicketsCountLineChartDataPoint!
}

type LineChartWeeklySeriesOfIssuesExcludedFromMaintenanceContractLineChartDataPoint {
  year: Int!
  week: Int!
  weekStartDate: Date!
  weekEndDate: Date!
  dataPoint: IssuesExcludedFromMaintenanceContractLineChartDataPoint!
}

type LineChartWeeklySeriesOfIssuesStatusLineChartDataPoint {
  year: Int!
  week: Int!
  weekStartDate: Date!
  weekEndDate: Date!
  dataPoint: IssuesStatusLineChartDataPoint!
}

type LineChartWeeklySeriesOfTicketsAmountChartDataPoint {
  year: Int!
  week: Int!
  weekStartDate: Date!
  weekEndDate: Date!
  dataPoint: TicketsAmountChartDataPoint!
}

type LineChartWeeklySeriesOfTicketsTypeLineChartDataPoint {
  year: Int!
  week: Int!
  weekStartDate: Date!
  weekEndDate: Date!
  dataPoint: TicketsTypeLineChartDataPoint!
}

"A connection to a list of items."
type ListAccountingTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListAccountingTypesEdge!]
  "A flattened list of the nodes."
  nodes: [AccountingItem!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListAccountingTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AccountingItem!
}

"A connection to a list of items."
type ListAdministrationTermsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListAdministrationTermsEdge!]
  "A flattened list of the nodes."
  nodes: [AdministrationTerm!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListAdministrationTermsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AdministrationTerm!
}

"A connection to a list of items."
type ListAdministrationsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListAdministrationsEdge!]
  "A flattened list of the nodes."
  nodes: [Administration!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListAdministrationsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Administration!
}

"A connection to a list of items."
type ListAnomaliesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListAnomaliesEdge!]
  "A flattened list of the nodes."
  nodes: [RegistryCommunicationAnomalyOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListAnomaliesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistryCommunicationAnomalyOutput!
}

"A connection to a list of items."
type ListAuditEventsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListAuditEventsEdge!]
  "A flattened list of the nodes."
  nodes: [AuditLog!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListAuditEventsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AuditLog!
}

"A connection to a list of items."
type ListAvailableProviderSubjectsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListAvailableProviderSubjectsEdge!]
  "A flattened list of the nodes."
  nodes: [ISubject!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListAvailableProviderSubjectsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ISubject!
}

"A connection to a list of items."
type ListBillItemTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListBillItemTypesEdge!]
  "A flattened list of the nodes."
  nodes: [BillItemType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListBillItemTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BillItemType!
}

"A connection to a list of items."
type ListBillsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListBillsEdge!]
  "A flattened list of the nodes."
  nodes: [Bill!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListBillsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Bill!
}

"A connection to a list of items."
type ListCadastralCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCadastralCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [CadastralCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCadastralCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CadastralCategory!
}

"A connection to a list of items."
type ListCadastralUnitsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCadastralUnitsEdge!]
  "A flattened list of the nodes."
  nodes: [CadastralUnit!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCadastralUnitsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CadastralUnit!
}

"A connection to a list of items."
type ListCalendarsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCalendarsEdge!]
  "A flattened list of the nodes."
  nodes: [Calendar!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCalendarsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Calendar!
}

"A connection to a list of items."
type ListCatalogueCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCatalogueCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [CatalogueCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCatalogueCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CatalogueCategory!
}

"A connection to a list of items."
type ListCatalogueItemsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCatalogueItemsEdge!]
  "A flattened list of the nodes."
  nodes: [CatalogueItem!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCatalogueItemsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CatalogueItem!
}

"A connection to a list of items."
type ListCatalogueSubCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCatalogueSubCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [CatalogueSubCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCatalogueSubCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CatalogueSubCategory!
}

"A connection to a list of items."
type ListCatalogueTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCatalogueTypesEdge!]
  "A flattened list of the nodes."
  nodes: [CatalogueType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCatalogueTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CatalogueType!
}

"A connection to a list of items."
type ListCataloguesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCataloguesEdge!]
  "A flattened list of the nodes."
  nodes: [CatalogueOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCataloguesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CatalogueOutput!
}

"A connection to a list of items."
type ListCitiesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCitiesEdge!]
  "A flattened list of the nodes."
  nodes: [City!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCitiesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: City!
}

"A connection to a list of items."
type ListContractTemplatesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListContractTemplatesEdge!]
  "A flattened list of the nodes."
  nodes: [ContractTemplate!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListContractTemplatesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ContractTemplate!
}

"A connection to a list of items."
type ListContractTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListContractTypesEdge!]
  "A flattened list of the nodes."
  nodes: [ContractType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListContractTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ContractType!
}

"A connection to a list of items."
type ListContractsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListContractsEdge!]
  "A flattened list of the nodes."
  nodes: [ContractListOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListContractsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ContractListOutput!
}

"A connection to a list of items."
type ListCostChargesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCostChargesEdge!]
  "A flattened list of the nodes."
  nodes: [CostCharge!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCostChargesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CostCharge!
}

"A connection to a list of items."
type ListCraftsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListCraftsEdge!]
  "A flattened list of the nodes."
  nodes: [Craft!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListCraftsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Craft!
}

"A connection to a list of items."
type ListEstateMainUsageTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListEstateMainUsageTypesEdge!]
  "A flattened list of the nodes."
  nodes: [EstateMainUsageType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListEstateMainUsageTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EstateMainUsageType!
}

"A connection to a list of items."
type ListEstateSubUnitConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListEstateSubUnitEdge!]
  "A flattened list of the nodes."
  nodes: [EstateSubUnit!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListEstateSubUnitEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EstateSubUnit!
}

"A connection to a list of items."
type ListEstateUnitGroupsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListEstateUnitGroupsEdge!]
  "A flattened list of the nodes."
  nodes: [EstateUnitGroup!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListEstateUnitGroupsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EstateUnitGroup!
}

"A connection to a list of items."
type ListEstateUnitsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListEstateUnitsEdge!]
  "A flattened list of the nodes."
  nodes: [EstateUnit!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListEstateUnitsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EstateUnit!
}

"A connection to a list of items."
type ListEstateUsageTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListEstateUsageTypesEdge!]
  "A flattened list of the nodes."
  nodes: [EstateUsageType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListEstateUsageTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EstateUsageType!
}

"A connection to a list of items."
type ListEstatesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListEstatesEdge!]
  "A flattened list of the nodes."
  nodes: [Estate!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListEstatesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Estate!
}

"A connection to a list of items."
type ListFcltContractTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListFcltContractTypesEdge!]
  "A flattened list of the nodes."
  nodes: [FcltContractType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListFcltContractTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FcltContractType!
}

"A connection to a list of items."
type ListFcltContractsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListFcltContractsEdge!]
  "A flattened list of the nodes."
  nodes: [FcltContract!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListFcltContractsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FcltContract!
}

"A connection to a list of items."
type ListFloorTemplatesPaginatedConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListFloorTemplatesPaginatedEdge!]
  "A flattened list of the nodes."
  nodes: [FloorTemplate!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListFloorTemplatesPaginatedEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FloorTemplate!
}

"A connection to a list of items."
type ListFunctionAreasConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListFunctionAreasEdge!]
  "A flattened list of the nodes."
  nodes: [FunctionArea!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListFunctionAreasEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FunctionArea!
}

"A connection to a list of items."
type ListGroupConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListGroupEdge!]
  "A flattened list of the nodes."
  nodes: [Group!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListGroupEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Group!
}

"A connection to a list of items."
type ListGroupedOperationsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListGroupedOperationsEdge!]
  "A flattened list of the nodes."
  nodes: [OperationGroupOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListGroupedOperationsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OperationGroupOutput!
}

"A connection to a list of items."
type ListInterestRatesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListInterestRatesEdge!]
  "A flattened list of the nodes."
  nodes: [InterestRate!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListInterestRatesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InterestRate!
}

"A connection to a list of items."
type ListInterventionTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListInterventionTypesEdge!]
  "A flattened list of the nodes."
  nodes: [InterventionType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListInterventionTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InterventionType!
}

"A connection to a list of items."
type ListNotificationsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListNotificationsEdge!]
  "A flattened list of the nodes."
  nodes: [Notification!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListNotificationsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Notification!
}

"A connection to a list of items."
type ListOrgUnitsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListOrgUnitsEdge!]
  "A flattened list of the nodes."
  nodes: [OrgUnit!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListOrgUnitsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OrgUnit!
}

"A connection to a list of items."
type ListPenaltiesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListPenaltiesEdge!]
  "A flattened list of the nodes."
  nodes: [Penalty!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListPenaltiesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Penalty!
}

"A connection to a list of items."
type ListPriceListArticlesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListPriceListArticlesEdge!]
  "A flattened list of the nodes."
  nodes: [PriceListArticle!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListPriceListArticlesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PriceListArticle!
}

"A connection to a list of items."
type ListPriceListMeasurementUnitsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListPriceListMeasurementUnitsEdge!]
  "A flattened list of the nodes."
  nodes: [PriceListMeasurementUnit!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListPriceListMeasurementUnitsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PriceListMeasurementUnit!
}

"A connection to a list of items."
type ListPriceListsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListPriceListsEdge!]
  "A flattened list of the nodes."
  nodes: [PriceList!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListPriceListsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PriceList!
}

"A connection to a list of items."
type ListQualificationLevelsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListQualificationLevelsEdge!]
  "A flattened list of the nodes."
  nodes: [QualificationLevel!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListQualificationLevelsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: QualificationLevel!
}

"A connection to a list of items."
type ListReadingsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListReadingsEdge!]
  "A flattened list of the nodes."
  nodes: [Reading!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListReadingsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Reading!
}

"A connection to a list of items."
type ListRegistrationOfficesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListRegistrationOfficesEdge!]
  "A flattened list of the nodes."
  nodes: [RegistrationOffice!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListRegistrationOfficesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistrationOffice!
}

"A connection to a list of items."
type ListRegistrationPaymentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListRegistrationPaymentsEdge!]
  "A flattened list of the nodes."
  nodes: [RegistrationPayment!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListRegistrationPaymentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistrationPayment!
}

"A connection to a list of items."
type ListRegistryCommunicationGroupsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListRegistryCommunicationGroupsEdge!]
  "A flattened list of the nodes."
  nodes: [RegistryCommunicationGroup!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListRegistryCommunicationGroupsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistryCommunicationGroup!
}

"A connection to a list of items."
type ListRegistryCommunicationsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListRegistryCommunicationsEdge!]
  "A flattened list of the nodes."
  nodes: [RegistryCommunication!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListRegistryCommunicationsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistryCommunication!
}

"A connection to a list of items."
type ListRevaluationDataConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListRevaluationDataEdge!]
  "A flattened list of the nodes."
  nodes: [RevaluationData!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListRevaluationDataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RevaluationData!
}

"A connection to a list of items."
type ListSLAsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListSLAsEdge!]
  "A flattened list of the nodes."
  nodes: [SLA!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListSLAsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SLA!
}

"A connection to a list of items."
type ListServiceActivityConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListServiceActivityEdge!]
  "A flattened list of the nodes."
  nodes: [ServiceActivity!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListServiceActivityEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ServiceActivity!
}

"A connection to a list of items."
type ListServiceCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListServiceCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [ServiceCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListServiceCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ServiceCategory!
}

"A connection to a list of items."
type ListServiceSubCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListServiceSubCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [ServiceSubCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListServiceSubCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ServiceSubCategory!
}

"A connection to a list of items."
type ListServicesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListServicesEdge!]
  "A flattened list of the nodes."
  nodes: [Service!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListServicesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Service!
}

"A connection to a list of items."
type ListSubTableValueConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListSubTableValueEdge!]
  "A flattened list of the nodes."
  nodes: [TaxConfigSubTableRow!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListSubTableValueEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TaxConfigSubTableRow!
}

"A connection to a list of items."
type ListSubjectCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListSubjectCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [SubjectCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListSubjectCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SubjectCategory!
}

"A connection to a list of items."
type ListSubjectsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListSubjectsEdge!]
  "A flattened list of the nodes."
  nodes: [ISubject!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListSubjectsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ISubject!
}

"A connection to a list of items."
type ListTableValuesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTableValuesEdge!]
  "A flattened list of the nodes."
  nodes: [TaxConfigMainTableRow!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTableValuesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TaxConfigMainTableRow!
}

"A connection to a list of items."
type ListTaxCreditsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTaxCreditsEdge!]
  "A flattened list of the nodes."
  nodes: [TaxCredit!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTaxCreditsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TaxCredit!
}

"A connection to a list of items."
type ListTicketChecklistTemplatesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTicketChecklistTemplatesEdge!]
  "A flattened list of the nodes."
  nodes: [TicketChecklistTemplate!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTicketChecklistTemplatesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TicketChecklistTemplate!
}

"A connection to a list of items."
type ListTicketChecklistsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTicketChecklistsEdge!]
  "A flattened list of the nodes."
  nodes: [TicketChecklist!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTicketChecklistsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TicketChecklist!
}

"A connection to a list of items."
type ListTicketChecklistsPerEstateUnitsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTicketChecklistsPerEstateUnitsEdge!]
  "A flattened list of the nodes."
  nodes: [TicketChecklistsPerEstateUnit!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTicketChecklistsPerEstateUnitsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TicketChecklistsPerEstateUnit!
}

"A connection to a list of items."
type ListTicketTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTicketTypesEdge!]
  "A flattened list of the nodes."
  nodes: [TicketType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTicketTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TicketType!
}

"A connection to a list of items."
type ListTicketsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTicketsEdge!]
  "A flattened list of the nodes."
  nodes: [Ticket!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTicketsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Ticket!
}

"A connection to a list of items."
type ListTicketsPerEstateUnitsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTicketsPerEstateUnitsEdge!]
  "A flattened list of the nodes."
  nodes: [TicketsPerEstateUnit!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTicketsPerEstateUnitsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TicketsPerEstateUnit!
}

"A connection to a list of items."
type ListTicketsPerEstateUnitsPerYearsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListTicketsPerEstateUnitsPerYearsEdge!]
  "A flattened list of the nodes."
  nodes: [TicketsPerEstateUnitsPerYear!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListTicketsPerEstateUnitsPerYearsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TicketsPerEstateUnitsPerYear!
}

"A connection to a list of items."
type ListUsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListUsersEdge!]
  "A flattened list of the nodes."
  nodes: [User!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListUsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User!
}

"A connection to a list of items."
type ListUtilityServicesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListUtilityServicesEdge!]
  "A flattened list of the nodes."
  nodes: [UtilityService!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListUtilityServicesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UtilityService!
}

"A connection to a list of items."
type ListUtilityTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListUtilityTypeEdge!]
  "A flattened list of the nodes."
  nodes: [UtilityType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListUtilityTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UtilityType!
}

"A connection to a list of items."
type ListVATRatesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListVATRatesEdge!]
  "A flattened list of the nodes."
  nodes: [VATRate!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListVATRatesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: VATRate!
}

"A connection to a list of items."
type ListWorkTeamsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListWorkTeamsEdge!]
  "A flattened list of the nodes."
  nodes: [WorkTeam!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListWorkTeamsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: WorkTeam!
}

type LocatedUnit {
  estateSubUnitId: Int
  estateUnitId: Int!
  isMainUnit: Boolean!
  isRegistryUpdateEnabled: Boolean!
  isPartialLocation: Boolean!
  surfaceSqM: Int
  id: Int!
  estateUnit: EstateUnit!
  estateSubUnit: EstateSubUnit
}

type LoginResult {
  user: UserModel!
  jwt: String!
  refreshToken: String
}

type ManagementSubject implements ISubject {
  contact(infoType: ContactInfoType!): Contact
  name: String!
  fullName: String!
  shorthandDescription: String
  personType: PersonType!
  managementCode: String
  baseCountryTaxIdCode: String
  additionalTaxIdCode: String
  baseCountryISO: String
  location: String
  businessStart: Date
  shareCapital: Decimal
  companiesHouseIdCode: String
  additionalGovIdCode: String
  interGroupSignature: String
  bankingId1: String
  bankingId2: String
  internalCode: String!
  externalSourceCode: String
  customPersonType: Int
  customSubjectStatus: Int
  creationDate: DateTime!
  closureDate: DateTime
  deletionDate: DateTime
  entryStatus: EntryStatus!
  addresses: [Address!]!
  contacts: [Contact!]!
  orgUnits: [OrgUnit!]!
  bankAccounts: [BankAccount!]!
  categories: [SubjectCategory!]!
  relationMains: [SubjectRelation!]!
  relationSubordinates: [SubjectRelation!]!
  taxStatuses: [TaxStatus!]!
  officers: [SubjectRelation!]!
  owningMgmtSubjects: [SubjectRelation!]!
  subOrganizations: [SubjectRelation!]!
  companyGroupParent: SubjectRelation
  heirs: [SubjectRelation!]!
  id: Int!
  documents(where: DocumentFilterInput order: [DocumentSortInput!]): [Document!]!
  canUseDocumentName(name: String!): Boolean!
}

type MandatoryByLawChecklistTicketsStatusStatistics {
  donePercentage: Float!
  expiredPercentage: Float!
  scheduledPercentage: Float!
}

type MasterStatusUpdatedQuoteHistoryEntry implements QuoteHistoryEntry {
  oldMasterStatus: QuoteMasterStatus
  newMasterStatus: QuoteMasterStatus!
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type MasterStatusUpdatedTicketHistoryEntry implements TicketHistoryEntry {
  oldMasterStatus: TicketMasterStatus
  newMasterStatus: TicketMasterStatus!
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type Mutation @authorize {
  login: UserLoginMutations! @allowAnonymous
  user: UserMutations!
  subject: SubjectMutations!
  orgUnit: OrgUnitMutations!
  estate: EstateMutations!
  floorTemplate: FloorTemplateMutations!
  estateSubUnit: EstateSubUnitMutations!
  estateUnit: EstateUnitMutations!
  cadastralUnit: CadastralUnitMutations!
  functionArea: FunctionAreaMutations!
  catalogueCategory: CatalogueCategoryMutations!
  catalogueType: CatalogueTypeMutations!
  catalogueItem: CatalogueItemMutations!
  catalogue: CatalogueMutations!
  estateUsageType: EstateUsageTypeMutations!
  estateMainUsageType: EstateMainUsageTypeMutations!
  cadastralLandCategory: CadastralLandCategoryMutations!
  assetTax: AssetTaxMutations!
  contractType: ContractTypeMutations!
  registrationOffice: RegistrationOfficeMutations!
  contract: ContractMutations!
  activeContract: ActiveContractMutations!
  passiveContract: PassiveContractMutations!
  bill: BillMutations!
  administration: AdministrationMutations!
  administrationTerm: AdministrationTermMutations!
  registryCommunication: RegistryCommunicationMutations!
  temporaryRegistryCommunication: TemporaryRegistryCommunicationMutations!
  confirmedRegistryCommunication: ConfirmedRegistryCommunicationMutations!
  registrationPayment: RegistrationPaymentMutations!
  admin: AdminMutations!
  city: CityMutations!
  vatRate: VATRateMutations!
  interestRate: InterestRateMutations!
  accountingItem: AccountingItemMutations!
  billItemType: BillItemTypeMutations!
  notification: NotificationMutations!
  taxConfiguration: TaxConfigMutations!
  reportGenerator: ReportGeneratorMutations!
  utilityType: UtilityTypeMutations!
  utilityService: UtilityServiceMutations!
  reading: ReadingMutations!
  costCharge: CostChargeMutations!
  taxCredit: TaxCreditMutations!
  estateUnitGroup: EstateUnitGroupMutations!
  fcltContractType: FcltContractTypeMutations!
  fcltContract: FcltContractMutations!
  contractTemplate: ContractTemplateMutations!
  sla: SLAMutations!
  craft: CraftMutations!
  interventionType: InterventionTypeMutations!
  ticketType: TicketTypeMutations!
  qualificationLevel: QualificationLevelMutations!
  workTeam: WorkTeamMutations!
  calendar: CalendarMutations!
  penalty: PenaltyMutations!
  ticketChecklistTemplate: TicketChecklistTemplateMutations!
  priceListMeasurementUnit: PriceListMeasurementUnitMutations!
  priceList: PriceListMutations!
  priceListArticle: PriceListArticleMutations!
  ticket: TicketMutations!
  ticketChecklist: TicketChecklistMutations!
  service: ServiceMutations!
  serviceCategory: ServiceCategoryMutations!
}

type NewReminderTicketHistoryEntry implements TicketHistoryEntry {
  reminderDate: Date!
  reminderSummary: String!
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type NewReplyTicketHistoryEntry implements TicketHistoryEntry {
  reply: Reply!
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type NotificationMutations {
  markNewAsUnread(ids: [Int!]): Result!
  markAsRead(ids: [Int!]): Result!
  delete(id: Int!): Result!
  deleteRange(ids: [Int!]!): Result!
}

type NotificationQueries {
  listNotifications("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: NotificationFilterInput order: [NotificationSortInput!]): ListNotificationsConnection
  listNotificationsFull(where: NotificationFilterInput order: [NotificationSortInput!]): [Notification!]!
  lastNotifications: [Notification!]!
}

type OfficialAct {
  description: String
  creationDate: DateTime!
  protocolNumber: String!
  externalCode: String
  registrationNumber: String
  issuerName: String
  issuerCode: String
  issuerExternalCode: String
  issueDate: Date
  registrationDate: Date
  estateUnitId: Int
  actRegistrationFields: [ActRegistrationField!]!
  actRegistrationDates: [ActRegistrationDate!]!
  id: Int!
}

type OneshotAddition {
  billItemType: BillItemType!
  startDate: Date!
  accountingItemId: Int!
  vatRateId: Int!
  isRentalRateVariation: Boolean!
  amount: Decimal!
  installments: Int
  isBoundToTermDay: Boolean!
  termStartDate: Date
  termEndDate: Date
  notes: String
  registrationPayment: RegistrationPayment
  id: Int!
  vatRate: VATRate!
  accountingItem: AccountingItem!
}

type Operation {
  date: Date!
  amount: Decimal!
  assetTaxPaymentId: Int
  notes: String
  since: Date
  until: Date
  id: Int!
}

type OperationGroupOutput {
  ids: [Int!]!
  date: Date!
  amount: Decimal!
  notes: String
}

type OrgUnit {
  orgUnitType: OrgUnitType!
  name: String
  internalCode: String!
  externalCode: String
  notes: String
  entryStatus: EntryStatus!
  influenceArea: GeoJSONPolygonType
  creationDate: DateTime!
  deletionDate: DateTime
  closureDate: DateTime
  children: [OrgUnit!]!
  contacts: [Contact!]!
  geographicalCities: [Int!]
  parentOrgUnitId: Int
  parentOrgUnit: OrgUnit
  parentSubjectId: Int!
  parentSubject: ISubject!
  id: Int!
  cities: [City!]!
}

type OrgUnitMutations {
  addManagementOrgUnit(orgUnitInput: ManagementOrgUnitInput!): ResultOfOrgUnit! @authorize(roles: [ "126_C" ]) @authorize(roles: [ "OFFICE_B" ])
  addGeographicalOrgUnit(orgUnitInput: GeographicalOrgUnitInput!): ResultOfOrgUnit! @authorize(roles: [ "126_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateManagementOrgUnit(orgUnitInput: ManagementOrgUnitInput!): ResultOfOrgUnit! @authorize(roles: [ "126_U" ]) @authorize(roles: [ "OFFICE_B" ])
  updateGeographicalOrgUnit(orgUnitInput: GeographicalOrgUnitInput!): ResultOfOrgUnit! @authorize(roles: [ "126_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(orgUnitId: Int!): Result! @authorize(roles: [ "126_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type OrgUnitQueries {
  orgUnit(orgUnitId: Int!): OrgUnit @authorize(roles: [ "126_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listOrgUnitsTree(orgUnitType: OrgUnitType!): [OrgUnitTreeNode!]! @authorize(roles: [ "126_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listOrgUnits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: OrgUnitFilterInput order: [OrgUnitSortInput!]): ListOrgUnitsConnection @authorize(roles: [ "126_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listOrgUnitsByManagementSubject(managementSubjectIds: [Int!]! excludeChildrenOfId: Int where: OrgUnitFilterInput order: [OrgUnitSortInput!]): [OrgUnit!]! @authorize(roles: [ "126_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listOrgUnitsFull(where: OrgUnitFilterInput order: [OrgUnitSortInput!]): [OrgUnit!]! @authorize(roles: [ "126_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "126_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentOrgUnitId: Int): Boolean! @authorize(roles: [ "126_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type OrgUnitTreeNode {
  id: Int!
  name: String
  isSubject: Boolean!
  children: [OrgUnitTreeNode!]
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type PagedInfo {
  setPageNumber(pageNumber: Long!): PagedInfo
  setPageSize(pageSize: Long!): PagedInfo
  setTotalPages(totalPages: Long!): PagedInfo
  setTotalRecords(totalRecords: Long!): PagedInfo
  pageNumber: Long!
  pageSize: Long!
  totalPages: Long!
  totalRecords: Long!
}

type PagedResultOfAccountingItem {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfAccountingItem
  pagedInfo: PagedInfo
  value: AccountingItem
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfAdministration {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfAdministration
  pagedInfo: PagedInfo
  value: Administration
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfAdministrationTerm {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfAdministrationTerm
  pagedInfo: PagedInfo
  value: AdministrationTerm
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfAdministration__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfAdministration__
  pagedInfo: PagedInfo
  value: [Administration]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfBill {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfBill
  pagedInfo: PagedInfo
  value: Bill
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfBillItemType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfBillItemType
  pagedInfo: PagedInfo
  value: BillItemType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfBillingPause {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfBillingPause
  pagedInfo: PagedInfo
  value: BillingPause
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCadastralLandCategory {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCadastralLandCategory
  pagedInfo: PagedInfo
  value: CadastralLandCategory
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCadastralUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCadastralUnit
  pagedInfo: PagedInfo
  value: CadastralUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCalendar {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCalendar
  pagedInfo: PagedInfo
  value: Calendar
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCatalogueCategory {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCatalogueCategory
  pagedInfo: PagedInfo
  value: CatalogueCategory
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCatalogueItem {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCatalogueItem
  pagedInfo: PagedInfo
  value: CatalogueItem
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCatalogueItem__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCatalogueItem__
  pagedInfo: PagedInfo
  value: [CatalogueItem]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCatalogueType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCatalogueType
  pagedInfo: PagedInfo
  value: CatalogueType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCity {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCity
  pagedInfo: PagedInfo
  value: City
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfConfig {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfConfig
  pagedInfo: PagedInfo
  value: Config
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfContract {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfContract
  pagedInfo: PagedInfo
  value: Contract
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfContractTemplate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfContractTemplate
  pagedInfo: PagedInfo
  value: ContractTemplate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfContractType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfContractType
  pagedInfo: PagedInfo
  value: ContractType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCostCharge {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCostCharge
  pagedInfo: PagedInfo
  value: CostCharge
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfCraft {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCraft
  pagedInfo: PagedInfo
  value: Craft
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfDocument {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfDocument
  pagedInfo: PagedInfo
  value: Document
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfDocument__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfDocument__
  pagedInfo: PagedInfo
  value: [Document]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfEstate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstate
  pagedInfo: PagedInfo
  value: Estate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfEstateMainUsageType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateMainUsageType
  pagedInfo: PagedInfo
  value: EstateMainUsageType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfEstateSubUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateSubUnit
  pagedInfo: PagedInfo
  value: EstateSubUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfEstateUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateUnit
  pagedInfo: PagedInfo
  value: EstateUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfEstateUnitGroup {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateUnitGroup
  pagedInfo: PagedInfo
  value: EstateUnitGroup
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfEstateUnit__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateUnit__
  pagedInfo: PagedInfo
  value: [EstateUnit]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfEstateUsageType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateUsageType
  pagedInfo: PagedInfo
  value: EstateUsageType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfFcltContract {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFcltContract
  pagedInfo: PagedInfo
  value: FcltContract
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfFcltContractType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFcltContractType
  pagedInfo: PagedInfo
  value: FcltContractType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfFileUrlOutput {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFileUrlOutput
  pagedInfo: PagedInfo
  value: FileUrlOutput
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfFloorTemplate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFloorTemplate
  pagedInfo: PagedInfo
  value: FloorTemplate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfFunctionArea {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFunctionArea
  pagedInfo: PagedInfo
  value: FunctionArea
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfFunctionArea__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFunctionArea__
  pagedInfo: PagedInfo
  value: [FunctionArea]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfGroup {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfGroup
  pagedInfo: PagedInfo
  value: Group
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfIEnumerableOfAssetTaxCalculation {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfAssetTaxCalculation
  pagedInfo: PagedInfo
  value: [AssetTaxCalculation]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfIEnumerableOfAssetTaxPayment {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfAssetTaxPayment
  pagedInfo: PagedInfo
  value: [AssetTaxPayment]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfIEnumerableOfFileUrlOutput {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfFileUrlOutput
  pagedInfo: PagedInfo
  value: [FileUrlOutput]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfIEnumerableOfTicket {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfTicket
  pagedInfo: PagedInfo
  value: [Ticket]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfIEnumerableOfTicketChecklist {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfTicketChecklist
  pagedInfo: PagedInfo
  value: [TicketChecklist]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfIReadOnlyDictionaryOfEstateMarketValueTypeAndDecimal {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIReadOnlyDictionaryOfEstateMarketValueTypeAndDecimal
  pagedInfo: PagedInfo
  value: [KeyValuePairOfEstateMarketValueTypeAndDecimal!]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfInt32 {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfInt32
  pagedInfo: PagedInfo
  value: Int!
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfInterestRate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfInterestRate
  pagedInfo: PagedInfo
  value: InterestRate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfInterventionType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfInterventionType
  pagedInfo: PagedInfo
  value: InterventionType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfLegalSubject {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfLegalSubject
  pagedInfo: PagedInfo
  value: LegalSubject
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfListOfFloorTemplate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfListOfFloorTemplate
  pagedInfo: PagedInfo
  value: [FloorTemplate]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfManagementSubject {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfManagementSubject
  pagedInfo: PagedInfo
  value: ManagementSubject
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfOperation {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfOperation
  pagedInfo: PagedInfo
  value: Operation
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfOrgUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfOrgUnit
  pagedInfo: PagedInfo
  value: OrgUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfPenalty {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPenalty
  pagedInfo: PagedInfo
  value: Penalty
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfPenalty__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPenalty__
  pagedInfo: PagedInfo
  value: [Penalty]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfPhysicalSubject {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPhysicalSubject
  pagedInfo: PagedInfo
  value: PhysicalSubject
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfPriceList {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPriceList
  pagedInfo: PagedInfo
  value: PriceList
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfPriceListArticle {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPriceListArticle
  pagedInfo: PagedInfo
  value: PriceListArticle
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfPriceListMeasurementUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPriceListMeasurementUnit
  pagedInfo: PagedInfo
  value: PriceListMeasurementUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfQualificationLevel {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfQualificationLevel
  pagedInfo: PagedInfo
  value: QualificationLevel
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfReading {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfReading
  pagedInfo: PagedInfo
  value: Reading
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfRegistrationOffice {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfRegistrationOffice
  pagedInfo: PagedInfo
  value: RegistrationOffice
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfRegistrationPayment {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfRegistrationPayment
  pagedInfo: PagedInfo
  value: RegistrationPayment
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfResult {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfResult
  pagedInfo: PagedInfo
  value: Result
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfSLA {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfSLA
  pagedInfo: PagedInfo
  value: SLA
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfSLA__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfSLA__
  pagedInfo: PagedInfo
  value: [SLA]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfService {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfService
  pagedInfo: PagedInfo
  value: Service
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfServiceCategory {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfServiceCategory
  pagedInfo: PagedInfo
  value: ServiceCategory
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfTaxCredit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTaxCredit
  pagedInfo: PagedInfo
  value: TaxCredit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfTicket {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTicket
  pagedInfo: PagedInfo
  value: Ticket
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfTicketChecklist {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTicketChecklist
  pagedInfo: PagedInfo
  value: TicketChecklist
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfTicketChecklistTemplate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTicketChecklistTemplate
  pagedInfo: PagedInfo
  value: TicketChecklistTemplate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfTicketType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTicketType
  pagedInfo: PagedInfo
  value: TicketType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfUser {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfUser
  pagedInfo: PagedInfo
  value: User
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfUtilityService {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfUtilityService
  pagedInfo: PagedInfo
  value: UtilityService
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfUtilityType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfUtilityType
  pagedInfo: PagedInfo
  value: UtilityType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfVATRate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfVATRate
  pagedInfo: PagedInfo
  value: VATRate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfWorkTeam {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfWorkTeam
  pagedInfo: PagedInfo
  value: WorkTeam
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PassiveContractMutations {
  takeoverTenants(contractId: Int! legalRepresentativeSubjectId: Int! paymentDate: Date! successorIds: [Int!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  addLandlords(contractId: Int! updatedCounterpartInputs: [ContractVariationUpdatedCounterpartInput!]! newCounterpartInputs: [ContractVariationNewCounterpartInput!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  transferLandlords(contractId: Int! transferDate: Date! updatedCounterpartInputs: [ContractNoDateUpdateCounterpartInput!]! newCounterpartInputs: [ContractNoDateNewCounterpartInput!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  takeoverLandlords(contractId: Int! takeoverDate: Date! takeoverType: TakeoverType! updatedCounterpartInputs: [ContractNoDateUpdateCounterpartInput!]! newCounterpartInputs: [ContractNoDateNewCounterpartInput!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
  takeoverDeadLandlord(contractId: Int! deadCounterpartId: Int! heirInputs: [ContractDeathVariationNewCounterpartInput!]! updatedCounterpartInputs: [ContractVariationUpdatedCounterpartInput!]!): Result! @authorize(roles: [ "501_U" ]) @authorize(roles: [ "OFFICE_B" ])
}

type PasswordExpirationNotification implements Notification {
  passwordExpirationDate: DateTime!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type Penalty {
  internalCode: String!
  description: String!
  ifCondition: ComplexTicketCondition!
  thenOperator: BooleanOperator!
  thenPenalties: [PenaltyValue!]!
  contract: FcltContract
  id: Int!
  flatIfConditions: [TicketCondition!]!
}

type PenaltyMutations {
  addRange(inputs: [PenaltyInput!]!): ResultOfPenalty__! @authorize(roles: [ "840_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: PenaltyInput!): ResultOfPenalty! @authorize(roles: [ "840_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "840_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "840_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type PenaltyQueries {
  get(id: Int!): Penalty @authorize(roles: [ "840_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listPenaltiesFull(where: PenaltyFilterInput order: [PenaltySortInput!]): [Penalty!]! @authorize(roles: [ "840_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listPenalties("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PenaltyFilterInput order: [PenaltySortInput!]): ListPenaltiesConnection @authorize(roles: [ "840_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode(additionallyOccupiedCodes: [String!]! contractInternalCode: String): String @authorize(roles: [ "840_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentPenaltyId: Int): Boolean! @authorize(roles: [ "840_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: PenaltyFilterInput order: [PenaltySortInput!]): FileUrlOutput! @authorize(roles: [ "840_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type PenaltyValue {
  type: PenaltyType!
  amount: Decimal!
  id: Int!
}

type PerformedActivity {
  name: String!
  ordering: Int!
  status: PerformedActivityStatus!
  isMandatoryByLaw: Boolean!
  id: Int!
}

type PermissionSummary {
  feature: String!
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

type PhysicalSubject implements ISubject {
  contact(infoType: ContactInfoType!): Contact
  name: String!
  personType: PersonType!
  customGender: Int
  firstName: String
  lastName: String
  birthSex: BirthSex
  birthCountryTaxIdCode: String
  professionalTaxIdCode: String
  birthDate: Date
  deathDate: Date
  birthLocation: Address
  addresses: [Address!]!
  internalCode: String!
  externalSourceCode: String
  customPersonType: Int
  customSubjectStatus: Int
  creationDate: DateTime!
  closureDate: DateTime
  deletionDate: DateTime
  entryStatus: EntryStatus!
  contacts: [Contact!]!
  orgUnits: [OrgUnit!]!
  bankAccounts: [BankAccount!]!
  categories: [SubjectCategory!]!
  relationMains: [SubjectRelation!]!
  relationSubordinates: [SubjectRelation!]!
  taxStatuses: [TaxStatus!]!
  officers: [SubjectRelation!]!
  owningMgmtSubjects: [SubjectRelation!]!
  subOrganizations: [SubjectRelation!]!
  heirs: [SubjectRelation!]!
  id: Int!
  documents(where: DocumentFilterInput order: [DocumentSortInput!]): [Document!]!
  canUseDocumentName(name: String!): Boolean!
}

type PriceList {
  internalCode: String!
  name: String!
  ordering: Int!
  isDefault: Boolean!
  articles: [PriceListArticle!]!
  id: Int!
}

type PriceListArticle {
  internalCode: String!
  name: String!
  measurementUnit: PriceListMeasurementUnit!
  priceList: PriceList!
  pricePeriods: [ArticlePricePeriod!]!
  catalogueTypeIds: [Int!]!
  actualPrice: Decimal
  actualPriceSince: Date
  actualPriceUntil: Date
  id: Int!
  catalogueTypes: [CatalogueType!]!
}

type PriceListArticleMutations {
  add(input: AddPriceListArticleInput!): ResultOfPriceListArticle! @authorize(roles: [ "851_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: UpdatePriceListArticleInput!): ResultOfPriceListArticle! @authorize(roles: [ "851_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "851_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "851_D" ]) @authorize(roles: [ "OFFICE_B" ])
  importFromExcel(file: Upload!): ResultOfInt32! @authorize(roles: [ "851_C" ]) @authorize(roles: [ "OFFICE_B" ])
}

type PriceListArticleQueries {
  get(id: Int!): PriceListArticle @authorize(roles: [ "851_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listPriceListArticles("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PriceListArticleFilterInput order: [PriceListArticleSortInput!]): ListPriceListArticlesConnection @authorize(roles: [ "851_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listPriceListArticlesFull(where: PriceListArticleFilterInput order: [PriceListArticleSortInput!]): [PriceListArticle!]! @authorize(roles: [ "851_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "851_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentPriceListArticleId: Int): Boolean! @authorize(roles: [ "851_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: PriceListArticleFilterInput order: [PriceListArticleSortInput!]): FileUrlOutput! @authorize(roles: [ "851_R" ]) @authorize(roles: [ "OFFICE_B" ])
  templateOfImportFromExcel: FileUrlOutput! @authorize(roles: [ "851_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type PriceListMeasurementUnit {
  internalCode: String!
  name: String!
  ordering: Int!
  id: Int!
}

type PriceListMeasurementUnitMutations {
  add(input: PriceListMeasurementUnitInput!): ResultOfPriceListMeasurementUnit! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: PriceListMeasurementUnitInput!): ResultOfPriceListMeasurementUnit! @authorize(roles: [ "830_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type PriceListMeasurementUnitQueries {
  get(id: Int!): PriceListMeasurementUnit @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listPriceListMeasurementUnits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PriceListMeasurementUnitFilterInput order: [PriceListMeasurementUnitSortInput!]): ListPriceListMeasurementUnitsConnection @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentPriceListMeasurementUnitId: Int): Boolean! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: PriceListMeasurementUnitFilterInput order: [PriceListMeasurementUnitSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type PriceListMutations {
  add(input: PriceListInput!): ResultOfPriceList! @authorize(roles: [ "850_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: PriceListInput!): ResultOfPriceList! @authorize(roles: [ "850_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "850_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "850_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type PriceListQueries {
  get(id: Int!): PriceList @authorize(roles: [ "850_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listPriceLists("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PriceListFilterInput order: [PriceListSortInput!]): ListPriceListsConnection @authorize(roles: [ "850_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listPriceListsFull(where: PriceListFilterInput order: [PriceListSortInput!]): [PriceList!]! @authorize(roles: [ "850_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "850_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentPriceListId: Int): Boolean! @authorize(roles: [ "850_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: PriceListFilterInput order: [PriceListSortInput!]): FileUrlOutput! @authorize(roles: [ "850_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type QualificationLevel {
  internalCode: String!
  name: String!
  ordering: Int!
  id: Int!
}

type QualificationLevelMutations {
  add(input: QualificationLevelInput!): ResultOfQualificationLevel! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: QualificationLevelInput!): ResultOfQualificationLevel! @authorize(roles: [ "830_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type QualificationLevelQueries {
  get(id: Int!): QualificationLevel @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listQualificationLevels("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: QualificationLevelFilterInput order: [QualificationLevelSortInput!]): ListQualificationLevelsConnection @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentQualificationLevelId: Int): Boolean! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: QualificationLevelFilterInput order: [QualificationLevelSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type Query @authorize {
  user: UserQueries!
  subject: SubjectQueries!
  subjectCategory: SubjectCategoryQueries!
  orgUnit: OrgUnitQueries!
  estate: EstateQueries!
  floorTemplate: FloorTemplateQueries!
  estateUnit: EstateUnitQueries!
  estateSubUnit: EstateSubUnitQueries!
  cadastralUnit: CadastralUnitQueries!
  cadastralCategory: CadastralCategoryQueries!
  functionArea: FunctionAreaQueries!
  catalogueCategory: CatalogueCategoryQueries!
  geocoding: GeocodingQueries!
  catalogueType: CatalogueTypeQueries!
  catalogueItem: CatalogueItemQueries!
  catalogue: CatalogueQueries!
  estateUsageType: EstateUsageTypeQueries!
  estateMainUsageType: EstateMainUsageTypeQueries!
  cadastralLandCategory: CadastralLandCategoryQueries!
  assetTax: AssetTaxQueries!
  document: DocumentQueries!
  contractType: ContractTypeQueries!
  contract: ContractQueries!
  registrationOffice: RegistrationOfficeQueries!
  bill: BillQueries!
  administration: AdministrationQueries!
  administrationTerm: AdministrationTermQueries!
  registryCommunication: RegistryCommunicationQueries!
  registrationPayment: RegistrationPaymentQueries!
  admin: AdminQueries!
  city: CityQueries!
  vatRate: VATRateQueries!
  interestRate: InterestRateQueries!
  accountingItem: AccountingItemQueries!
  billItemType: BillItemTypeQueries!
  revaluationData: RevaluationDataQueries!
  notification: NotificationQueries!
  taxConfiguration: TaxConfigQueries!
  reportGenerator: ReportGeneratorQueries!
  utilityType: UtilityTypeQueries!
  utilityService: UtilityServiceQueries!
  reading: ReadingQueries!
  costCharge: CostChargeQueries!
  taxCredit: TaxCreditQueries!
  estateUnitGroup: EstateUnitGroupQueries!
  fcltContractType: FcltContractTypeQueries!
  fcltContract: FcltContractQueries!
  contractTemplate: ContractTemplateQueries!
  sla: SLAQueries!
  craft: CraftQueries!
  interventionType: InterventionTypeQueries!
  ticketType: TicketTypeQueries!
  qualificationLevel: QualificationLevelQueries!
  workTeam: WorkTeamQueries!
  calendar: CalendarQueries!
  penalty: PenaltyQueries!
  ticketChecklistTemplate: TicketChecklistTemplateQueries!
  priceListMeasurementUnit: PriceListMeasurementUnitQueries!
  priceList: PriceListQueries!
  priceListArticle: PriceListArticleQueries!
  ticket: TicketQueries!
  ticketChecklist: TicketChecklistQueries!
  service: ServiceQueries!
  serviceCategory: ServiceCategoryQueries!
}

type Quote {
  masterStatus: QuoteMasterStatus!
  externalCode: String
  isFrameworkAgreement: Boolean
  classifications: String
  amount: Decimal!
  approvedAmount: Decimal!
  interventionDueDate: Date
  orderNumber: String
  notes: String
  history: [QuoteHistoryEntry!]!
  articles: [QuoteArticle!]!
  id: Int!
}

type QuoteArticle {
  sourceArticle: PriceListArticle
  internalCode: String!
  name: String!
  quantity: Int!
  ordering: Int!
  measurementUnit: PriceListMeasurementUnit!
  unitPrice: Decimal!
  isExcluded: Boolean!
  id: Int!
}

type RatePlan {
  since: Date!
  newYearlyRate: Decimal!
  isDeclarationExpected: Boolean!
  isDeclared: Boolean!
  id: Int!
}

type Reading {
  utilityService: UtilityService!
  notes: String
  readingTimestamp: DateTime!
  isEstimated: Boolean!
  values: [ReadingValue!]!
  id: Int!
}

type ReadingMutations {
  add(input: ReadingInput!): ResultOfReading! @authorize(roles: [ "611_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: ReadingInput!): ResultOfReading! @authorize(roles: [ "611_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "611_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "611_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ReadingQueries {
  listReadings("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ReadingFilterInput order: [ReadingSortInput!]): ListReadingsConnection @authorize(roles: [ "611_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ReadingValue {
  touRateIndex: Int!
  value: Decimal
  id: Int!
}

type RecurringAddition {
  billItemType: BillItemType!
  accountingItemId: Int!
  vatRateId: Int!
  amountPerInstallment: Decimal!
  excludeStartMonth: Int
  excludeEndMonth: Int
  notes: String
  id: Int!
  vatRate: VATRate!
  accountingItem: AccountingItem!
}

type Refactoring {
  referenceYear: Int!
  buildingPermitYear: Int
  condition: UnitCondition!
  ageCoefficient: Float
  estateUnitIds: [Int!]!
  id: Int!
  estateUnits: [EstateUnit!]!
}

type RegistrationOffice {
  externalCode: String!
  description: String!
  cityId: Int
  id: Int!
  city: City
}

type RegistrationOfficeMutations {
  add(input: RegistrationOfficeInput!): ResultOfRegistrationOffice! @authorize(roles: [ "512_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: RegistrationOfficeInput!): ResultOfRegistrationOffice! @authorize(roles: [ "512_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "512_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "512_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type RegistrationOfficeQueries {
  get(id: Int!): RegistrationOffice @authorize(roles: [ "512_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listRegistrationOffices("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: RegistrationOfficeFilterInput order: [RegistrationOfficeSortInput!]): ListRegistrationOfficesConnection @authorize(roles: [ "512_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type RegistrationPayment {
  contract: Contract!
  paymentType: RegistrationPaymentType!
  paymentYear: Int!
  paymentCode: String!
  valueDate: Date!
  taxAmount: Decimal!
  sanctionAmount: Decimal!
  totalAmount: Decimal!
  rows: [RegistrationPaymentRow!]!
  id: Int!
}

type RegistrationPaymentMutations {
  add(input: RegistrationPaymentInput!): ResultOfRegistrationPayment! @authorize(roles: [ "551_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: RegistrationPaymentInput!): ResultOfRegistrationPayment! @authorize(roles: [ "551_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "551_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "551_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type RegistrationPaymentQueries {
  get(id: Int!): RegistrationPayment @authorize(roles: [ "551_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listRegistrationPayments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: RegistrationPaymentFilterInput order: [RegistrationPaymentSortInput!]): ListRegistrationPaymentsConnection @authorize(roles: [ "551_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: RegistrationPaymentFilterInput order: [RegistrationPaymentSortInput!]): FileUrlOutput! @authorize(roles: [ "551_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type RegistrationPaymentRow {
  payment: RegistrationPayment!
  paymentRowCode: String!
  paymentRowSection: String
  paymentRowReceivingEntity: String
  referenceYear: Int!
  referencePeriod: Int
  amountDue: Decimal!
  amountCleared: Decimal
  id: Int!
}

type RegistrationTax {
  isTakeoverFromPreviousSubject: Boolean!
  takeoverOriginalSubjectIds: [Int!]!
  takeoverType: TakeoverType
  takeoverLegalRepresentativeSubjectId: Int
  takeoverDate: Date
  paymentType: RegistrationTaxPaymentType!
  isRLIModeEnabled: Boolean!
  isAccountingManaged: Boolean!
  incomeTypeRLI: RegistrationTaxIncomeTypeRLI
  incomeType: RegistrationTaxIncomeType
  registrationSerialNumber: String
  registrationNumber: String
  registrationYear: Int
  contractRegistrationCode: String
  requestCode: String
  registrationOffice: RegistrationOffice
  taxableRateRatioPercent: Decimal!
  tenantTaxSharePercent: Decimal!
  firstRegistrationPeriod: RegistrationTaxPeriod!
  firstRegistrationDate: Date
  firstOnlineRegistrationDate: Date
  lastPaymentDate: Date
  lastOnlinePaymentDate: Date
  exemptions: RegistrationTaxExemption
  transferResolutionAmount: Decimal
  specialCase: RegistrationTaxSpecialCase
  numberOfPages: Int!
  numberOfCopies: Int!
  tenantShareOfStampTaxPercent: Decimal!
  isVoluntarySanctionApplied: Boolean!
  legalRepresentativeSubject: ISubject
  originalSubjects: [ISubject!]!
}

type RegistryCommunication {
  isSent: Boolean!
  isExcluded: Boolean!
  date: Date!
  countryISO3: String!
  office: RegistrationOffice
  type: CommunicationType!
  registryNumber: String
  debtBankAccountId: Int
  debtAmount: Decimal
  senderSubjectId: Int
  contract: Contract
  hasAnomalies: Boolean!
  estatesUnits: [CommEstateUnit!]!
  anomalies: [RegistryCommunicationAnomaly!]!
  contractCode: String
  requestingSubjectId: Int
  requestingSubjectLegalRepresentativeId: Int
  contractType: String
  startDate: Date
  endDate: Date
  contractFee: Decimal
  isPayingEntireContractFee: Boolean!
  registryFee: Decimal
  stampFee: Decimal
  registryFeePenalty: Decimal
  stampFeePenalty: Decimal
  registryFeeInterest: Decimal
  stampFeeInterest: Decimal
  contractSignatureDate: Date
  numberOfPages: Int
  numberOfCopies: Int
  attachedDocumentId: String
  payment: RegistrationPayment
  receipt: RegistryCommunicationReceipt
  id: Int!
}

type RegistryCommunicationAnomaly {
  description: String!
}

type RegistryCommunicationAnomalyOutput {
  contractInternalCode: String
  description: String!
  guid: UUID!
}

type RegistryCommunicationGroup {
  id: RegistryCommunicationGroupId!
  debtAmount: Decimal
  anomaliesCount: Int!
  hasAnomalies: Boolean!
  managementSubject: ISubject!
  requestingSubjectLegalRepresentative: ISubject
  debtBankAccount: BankAccount
}

type RegistryCommunicationGroupId {
  managementSubjectId: Int!
  isActiveContract: Boolean!
  communicationType: CommunicationType!
  endDate: Date
  date: Date
  requestingSubjectLegalRepresentativeId: Int
  debtBankAccountId: Int
}

type RegistryCommunicationMutations {
  markAsExcluded(id: Int!): Result! @authorize(roles: [ "541_U" ]) @authorize(roles: [ "OFFICE_B" ])
  markAsIncluded(id: Int!): Result! @authorize(roles: [ "541_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "541_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type RegistryCommunicationQueries {
  group(id: RegistryCommunicationGroupIdInput!): RegistryCommunicationGroup @authorize(roles: [ "541_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listRegistryCommunicationGroups(isConfirmed: Boolean! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: RegistryCommunicationGroupFilterInput order: [RegistryCommunicationGroupSortInput!]): ListRegistryCommunicationGroupsConnection @authorize(roles: [ "541_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listRegistryCommunications(groupId: RegistryCommunicationGroupIdInput! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: RegistryCommunicationFilterInput order: [RegistryCommunicationSortInput!]): ListRegistryCommunicationsConnection @authorize(roles: [ "541_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listManagementSubjects: [ISubject!]! @authorize(roles: [ "541_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listAnomalies(groupId: RegistryCommunicationGroupIdInput! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: RegistryCommunicationAnomalyOutputFilterInput order: [RegistryCommunicationAnomalyOutputSortInput!]): ListAnomaliesConnection @authorize(roles: [ "541_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportGroupXmlRli(groupId: ConfirmedRegistryCommunicationGroupIdInput!): FileUrlOutput! @authorize(roles: [ "541_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportGroupsToExcel(isConfirmed: Boolean! where: RegistryCommunicationGroupFilterInput order: [RegistryCommunicationGroupSortInput!]): FileUrlOutput! @authorize(roles: [ "541_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type RegistryCommunicationReceipt {
  isSuccessful: Boolean!
  failureMessage: String
  contractAssignedNumber: String
  registrationSeries: String
  registrationNumber: String
}

type Reminder {
  date: Date!
  summary: String!
  id: Int!
}

type ReminderDeletedTicketHistoryEntry implements TicketHistoryEntry {
  reminderDate: Date!
  reminderSummary: String!
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type ReminderUpdatedTicketHistoryEntry implements TicketHistoryEntry {
  oldReminderDate: Date!
  oldReminderSummary: String!
  newReminderDate: Date!
  newReminderSummary: String!
  timestamp: DateTime!
  userId: Int!
  id: Int!
  user: User
}

type Reply {
  timestamp: DateTime!
  isOperator: Boolean!
  userId: Int!
  comment: String
  id: Int!
  user: User
  documents: [Document!]!
  images: [Document!]!
}

type ReportGeneratorFilterField {
  name: String!
  label: String!
  isMandatory: Boolean!
  type: CustomFieldType!
  validValues: [KeyValuePairOfStringAndString!]
}

type ReportGeneratorMutations {
  generateReports(reportGeneratorId: UUID! targetReportFormats: [ReportFormat!]! filters: [ReportGeneratorFilterInput!]!): ResultOfIEnumerableOfFileUrlOutput! @authorize(roles: [ "351_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ReportGeneratorOutput {
  id: UUID!
  name: String!
  supportedFormats: [ReportFormat!]!
  filterFields: [[ReportGeneratorFilterField!]!]!
}

type ReportGeneratorQueries {
  availableReportGenerators: [ReportGeneratorOutput!]! @authorize(roles: [ "351_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type Repossession {
  estateUnit: EstateUnit!
  notes: String
  eventDate: Date
  eventType: RepossessionType
  eventReason: RepossessionReason
  unitStatus: UnitCondition
  isAssignable: Boolean
  isKeysReturned: Boolean
  isWithValuables: Boolean
  id: Int!
}

type Resolution {
  interventionStart: DateTime
  interventionEnd: DateTime
  closure: DateTime
  operationsPerformed: String
  diagnosis: String
  resolutionNotes: String
  partsAndSupplies: String
}

type Result {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfResult
  value: Result
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfAccountingItem {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfAccountingItem
  value: AccountingItem
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfAdministration {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfAdministration
  value: Administration
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfAdministrationTerm {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfAdministrationTerm
  value: AdministrationTerm
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfAdministration__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfAdministration__
  value: [Administration]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfBill {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfBill
  value: Bill
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfBillItemType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfBillItemType
  value: BillItemType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfBillingPause {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfBillingPause
  value: BillingPause
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCadastralLandCategory {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCadastralLandCategory
  value: CadastralLandCategory
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCadastralUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCadastralUnit
  value: CadastralUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCalendar {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCalendar
  value: Calendar
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCatalogueCategory {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCatalogueCategory
  value: CatalogueCategory
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCatalogueItem {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCatalogueItem
  value: CatalogueItem
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCatalogueItem__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCatalogueItem__
  value: [CatalogueItem]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCatalogueType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCatalogueType
  value: CatalogueType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCity {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCity
  value: City
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfConfig {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfConfig
  value: Config
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfContract {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfContract
  value: Contract
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfContractTemplate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfContractTemplate
  value: ContractTemplate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfContractType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfContractType
  value: ContractType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCostCharge {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCostCharge
  value: CostCharge
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfCraft {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfCraft
  value: Craft
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfDocument {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfDocument
  value: Document
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfDocument__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfDocument__
  value: [Document]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfEstate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstate
  value: Estate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfEstateMainUsageType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateMainUsageType
  value: EstateMainUsageType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfEstateSubUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateSubUnit
  value: EstateSubUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfEstateUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateUnit
  value: EstateUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfEstateUnitGroup {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateUnitGroup
  value: EstateUnitGroup
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfEstateUnit__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateUnit__
  value: [EstateUnit]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfEstateUsageType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfEstateUsageType
  value: EstateUsageType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfFcltContract {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFcltContract
  value: FcltContract
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfFcltContractType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFcltContractType
  value: FcltContractType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfFileUrlOutput {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFileUrlOutput
  value: FileUrlOutput
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfFloorTemplate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFloorTemplate
  value: FloorTemplate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfFunctionArea {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFunctionArea
  value: FunctionArea
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfFunctionArea__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfFunctionArea__
  value: [FunctionArea]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfGroup {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfGroup
  value: Group
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfIEnumerableOfAssetTaxCalculation {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfAssetTaxCalculation
  value: [AssetTaxCalculation]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfIEnumerableOfAssetTaxPayment {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfAssetTaxPayment
  value: [AssetTaxPayment]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfIEnumerableOfFileUrlOutput {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfFileUrlOutput
  value: [FileUrlOutput]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfIEnumerableOfTicket {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfTicket
  value: [Ticket]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfIEnumerableOfTicketChecklist {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIEnumerableOfTicketChecklist
  value: [TicketChecklist]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfIReadOnlyDictionaryOfEstateMarketValueTypeAndDecimal {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfIReadOnlyDictionaryOfEstateMarketValueTypeAndDecimal
  value: [KeyValuePairOfEstateMarketValueTypeAndDecimal!]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfInt32 {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfInt32
  value: Int!
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfInterestRate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfInterestRate
  value: InterestRate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfInterventionType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfInterventionType
  value: InterventionType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfLegalSubject {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfLegalSubject
  value: LegalSubject
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfListOfFloorTemplate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfListOfFloorTemplate
  value: [FloorTemplate]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfManagementSubject {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfManagementSubject
  value: ManagementSubject
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfOperation {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfOperation
  value: Operation
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfOrgUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfOrgUnit
  value: OrgUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfPenalty {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPenalty
  value: Penalty
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfPenalty__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPenalty__
  value: [Penalty]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfPhysicalSubject {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPhysicalSubject
  value: PhysicalSubject
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfPriceList {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPriceList
  value: PriceList
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfPriceListArticle {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPriceListArticle
  value: PriceListArticle
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfPriceListMeasurementUnit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfPriceListMeasurementUnit
  value: PriceListMeasurementUnit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfQualificationLevel {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfQualificationLevel
  value: QualificationLevel
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfReading {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfReading
  value: Reading
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfRegistrationOffice {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfRegistrationOffice
  value: RegistrationOffice
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfRegistrationPayment {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfRegistrationPayment
  value: RegistrationPayment
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfSLA {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfSLA
  value: SLA
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfSLA__ {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfSLA__
  value: [SLA]
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfService {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfService
  value: Service
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfServiceCategory {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfServiceCategory
  value: ServiceCategory
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfTaxCredit {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTaxCredit
  value: TaxCredit
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfTicket {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTicket
  value: Ticket
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfTicketChecklist {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTicketChecklist
  value: TicketChecklist
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfTicketChecklistTemplate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTicketChecklistTemplate
  value: TicketChecklistTemplate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfTicketType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfTicketType
  value: TicketType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfUser {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfUser
  value: User
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfUtilityService {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfUtilityService
  value: UtilityService
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfUtilityType {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfUtilityType
  value: UtilityType
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfVATRate {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfVATRate
  value: VATRate
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfWorkTeam {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfWorkTeam
  value: WorkTeam
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  errors: [String]
  validationErrors: [ValidationError]
}

type Revaluation {
  revaluationPeriodMonths: Int!
  isAbsoluteRevaluationApplied: Boolean!
  isRevaluationCalculated: Boolean!
  referencePeriodStart: Date!
  referencePeriodEnd: Date!
  revaluationSharePercent: Decimal!
  rateType: RevaluationRateType!
  baseRevaluationRate: Decimal
  nextApplicationDate: Date!
  isBackHistoryEnabled: Boolean!
}

type RevaluationData {
  year: Int!
  month: Int!
  dataProvider: UUID!
  countryISO3: String!
  baseYear: Int!
  revaluationIndex: Decimal!
  id: Int!
}

type RevaluationDataQueries {
  get(id: Int!): RevaluationData @authorize(roles: [ "324_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listRevaluationData("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: RevaluationDataFilterInput order: [RevaluationDataSortInput!]): ListRevaluationDataConnection @authorize(roles: [ "324_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: RevaluationDataFilterInput order: [RevaluationDataSortInput!]): FileUrlOutput! @authorize(roles: [ "324_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type RevaluationHistory {
  since: Date!
  baseYearlyRate: Decimal!
  indexPercent: Decimal!
  revaluationAmount: Decimal!
  yearlyRateWithRevaluation: Decimal!
  id: Int!
}

type SLA {
  internalCode: String!
  description: String!
  ifCondition: ComplexTicketCondition!
  thenCondition: ComplexTicketCondition!
  contract: FcltContract
  id: Int!
  flatIfConditions: [TicketCondition!]!
  flatThenConditions: [TicketCondition!]!
}

type SLAMutations {
  addRange(inputs: [SLAInput!]!): ResultOfSLA__! @authorize(roles: [ "820_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: SLAInput!): ResultOfSLA! @authorize(roles: [ "820_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "820_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "820_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type SLAQueries {
  get(id: Int!): SLA @authorize(roles: [ "820_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listSLAs("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SLAFilterInput order: [SLASortInput!]): ListSLAsConnection @authorize(roles: [ "820_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listSLAsFull(where: SLAFilterInput order: [SLASortInput!]): [SLA!]! @authorize(roles: [ "820_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode(additionallyOccupiedCodes: [String!]! contractInternalCode: String): String @authorize(roles: [ "820_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentSLAId: Int): Boolean! @authorize(roles: [ "820_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: SLAFilterInput order: [SLASortInput!]): FileUrlOutput! @authorize(roles: [ "820_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type SecurityDeposit {
  subjectId: Int
  type: SecurityDepositType!
  since: Date
  until: Date
  baseAmount: Decimal!
  isInterestCalculated: Boolean!
  interestCalculationStartDate: Date
  interestCalculationEndDate: Date
  takeoverDate: Date
  suretySubjectId: Int
  isSuretyRenewable: Boolean!
  bankAccountId: Int
  notes: String
  interestRows: [SecurityDepositInterestRow!]!
  id: Int!
  subject: ISubject
  suretySubject: ISubject
}

type SecurityDepositInterestRow {
  since: Date
  until: Date
  baseAmount: Decimal!
  calculationDate: Date!
  interestAmount: Decimal!
  appliedInterestRate: Decimal!
  id: Int!
}

type Service {
  name: String!
  internalCode: String!
  category: ServiceCategory!
  subCategory: ServiceSubCategory!
  activities: [ServiceActivity!]!
  id: Int!
}

type ServiceActivity {
  name: String!
  activityType: ServiceActivityType!
  isMandatoryByLaw: Boolean!
  type: Service!
  id: Int!
}

type ServiceCategory {
  name: String!
  internalCode: String!
  subCategories: [ServiceSubCategory!]!
  services: [Service!]!
  id: Int!
}

type ServiceCategoryMutations {
  add(input: ServiceCategoryInput!): ResultOfServiceCategory! @authorize(roles: [ "865_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: ServiceCategoryInput!): ResultOfServiceCategory! @authorize(roles: [ "865_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(serviceCategoryId: Int!): Result! @authorize(roles: [ "865_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(serviceCategoryIds: [Int!]!): Result! @authorize(roles: [ "865_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ServiceCategoryQueries {
  get(id: Int!): ServiceCategory @authorize(roles: [ "865_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listServiceCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ServiceCategoryFilterInput order: [ServiceCategorySortInput!]): ListServiceCategoriesConnection @authorize(roles: [ "865_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listServiceSubCategories(serviceCategoryId: Int "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ServiceSubCategoryFilterInput order: [ServiceSubCategorySortInput!]): ListServiceSubCategoriesConnection @authorize(roles: [ "865_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "865_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCodeSubCategory(parentInternalCode: String! additionallyOccupiedCodes: [String!]!): String @authorize(roles: [ "865_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentServiceCategoryId: Int): Boolean! @authorize(roles: [ "865_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCodeSubCategory(internalCode: String! serviceCategoryId: Int currentServiceSubCategoryId: Int): Boolean! @authorize(roles: [ "865_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: ServiceCategoryFilterInput order: [ServiceCategorySortInput!]): FileUrlOutput! @authorize(roles: [ "865_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ServiceMutations {
  add(input: ServiceInput!): ResultOfService! @authorize(roles: [ "870_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: ServiceInput!): ResultOfService! @authorize(roles: [ "870_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(serviceId: Int!): Result! @authorize(roles: [ "870_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(serviceIds: [Int!]!): Result! @authorize(roles: [ "870_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ServiceQueries {
  get(id: Int!): Service @authorize(roles: [ "870_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listServices("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ServiceFilterInput order: [ServiceSortInput!]): ListServicesConnection @authorize(roles: [ "870_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listServiceActivity(serviceId: Int "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ServiceActivityFilterInput order: [ServiceActivitySortInput!]): ListServiceActivityConnection @authorize(roles: [ "870_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "870_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentServiceId: Int): Boolean! @authorize(roles: [ "870_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: ServiceFilterInput order: [ServiceSortInput!]): FileUrlOutput! @authorize(roles: [ "870_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ServiceSubCategory {
  name: String!
  internalCode: String!
  category: ServiceCategory!
  services: [Service!]!
  id: Int!
}

type Session {
  loginUserAgent: String
  loginIPAddress: String
  loginLocation: String
  lastRefreshIPAddress: String
  lastRefreshLocation: String
  lastRefreshUserAgent: String
  creationDate: DateTime!
  refreshTokenExpiration: DateTime!
  id: Int!
}

type Stair {
  description: String!
  id: Int!
}

type SubjectCategory {
  name: String!
  creationDate: DateTime!
  function: CategoryFunctionFlags!
  subjects: [Subject!]!
  id: Int!
}

type SubjectCategoryQueries {
  subjectCategory(subjectCategoryId: Int!): SubjectCategory @authorize(roles: [ "131_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listSubjectCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SubjectCategoryFilterInput order: [SubjectCategorySortInput!]): ListSubjectCategoriesConnection @authorize(roles: [ "131_R" ]) @authorize(roles: [ "OFFICE_B" ])
  allSubjectCategories(where: SubjectCategoryFilterInput order: [SubjectCategorySortInput!]): [SubjectCategory!]! @authorize(roles: [ "131_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type SubjectDocumentExpiredNotification implements DocumentExpiredNotification & Notification {
  documentCmisId: String!
  entityId: Int!
  username: String!
  timestamp: DateTime!
  status: NotificationStatus!
  id: Int!
}

type SubjectDocumentMutations {
  addRange(subjectId: Int! inputs: [DocumentInput!]!): ResultOfDocument__! @authorize(roles: [ "121_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(subjectId: Int! input: DocumentInput!): ResultOfDocument! @authorize(roles: [ "121_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(subjectId: Int! cmisIds: [String!]!): ResultOfDocument__! @authorize(roles: [ "121_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

"A connection to a list of items."
type SubjectDocumentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SubjectDocumentsEdge!]
  "A flattened list of the nodes."
  nodes: [SubjectDocumentsOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type SubjectDocumentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SubjectDocumentsOutput!
}

type SubjectDocumentsOutput {
  guid: UUID!
  subjectName: String!
  subjectInternalCode: String!
  subRows: [Document!]!
}

type SubjectMutations {
  addPhysicalSubject(input: PhysicalSubjectInput!): ResultOfPhysicalSubject! @authorize(roles: [ "121_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updatePhysicalSubject(input: PhysicalSubjectInput!): ResultOfPhysicalSubject! @authorize(roles: [ "121_U" ]) @authorize(roles: [ "OFFICE_B" ])
  addManagementSubject(input: ManagementSubjectInput!): ResultOfManagementSubject! @authorize(roles: [ "121_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateManagementSubject(input: ManagementSubjectInput!): ResultOfManagementSubject! @authorize(roles: [ "121_U" ]) @authorize(roles: [ "OFFICE_B" ])
  addLegalSubject(input: LegalSubjectInput!): ResultOfLegalSubject! @authorize(roles: [ "121_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateLegalSubject(input: LegalSubjectInput!): ResultOfLegalSubject! @authorize(roles: [ "121_U" ]) @authorize(roles: [ "OFFICE_B" ])
  addHeirs(subjectId: Int! heirs: [HeirInput!]!): ResultOfPhysicalSubject! @authorize(roles: [ "121_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(subjectId: Int!): Result! @authorize(roles: [ "121_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteByIds(subjectIds: [Int!]!): Result! @authorize(roles: [ "121_D" ]) @authorize(roles: [ "OFFICE_B" ])
  document: SubjectDocumentMutations!
}

type SubjectQueries {
  canUseInternalCode(internalCode: String! currentSubjectId: Int): Boolean! @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInterGroupSignature(signature: String! companyGroupId: Int! currentSubjectId: Int): Boolean! @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
  subject(subjectId: Int!): ISubject @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listSubjects("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SubjectFilterInput order: [SubjectSortInput!]): ListSubjectsConnection @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listSubjectsFull(where: SubjectFilterInput order: [SubjectSortInput!]): [ISubject!]! @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportSubjectsToExcel(where: SubjectFilterInput order: [SubjectSortInput!]): FileUrlOutput! @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
  checkItalianTaxID(firstName: String! lastName: String! gender: String! birthDate: Date! cityIstatCode: String! taxId: String!): Boolean! @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canBeGroupLeader(managementSubjectId: Int! subjectId: Int): Boolean! @authorize(roles: [ "121_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type SubjectRelation {
  main: ISubject!
  mainId: Int!
  subordinate: ISubject!
  subordinateId: Int!
  relationType: SubjectRelationType!
  creationDate: DateTime!
  since: Date
  until: Date
  officerRelationType: OfficerType
  groupRelationType: CompanyGroup
  notes: String
  id: Int!
}

type Subscription @authorize {
  notifyUser: Notification!
}

type Table {
  code: String!
  grouping: RateAreaType!
  columns: [Column!]!
  parameters: [String!]!
  canAddRemoveRows: Boolean!
}

type Takeover {
  originalSubjectId: Int!
  newSubjectId: Int!
  legalRepresentativeSubjectId: Int
  takeoverDate: Date!
  effectiveDate: Date!
  type: TakeoverType!
  id: Int!
  originalSubject: ISubject!
  newSubject: ISubject!
  legalRepresentativeSubject: ISubject
}

type TaxCalculator {
  id: UUID!
  description: String!
  configuration: ITaxConfiguration!
}

type TaxCalculatorName {
  id: UUID!
  description: String!
}

type TaxConfigCoefficientSubTableRow {
  id: Int!
  referenceYear: String!
  coefficient: Decimal
}

type TaxConfigColumn {
  key: String!
  type: SubValueType!
  numberValue: Decimal
  stringValue: String
  booleanValue: Boolean
  dateValue: Date
}

type TaxConfigGenericRow {
  id: Int!
  year: Int!
  otherColumns: [TaxConfigColumn!]!
}

type TaxConfigGroupedRow {
  id: Int!
  year: Int!
  grouping: RateAreaType!
  groupingReference: UUID
  city: City
  groupingName: String
  otherColumns: [TaxConfigColumn!]!
}

type TaxConfigMutations {
  addTableValue(calculatorId: UUID! tableCode: String! input: TaxConfigInput!): Result! @authorize(roles: [ "341_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateTableValue(calculatorId: UUID! tableCode: String! tableValueId: Int! input: TaxConfigInput!): Result! @authorize(roles: [ "341_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteTableValue(calculatorId: UUID! tableValueId: Int!): Result! @authorize(roles: [ "341_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteTableValueRange(calculatorId: UUID! tableValueIds: [Int!]!): Result! @authorize(roles: [ "341_D" ]) @authorize(roles: [ "OFFICE_B" ])
  addSubTableValue(calculatorId: UUID! tableCode: String! year: Int! groupReference: UUID input: TaxConfigSubValueRowInput!): Result! @authorize(roles: [ "341_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateSubTableValue(calculatorId: UUID! tableCode: String! year: Int! groupReference: UUID subTableValueId: Int! input: TaxConfigSubValueRowInput!): Result! @authorize(roles: [ "341_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteSubTableValue(calculatorId: UUID! tableCode: String! year: Int! groupReference: UUID subTableValueId: Int!): Result! @authorize(roles: [ "341_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteSubTableValueRange(calculatorId: UUID! tableCode: String! year: Int! groupReference: UUID subTableValueIds: [Int!]!): Result! @authorize(roles: [ "341_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TaxConfigQueries {
  availableCalculators: [TaxCalculator!]! @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  historyAvailableCalculators: [TaxCalculatorName!]! @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  tableValue(calculatorId: UUID! tableCode: String! tableValueId: Int!): TaxConfigMainTableRow @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTableValues(calculatorId: UUID! tableCode: String! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ITaxConfigMainTableRowFilterInput order: [ITaxConfigMainTableRowSortInput!]): ListTableValuesConnection @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  checkTableValueExists(calculatorId: UUID! tableCode: String! year: Int! groupingReference: UUID): Boolean! @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listSubTableValue(calculatorId: UUID! tableCode: String! year: Int! groupReference: UUID subTable: String! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ITaxConfigMainTableRowFilterInput order: [ITaxConfigMainTableRowSortInput!]): ListSubTableValueConnection @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listSubTableValueFull(calculatorId: UUID! tableCode: String! year: Int! groupReference: UUID subTable: String!): [TaxConfigSubTableRow!]! @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  tableValueBundle(calculatorId: UUID! tableCode: String! tableValueId: Int!): TaxConfigValueBundle @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcelMainTable(calculatorId: UUID! tableCode: String! where: ITaxConfigMainTableRowFilterInput order: [ITaxConfigMainTableRowSortInput!]): FileUrlOutput! @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcelSubTables(calculatorId: UUID! tableCode: String! subTable: String! year: Int! groupReference: UUID where: ITaxConfigSubTableRowFilterInput order: [ITaxConfigSubTableRowSortInput!]): FileUrlOutput! @authorize(roles: [ "341_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TaxConfigRateSubTableRow {
  id: Int!
  code: String!
  description: String!
  rate: Decimal
}

type TaxConfigValueBundle {
  calculator: TaxCalculator!
  mainValue: TaxConfigMainTableRow!
  allSubTableValues: [KeyValuePairOfStringAndITaxConfigSubTableRow__!]!
}

type TaxCredit {
  managementSubjectId: Int!
  taxCode: String!
  description: String
  deletionDate: DateTime
  notes: String
  operations: [Operation!]!
  id: Int!
}

type TaxCreditMutations {
  add(input: AddTaxCreditInput!): ResultOfTaxCredit! @authorize(roles: [ "701_C" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "701_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "701_D" ]) @authorize(roles: [ "OFFICE_B" ])
  addOperation(taxCreditId: Int! input: OperationInput!): ResultOfOperation! @authorize(roles: [ "701_C" ]) @authorize(roles: [ "OFFICE_B" ])
  updateOperation(taxCreditId: Int! operationId: Int! input: OperationInput!): ResultOfOperation! @authorize(roles: [ "701_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteOperation(taxCreditId: Int! operationId: Int!): Result! @authorize(roles: [ "701_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteOperationsRange(taxCreditId: Int! operationIds: [Int!]!): Result! @authorize(roles: [ "701_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TaxCreditQueries {
  get(id: Int!): TaxCredit @authorize(roles: [ "701_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTaxCredits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TaxCreditFilterInput order: [TaxCreditSortInput!]): ListTaxCreditsConnection @authorize(roles: [ "701_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listGroupedOperations(taxCreditId: Int! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: OperationGroupOutputFilterInput order: [OperationGroupOutputSortInput!]): ListGroupedOperationsConnection @authorize(roles: [ "701_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TaxStatus {
  taxStatusType: TaxStatusType!
  notes: String
  since: Date
  until: Date
  id: Int!
}

type TemporaryRegistryCommunicationMutations {
  confirm(groupId: TemporaryRegistryCommunicationGroupIdInput! date: Date! requestingSubjectLegalRepresentativeId: Int! debtBankAccountId: Int!): Result! @authorize(roles: [ "541_U" ]) @authorize(roles: [ "OFFICE_B" ])
  confirmRange(groupIds: [TemporaryRegistryCommunicationGroupIdInput!]! inputs: [ConfirmTemporaryRegistryCommunicationGroupInput!]!): Result! @authorize(roles: [ "541_U" ]) @authorize(roles: [ "OFFICE_B" ])
  confirmAll(inputs: [ConfirmTemporaryRegistryCommunicationGroupInput!]!): Result! @authorize(roles: [ "541_U" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TermExtension {
  daysCount: Int!
  feeDifference: Decimal
  notes: String
  id: Int!
}

type TermGroupedInstallmentPayment {
  termInstallments: [TermInstallment!]!
  billId: Int!
  billInternalCode: String!
  billDate: Date!
  billIsTemporary: Boolean!
  totalAmount: Decimal!
  totalAmountPerVATRate: Decimal!
  billItemTypeVATRate: VATRate!
}

type TermInstallment {
  administrationTerm: AdministrationTerm!
  installmentNumber: Int!
  dueDate: Date!
  amount: Decimal!
  notes: String
  since: Date!
  until: Date!
  billItemType: BillItemType!
  payments: [BillRow!]!
  id: Int!
}

type Ticket {
  internalCode: String!
  mainType: TicketMainType!
  masterStatus: TicketMasterStatus!
  locationEstateUnitId: Int!
  locationFloorId: Int
  locationSector: String
  locationRoom: String
  requestor: String
  requestorContactEmail: String
  requestorContactPhone: String
  requestDateTime: DateTime!
  dueDate: Date!
  isExcludedFromMaintenanceContract: Boolean!
  isWorkSafetyExpected: Boolean!
  workOrderReference: String
  customType: TicketType
  priority: Priority!
  catalogueTypeId: Int!
  catalogueItemIds: [Int!]!
  contract: FcltContract
  checklist: TicketChecklist
  summary: String
  description: String
  performedActivities: [PerformedActivity!]!
  reminders: [Reminder!]!
  history: [TicketHistoryEntry!]!
  replies: [Reply!]!
  workers: [Worker!]!
  children: [Ticket!]!
  resolution: Resolution
  quote: Quote
  supplierSubjectId: Int!
  plannedTeam: WorkTeam
  plannedTeamLeaderUserId: Int
  isOverduePlannedPeriod: Boolean!
  id: Int!
  locationEstateUnit: EstateUnit!
  locationFloor: Floor
  catalogueType: CatalogueType!
  supplierSubject: ISubject!
  plannedTeamLeaderUser: User
  catalogueItems: [CatalogueItem!]!
  canUseDocumentName(name: String!): Boolean!
  documents(where: DocumentFilterInput order: [DocumentSortInput!]): [Document!]!
  images: [Document!]!
}

type TicketAmountPercentageByIsExcludedFromMaintenanceContractStatistics {
  excludedAmountPercentage: Float!
  nonExcludedAmountPercentage: Float!
}

type TicketCatalogueCategoryEqualityCondition implements TicketCondition {
  operator: EqualityOperator!
  targetCatalogueCategoryId: Int!
  id: Int!
  targetCatalogueCategory: CatalogueCategory!
}

type TicketCatalogueSubCategoryEqualityCondition implements TicketCondition {
  operator: EqualityOperator!
  targetCatalogueSubCategoryId: Int!
  id: Int!
  targetCatalogueSubCategory: CatalogueSubCategory!
}

type TicketCatalogueTypeEqualityCondition implements TicketCondition {
  operator: EqualityOperator!
  targetCatalogueTypeId: Int!
  id: Int!
  targetCatalogueType: CatalogueType!
}

type TicketChecklist {
  internalCode: String!
  name: String!
  contract: FcltContract!
  estateUnitId: Int!
  catalogueTypeId: Int!
  type: TicketChecklistTemplateType!
  rawWorkCost: Decimal!
  safetyCost: Decimal!
  costBaseFactor: CostBaseFactor!
  preventativePlannedPeriod: PlannedPeriod
  preventativeDaysOfWeek: [DayOfWeek!]
  preventativeToleranceDays: Int
  preventativeInterventionType: InterventionType
  preventativeCraft: Craft
  preventativeActivityIds: [Int!]
  onTriggerInterventionType: InterventionType
  onTriggerCraft: Craft
  onTriggerActivityIds: [Int!]
  id: Int!
  estateUnit: EstateUnit!
  catalogueType: CatalogueType!
  onTriggerActivities: [CatalogueTypeActivity!]
  preventativeActivities: [CatalogueTypeActivity!]
}

type TicketChecklistMutations {
  addRange(contractId: Int! inputs: [TicketChecklistTemplatesPerEstateUnitInput!]!): ResultOfIEnumerableOfTicketChecklist! @authorize(roles: [ "810_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: UpdateTicketChecklistInput!): ResultOfTicketChecklist! @authorize(roles: [ "810_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "810_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "810_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TicketChecklistQueries {
  get(id: Int!): TicketChecklist @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketChecklists("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TicketChecklistFilterInput order: [TicketChecklistSortInput!]): ListTicketChecklistsConnection @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketChecklistsPerEstateUnits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TicketChecklistFilterInput order: [TicketChecklistSortInput!]): ListTicketChecklistsPerEstateUnitsConnection @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketChecklistsFull(where: TicketChecklistFilterInput order: [TicketChecklistSortInput!]): [TicketChecklist!]! @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: TicketChecklistFilterInput order: [TicketChecklistSortInput!]): FileUrlOutput! @authorize(roles: [ "810_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TicketChecklistTemplate {
  internalCode: String!
  name: String!
  catalogueTypeId: Int!
  type: TicketChecklistTemplateType!
  rawWorkCost: Decimal!
  safetyCost: Decimal!
  costBaseFactor: CostBaseFactor!
  preventativePlannedPeriod: PlannedPeriod
  preventativeDaysOfWeek: [DayOfWeek!]
  preventativeToleranceDays: Int
  preventativeInterventionType: InterventionType
  preventativeCraft: Craft
  preventativeActivityIds: [Int!]
  onTriggerInterventionType: InterventionType
  onTriggerCraft: Craft
  onTriggerActivityIds: [Int!]
  id: Int!
  catalogueType: CatalogueType!
  onTriggerActivities: [CatalogueTypeActivity!]
  preventativeActivities: [CatalogueTypeActivity!]
}

type TicketChecklistTemplateMutations {
  add(input: TicketChecklistTemplateInput!): ResultOfTicketChecklistTemplate! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: TicketChecklistTemplateInput!): ResultOfTicketChecklistTemplate! @authorize(roles: [ "830_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TicketChecklistTemplateQueries {
  get(id: Int!): TicketChecklistTemplate @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketChecklistTemplates("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TicketChecklistTemplateFilterInput order: [TicketChecklistTemplateSortInput!]): ListTicketChecklistTemplatesConnection @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketChecklistTemplatesFull(where: TicketChecklistTemplateFilterInput order: [TicketChecklistTemplateSortInput!]): [TicketChecklistTemplate!]! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentTicketChecklistTemplateId: Int): Boolean! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: TicketChecklistTemplateFilterInput order: [TicketChecklistTemplateSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TicketChecklistsPerEstateUnit {
  estateUnitId: Int!
  ticketChecklists: [TicketChecklist!]!
  estateUnit: EstateUnit!
}

type TicketDocumentMutations {
  addRange(ticketId: Int! inputs: [DocumentInput!]!): ResultOfDocument__! @authorize(roles: [ "860_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(ticketId: Int! input: DocumentInput!): ResultOfDocument! @authorize(roles: [ "860_U" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ticketId: Int! cmisIds: [String!]!): ResultOfDocument__! @authorize(roles: [ "860_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

"A connection to a list of items."
type TicketDocumentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TicketDocumentsEdge!]
  "A flattened list of the nodes."
  nodes: [TicketDocumentsOutput!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type TicketDocumentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TicketDocumentsOutput!
}

type TicketDocumentsOutput {
  guid: UUID!
  ticketInternalCode: String!
  isTicketExcludedFromMaintenanceContract: Boolean!
  subRows: [Document!]!
}

type TicketMasterStatusCondition implements TicketCondition {
  targetMasterStatus: TicketMasterStatus!
  timeComparisonOperator: ComparisonOperator!
  calendar: Calendar!
  minTimePeriodInMinutes: Int
  maxTimePeriodInMinutes: Int
  id: Int!
}

type TicketMutations {
  addIssue(input: TicketInput!): ResultOfTicket! @authorize(roles: [ "860_C" ]) @authorize(roles: [ "OFFICE_B" ])
  addOnTriggerChecklistTicketRange(input: AddOnTriggerChecklistTicketRangeInput!): ResultOfIEnumerableOfTicket! @authorize(roles: [ "860_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: TicketInput!): ResultOfTicket! @authorize(roles: [ "860_U" ]) @authorize(roles: [ "OFFICE_B" ])
  convertToExcludedFromMaintenanceContract(ticketId: Int!): ResultOfTicket! @authorize(roles: [ "860_U" ]) @authorize(roles: [ "OFFICE_B" ])
  sendReply(ticketId: Int! comment: String documentInputs: [DocumentInput!]!): ResultOfTicket! @authorize(roles: [ "860_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "860_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "860_D" ]) @authorize(roles: [ "OFFICE_B" ])
  document: TicketDocumentMutations!
}

type TicketPriorityEqualityCondition implements TicketCondition {
  operator: EqualityOperator!
  targetPriority: Priority!
  id: Int!
}

type TicketQueries {
  get(id: Int!): Ticket @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTickets("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TicketFilterInput order: [TicketSortInput!]): ListTicketsConnection @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketsPerEstateUnits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TicketFilterInput order: [TicketsPerEstateUnitSortInput!]): ListTicketsPerEstateUnitsConnection @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketsPerEstateUnitsPerYears("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TicketFilterInput order: [TicketsPerEstateUnitsPerYearSortInput!]): ListTicketsPerEstateUnitsPerYearsConnection @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketsForCalendar(startDate: Date! endDate: Date! where: CalendarTicketOutputFilterInput): [CalendarTicketOutput!]! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listAvailableProviderSubjects(estateUnitId: Int! catalogueItemIds: [Int!]! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SubjectFilterInput order: [SubjectSortInput!]): ListAvailableProviderSubjectsConnection @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesCountByStatusStatistics(startDate: Date! endDate: Date!): IssuesCountByStatusStatistics! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  ticketAmountPercentageByIsExcludedFromMaintenanceContractStatistics(startDate: Date! endDate: Date!): TicketAmountPercentageByIsExcludedFromMaintenanceContractStatistics @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  yearlyTicketAmountStatistics: YearlyTicketAmountStatistics! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  ticketsAmountLineChart(startDate: Date! endDate: Date! chartType: LineChartType!): LineChartOfTicketsAmountChartDataPoint! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  ticketsTypeLineChart(startDate: Date! endDate: Date! chartType: LineChartType!): LineChartOfTicketsTypeLineChartDataPoint! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  ticketsCountMonthlyChart(years: [Int!]!): [LineChartMonthlySeriesOfTicketsCountLineChartDataPoint!]! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  ticketsTotalAmountMonthlyChart(years: [Int!]!): [LineChartMonthlySeriesOfTicketsTotalAmountChartDataPoint!]! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesAverageResolutionDurationByStatusStatistics(startDate: Date! endDate: Date!): IssuesAverageResolutionDurationByStatusStatistics! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesPercentageByStatusStatistics(startDate: Date! endDate: Date!): IssuesPercentageByStatusStatistics @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesSLARespectingPercentageStatistics(startDate: Date! endDate: Date!): IssuesSLARespectingPercentageStatistics @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesPercentageByPriorityStatistics(startDate: Date! endDate: Date!): IssuesPercentageByPriorityStatistics @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesPercentageByTypeStatistics(startDate: Date! endDate: Date!): [KeyValuePairOfTicketTypeAndDouble!] @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  checklistTicketsMandatoryByLawPerformedActivitiesStatistics(startDate: Date! endDate: Date!): [KeyValuePairOfStringAndDouble!] @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  mandatoryByLawChecklistTicketsStatusStatistics(startDate: Date! endDate: Date!): MandatoryByLawChecklistTicketsStatusStatistics @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesExcludedFromMaintenanceContractStatistics(startDate: Date! endDate: Date!): IssuesExcludedFromMaintenanceContractStatistics @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesExcludedFromMaintenanceContractLineChart(startDate: Date! endDate: Date! chartType: LineChartType!): LineChartOfIssuesExcludedFromMaintenanceContractLineChartDataPoint! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  issuesStatusLineChart(startDate: Date! endDate: Date! chartType: LineChartType!): LineChartOfIssuesStatusLineChartDataPoint! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  checklistTicketsCountLineChart(startDate: Date! endDate: Date! chartType: LineChartType!): LineChartOfChecklistTicketsCountLineChartDataPoint! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode(mainType: TicketMainType!): String @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentTicketId: Int): Boolean! @authorize(roles: [ "860_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: TicketFilterInput order: [TicketSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TicketType {
  internalCode: String!
  description: String!
  ordering: Int!
  id: Int!
}

type TicketTypeEqualityCondition implements TicketCondition {
  operator: EqualityOperator!
  targetTicketType: TicketType!
  id: Int!
}

type TicketTypeMutations {
  add(input: TicketTypeInput!): ResultOfTicketType! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: TicketTypeInput!): ResultOfTicketType! @authorize(roles: [ "830_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TicketTypeQueries {
  get(id: Int!): TicketType @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listTicketTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TicketTypeFilterInput order: [TicketTypeSortInput!]): ListTicketTypesConnection @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentTicketTypeId: Int): Boolean! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: TicketTypeFilterInput order: [TicketTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type TicketsAmountChartDataPoint {
  excludedAmount: Decimal!
  nonExcludedAmount: Decimal!
}

type TicketsCountLineChartDataPoint {
  ticketsCount: Int!
}

type TicketsPerEstateUnit {
  locationEstateUnitId: Int!
  tickets: [Ticket!]!
  locationEstateUnit: EstateUnit!
}

type TicketsPerEstateUnitsPerYear {
  requestYear: Int!
  tickets: [TicketsPerEstateUnit!]!
}

type TicketsTotalAmountChartDataPoint {
  totalAmount: Decimal!
}

type TicketsTypeLineChartDataPoint {
  issuesCount: Int!
  preventiveCount: Int!
  onTriggerConditionCount: Int!
}

type TimeRange {
  since: TimeSpan!
  until: TimeSpan!
}

type Transactor {
  subjectId: Int!
  addressId: Int!
  invoiceAddressId: Int!
  transactionSharePercent: Float!
  isInvoiced: Boolean!
  since: Date!
  until: Date
  type: PaymentType!
  id: Int!
  subject: ISubject!
}

type UnitExpenses {
  estateUnit: EstateUnit!
  referenceYear: Int!
  amount: Decimal!
  revaluationFactor: Float
  id: Int!
}

type UsageTypeDistribution {
  percentage: Float!
  usageTypeName: String!
}

"A connection to a list of items."
type UsageTypeDistributionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UsageTypeDistributionEdge!]
  "A flattened list of the nodes."
  nodes: [UsageTypeDistribution!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type UsageTypeDistributionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UsageTypeDistribution!
}

type User {
  unlock(newPasswordHash: String!): Boolean!
  userName: String!
  type: UserType!
  status: UserStatus!
  officeAccess: OfficeAccess!
  supplierSubjectId: Int
  preferredLanguageCode: String
  firstName: String
  lastName: String
  suspensionReason: String
  creationDate: DateTime!
  ceasedDate: DateTime
  lastPasswordUpdated: DateTime
  lastLoggedIn: DateTime
  lastLogInAttempt: DateTime
  lockedSince: DateTime
  lockedUntil: DateTime
  enabledSince: DateTime
  deletionDate: DateTime
  passwordExpiredSince: DateTime
  mainDashboard: [WidgetSection!]!
  facilityDashboard: [WidgetSection!]!
  contacts: [IAMContact!]!
  sessions: [Session!]!
  groups: [Group!]!
  subjects: [Int!]
  orgUnits: [Int!]
  id: Int!
  supplierSubject: ISubject
  managementSubjects: [ISubject!]!
  managementOrgUnits: [OrgUnit!]!
}

type UserLoginMutations {
  login(input: LoginInput!): LoginResult!
  loginOIDC(idToken: String!): LoginResult!
  refreshAccessToken(accessToken: String! refreshToken: String!): LoginResult!
}

type UserModel {
  username: String!
}

type UserMutations {
  switchTenant(input: SwitchTenantInput!): LoginResult
  changePassword(input: ChangePasswordInput!): Result!
  revokeSession(sessionId: Int!): Result!
  revokeAllSessions: Result!
  updateMainDashboardWidgets(inputs: [WidgetSectionInput!]!): Result!
  updateFacilityDashboardWidgets(inputs: [WidgetSectionInput!]!): Result!
}

type UserQueries {
  me: User
  sessions: [Session!]!
}

type UtilityChargeField {
  name: String!
  isMandatory: Boolean!
  id: UUID!
  type: CustomFieldType!
  validValues: [String!]
}

type UtilityService {
  internalCode: String!
  utilityType: UtilityType!
  estateIds: [Int!]!
  estateUnitIds: [Int!]!
  providerSubjectId: Int!
  referenceSubjectId: Int!
  orgUnitId: Int!
  accountingItemId: Int!
  description: String
  utilityUserCode: String!
  utilityContractCode: String!
  utilityMeterSerial: String
  utilityDeliveryPointCode: String
  isFreeMarket: Boolean!
  deposit: Decimal
  status: EntryStatus!
  activationDate: Date!
  deactivationRequestDate: Date
  deactivationDate: Date
  contractPowerMaximum: String
  contractPowerNominal: String
  contractNominalTension: String
  notes: String
  id: Int!
  estates: [Estate!]!
  estateUnits: [EstateUnit!]!
  providerSubject: ISubject!
  referenceSubject: ISubject!
  orgUnit: OrgUnit!
  accountingItem: AccountingItem!
}

type UtilityServiceMutations {
  add(input: UtilityServiceInput!): ResultOfUtilityService! @authorize(roles: [ "611_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: UtilityServiceInput!): ResultOfUtilityService! @authorize(roles: [ "611_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "611_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "611_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type UtilityServiceQueries {
  get(id: Int!): UtilityService @authorize(roles: [ "611_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listUtilityServices("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UtilityServiceFilterInput order: [UtilityServiceSortInput!]): ListUtilityServicesConnection @authorize(roles: [ "611_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "601_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentUtilityServiceId: Int): Boolean! @authorize(roles: [ "601_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: UtilityServiceFilterInput order: [UtilityServiceSortInput!]): FileUrlOutput! @authorize(roles: [ "601_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type UtilityType {
  category: UtilityCategory!
  description: String!
  internalCode: String!
  externalCode: String
  expenseClass: String
  measurementUnit: String!
  measurementUnitDescription: String!
  timeOfUseRateCount: Int!
  meteringType: MeteringType!
  hasHeatingAccountingSystem: Boolean!
  chargeFields: [[UtilityChargeField!]!]
  id: Int!
}

type UtilityTypeMutations {
  add(input: UtilityTypeInput!): ResultOfUtilityType! @authorize(roles: [ "601_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: UtilityTypeInput!): ResultOfUtilityType! @authorize(roles: [ "601_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "601_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "601_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type UtilityTypeQueries {
  get(id: Int!): UtilityType @authorize(roles: [ "601_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listUtilityType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UtilityTypeFilterInput order: [UtilityTypeSortInput!]): ListUtilityTypeConnection @authorize(roles: [ "601_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "601_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentUtilityTypeId: Int): Boolean! @authorize(roles: [ "601_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: UtilityTypeFilterInput order: [UtilityTypeSortInput!]): FileUrlOutput! @authorize(roles: [ "601_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type VATRate {
  internalCode: String!
  description: String!
  type: VATRateType!
  ratePercent: Float!
  id: Int!
}

type VATRateMutations {
  add(input: VATRateInput!): ResultOfVATRate! @authorize(roles: [ "311_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: VATRateInput!): ResultOfVATRate! @authorize(roles: [ "311_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "311_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "311_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type VATRateQueries {
  get(id: Int!): VATRate @authorize(roles: [ "311_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listVATRates("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: VATRateFilterInput order: [VATRateSortInput!]): ListVATRatesConnection @authorize(roles: [ "311_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: VATRateFilterInput order: [VATRateSortInput!]): FileUrlOutput! @authorize(roles: [ "311_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentVATRateId: Int): Boolean! @authorize(roles: [ "311_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "311_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type ValidationError {
  identifier: String
  errorMessage: String
  errorCode: String
  severity: ValidationSeverity!
}

type Valuation {
  referenceYear: Int!
  iasValue: Decimal
  rbaValue: Decimal
  mortgageAmount: Decimal
  transferYear: Int
  revampOperations: Int
  id: Int!
}

type WidgetConfig {
  width: Int!
  type: String!
  id: Int!
}

type WidgetSection {
  title: String
  backgroundColor: String
  rows: [WidgetSectionRow!]!
  id: Int!
}

type WidgetSectionRow {
  widgets: [WidgetConfig!]!
  id: Int!
}

type WorkTeam {
  internalCode: String!
  description: String!
  providerSubjectId: Int!
  leaderUserId: Int!
  insertionDate: Date!
  workers: [Worker!]!
  id: Int!
  providerSubject: ISubject!
  leaderUser: User!
}

type WorkTeamMutations {
  add(input: WorkTeamInput!): ResultOfWorkTeam! @authorize(roles: [ "830_C" ]) @authorize(roles: [ "OFFICE_B" ])
  update(id: Int! input: WorkTeamInput!): ResultOfWorkTeam! @authorize(roles: [ "830_U" ]) @authorize(roles: [ "OFFICE_B" ])
  delete(id: Int!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
  deleteRange(ids: [Int!]!): Result! @authorize(roles: [ "830_D" ]) @authorize(roles: [ "OFFICE_B" ])
}

type WorkTeamQueries {
  get(id: Int!): WorkTeam @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  listWorkTeams("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: WorkTeamFilterInput order: [WorkTeamSortInput!]): ListWorkTeamsConnection @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  proposeNewInternalCode: String @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  canUseInternalCode(internalCode: String! currentWorkTeamId: Int): Boolean! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
  exportToExcel(where: WorkTeamFilterInput order: [WorkTeamSortInput!]): FileUrlOutput! @authorize(roles: [ "830_R" ]) @authorize(roles: [ "OFFICE_B" ])
}

type Worker {
  firstName: String!
  lastName: String!
  since: Date!
  until: Date
  craft: Craft!
  qualificationLevel: QualificationLevel!
  id: Int!
}

type YearlyTicketAmountStatistics {
  totalAmount: Decimal!
  totalAmountTrend: Trend!
  excludedAmount: Decimal!
  excludedAmountTrend: Trend!
  nonExcludedAmount: Decimal!
  nonExcludedAmountTrend: Trend!
}

union Subject = PhysicalSubject | ManagementSubject | LegalSubject

union TaxConfigMainTableRow = TaxConfigGroupedRow | TaxConfigGenericRow

union TaxConfigSubTableRow = TaxConfigCoefficientSubTableRow | TaxConfigRateSubTableRow

input AccountingItemFilterInput {
  and: [AccountingItemFilterInput!]
  or: [AccountingItemFilterInput!]
  description: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  externalCode: CustomStringFilterInput
  id: IntOperationFilterInput
}

input AccountingItemInput {
  id: Int
  description: String!
  externalCode: String!
  internalCode: String!
}

input AccountingItemSortInput {
  description: SortEnumType
  internalCode: SortEnumType
  externalCode: SortEnumType
  id: SortEnumType
}

input AddOnTriggerChecklistTicketRangeInput {
  contractId: Int!
  ticketChecklistId: Int!
  catalogueItemIds: [Int!]!
}

input AddPriceListArticleInput {
  internalCode: String!
  name: String!
  measurementUnitId: Int!
  priceListId: Int!
  catalogueTypeIds: [Int!]!
  since: Date!
  price: Decimal!
}

input AddTaxCreditInput {
  managementSubjectId: Int!
  taxCode: String!
  description: String
  date: Date!
  amount: Decimal!
  notes: String
}

input AddressInput {
  id: Int
  addressType: AddressType!
  cityId: Int
  cityName: String
  toponymy: String
  countryISO: String
  regionName: String
  countyName: String
  localPostCode: String
  numbering: String
  notes: String
}

input AddressSortInput {
  addressType: SortEnumType
  cityName: SortEnumType
  cityReference: SortEnumType
  countyName: SortEnumType
  countyReference: SortEnumType
  regionName: SortEnumType
  regionReference: SortEnumType
  countryName: SortEnumType
  countryISO: SortEnumType
  toponymy: SortEnumType
  numbering: SortEnumType
  localPostCode: SortEnumType
  notes: SortEnumType
  creationDate: SortEnumType
  id: SortEnumType
}

input AddressTypeOperationFilterInput {
  eq: AsstAddressType
  neq: AsstAddressType
  in: [AsstAddressType!]
  nin: [AsstAddressType!]
}

input AdminContactInput {
  id: Int
  contactInfoType: ContactInfoType!
  contactId: Int
  contactInfo: String
  notes: String
}

input AdminGroupFeatureInput {
  feature: String!
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

input AdminGroupInput {
  name: String!
  description: String!
  features: [AdminGroupFeatureInput!]
}

input AdminUserInput {
  firstName: String
  lastName: String
  userName: String!
  type: UserType!
  officeAccess: OfficeAccess!
  supplierSubjectId: Int
  status: UserStatus!
  ceasedDate: DateTime
  lockedSince: DateTime
  enabledSince: DateTime
  suspensionReason: String
  groups: [Int!]
  managementSubjects: [Int!]
  managementOrgUnits: [Int!]
  contacts: [AdminContactInput!]
  newPassword: String
  passwordConfirmation: String
}

input AdministrationFilterInput {
  and: [AdministrationFilterInput!]
  or: [AdministrationFilterInput!]
  estateInternalCode: CustomStringFilterInput
  administrationSubjectName: CustomStringFilterInput
  estateAddress: CustomStringFilterInput
  estateId: IntOperationFilterInput
  administratorSubjectId: IntOperationFilterInput
  administratorBankAccountId: IntOperationFilterInput
  externalCode: CustomStringFilterInput
  administrationType: AdministrationTypeOperationFilterInput
  paymentType: PaymentTypeOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  terms: ListFilterInputTypeOfAdministrationTermFilterInput
  notes: CustomStringFilterInput
  isPaymentDataIncluded: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input AdministrationInput {
  estateId: Int!
  administratorSubjectId: Int!
  administratorBankAccountId: Int
  administrationType: AdministrationType!
  paymentType: PaymentType!
  since: Date!
  until: Date
  notes: String
  isPaymentDataIncluded: Boolean!
}

input AdministrationSortInput {
  estateInternalCode: SortEnumType
  administrationSubjectName: SortEnumType
  estateAddress: SortEnumType
  estateId: SortEnumType
  administratorSubjectId: SortEnumType
  administratorBankAccountId: SortEnumType
  externalCode: SortEnumType
  administrationType: SortEnumType
  paymentType: SortEnumType
  since: SortEnumType
  until: SortEnumType
  notes: SortEnumType
  isPaymentDataIncluded: SortEnumType
  id: SortEnumType
}

input AdministrationTermFilterInput {
  and: [AdministrationTermFilterInput!]
  or: [AdministrationTermFilterInput!]
  administration: AdministrationFilterInput
  termType: TermTypeOperationFilterInput
  name: CustomStringFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  expectedAmount: DecimalOperationFilterInput
  installments: ListFilterInputTypeOfTermInstallmentFilterInput
  id: IntOperationFilterInput
}

input AdministrationTermInput {
  termType: TermType!
  name: String!
  since: Date!
  until: Date!
  expectedAmount: Decimal!
  installments: [TermInstallmentInput!]!
  payments: [TermGroupedInstallmentPaymentInput!]!
}

input AdministrationTermSortInput {
  administration: AdministrationSortInput
  termType: SortEnumType
  name: SortEnumType
  since: SortEnumType
  until: SortEnumType
  expectedAmount: SortEnumType
  id: SortEnumType
}

input AdministrationTypeOperationFilterInput {
  eq: AdministrationType
  neq: AdministrationType
  in: [AdministrationType!]
  nin: [AdministrationType!]
}

input ArticlePricePeriodFilterInput {
  and: [ArticlePricePeriodFilterInput!]
  or: [ArticlePricePeriodFilterInput!]
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  price: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input ArticlePricePeriodInput {
  id: Int
  since: Date!
  until: Date
  price: Decimal!
}

input AssetNatureOperationFilterInput {
  eq: AssetNature
  neq: AssetNature
  in: [AssetNature!]
  nin: [AssetNature!]
}

input AssetTaxCalculationFilterInput {
  and: [AssetTaxCalculationFilterInput!]
  or: [AssetTaxCalculationFilterInput!]
  cadastralUnit: CadastralUnitFilterInput
  taxCalculator: CustomStringFilterInput
  taxCalculatorId: UuidOperationFilterInput
  year: IntOperationFilterInput
  installments: ListFilterInputTypeOfAssetTaxPaymentFilterInput
  totalAmount: DecimalOperationFilterInput
  expectedInstallments: IntOperationFilterInput
  id: IntOperationFilterInput
}

input AssetTaxCalculationSortInput {
  cadastralUnit: CadastralUnitSortInput
  taxCalculator: SortEnumType
  taxCalculatorId: SortEnumType
  year: SortEnumType
  totalAmount: SortEnumType
  expectedInstallments: SortEnumType
  id: SortEnumType
}

input AssetTaxDetailEstateItemFilterInput {
  and: [AssetTaxDetailEstateItemFilterInput!]
  or: [AssetTaxDetailEstateItemFilterInput!]
  address: IAddressFilterInput
  subRows: ListAssetTaxDetailEstateUnitItemFilterTypeFilterInput
  year: IntOperationFilterInput
  managementSubjectId: IntOperationFilterInput
  estateInternalCode: CustomStringFilterInput
  totalAmountPaid: DecimalOperationFilterInput
  totalBaseTaxableAmount: DecimalOperationFilterInput
  totalGrossCadastralIncome: DecimalOperationFilterInput
  totalActualizedCadastralIncome: DecimalOperationFilterInput
}

input AssetTaxDetailEstateUnitItemFilterInput {
  and: [AssetTaxDetailEstateUnitItemFilterInput!]
  or: [AssetTaxDetailEstateUnitItemFilterInput!]
  address: IAddressFilterInput
  cadastralUnitIncome: CadastralUnitIncomeFilterInput
  cadastralUnitTaxConfig: CadastralUnitTaxConfigFilterInput
  cadastralCoordinates: ListCadastralCoordinatesFilterTypeFilterInput
  year: IntOperationFilterInput
  estateUnitInternalCode: CustomStringFilterInput
  estateUnitOwnershipPercent: FloatOperationFilterInput
  amountPaid: DecimalOperationFilterInput
  baseTaxableAmount: DecimalOperationFilterInput
  grossCadastralIncome: DecimalOperationFilterInput
  actualizedCadastralIncome: DecimalOperationFilterInput
}

input AssetTaxDetailRowFilterInput {
  and: [AssetTaxDetailRowFilterInput!]
  or: [AssetTaxDetailRowFilterInput!]
  address: IAddressFilterInput
  subRows: ListAssetTaxDetailEstateItemFilterTypeFilterInput
  year: IntOperationFilterInput
  cityName: CustomStringFilterInput
  estatesCount: IntOperationFilterInput
  estateUnitsCount: IntOperationFilterInput
  managementSubjectName: CustomStringFilterInput
}

input AssetTaxDetailRowSortInput {
  year: SortEnumType
  cityName: SortEnumType
  estatesCount: SortEnumType
  estateUnitsCount: SortEnumType
  managementSubjectName: SortEnumType
}

input AssetTaxGroupedRowFilterInput {
  and: [AssetTaxGroupedRowFilterInput!]
  or: [AssetTaxGroupedRowFilterInput!]
  assetTaxCalculation: AssetTaxCalculationFilterInput
  year: IntOperationFilterInput
  managementSubjectId: IntOperationFilterInput
  managementSubject: CustomStringFilterInput
  expectedDueDate: DateOperationFilterInput
  lastUpdate: DateOperationFilterInput
  totalAmount: DecimalOperationFilterInput
  totalTaxableAmount: DecimalOperationFilterInput
  payments: ListFilterInputTypeOfAssetTaxPaymentFilterInput
}

input AssetTaxGroupedRowSortInput {
  assetTaxCalculation: AssetTaxCalculationSortInput
  year: SortEnumType
  managementSubjectId: SortEnumType
  managementSubject: SortEnumType
  expectedDueDate: SortEnumType
  lastUpdate: SortEnumType
  totalAmount: SortEnumType
  totalTaxableAmount: SortEnumType
}

input AssetTaxPaymentFilterInput {
  and: [AssetTaxPaymentFilterInput!]
  or: [AssetTaxPaymentFilterInput!]
  assetTaxCalculation: AssetTaxCalculationFilterInput
  managementSubjectId: IntOperationFilterInput
  managementSubjectBankAccountId: IntOperationFilterInput
  date: DateOperationFilterInput
  propertyMonths: IntOperationFilterInput
  grossCadastralIncome: DecimalOperationFilterInput
  actualizedCadastralIncome: DecimalOperationFilterInput
  baseTaxableAmount: DecimalOperationFilterInput
  debitedAmount: DecimalOperationFilterInput
  creditedAmount: DecimalOperationFilterInput
  amountPaid: DecimalOperationFilterInput
  taxName: CustomStringFilterInput
  isDefinitive: BooleanOperationFilterInput
  expectedDueDate: DateOperationFilterInput
  installmentsPaid: ListIntOperationFilterInput
  issue: NullableOfCalculationIssueOperationFilterInput
  isIssueOverridden: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input AsstAddressFilterInput {
  and: [AsstAddressFilterInput!]
  or: [AsstAddressFilterInput!]
  addressType: AddressTypeOperationFilterInput
  cityName: CustomStringFilterInput
  cityReference: UuidOperationFilterInput
  countyName: CustomStringFilterInput
  countyReference: UuidOperationFilterInput
  regionName: CustomStringFilterInput
  regionReference: UuidOperationFilterInput
  countryName: CustomStringFilterInput
  countryISO: CustomStringFilterInput
  toponymy: CustomStringFilterInput
  numbering: CustomStringFilterInput
  localPostCode: CustomStringFilterInput
  notes: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
  deletionDate: DateTimeOperationFilterInput
  id: IntOperationFilterInput
}

input AsstAddressInput {
  id: Int
  addressType: AsstAddressType!
  cityId: Int
  cityName: String
  toponymy: String
  countryISO: String
  regionName: String
  countyName: String
  localPostCode: String
  numbering: String
  subNumbering: String
  notes: String
  locationLatLon: GeoJSONPointInput
}

input AsstAddressSortInput {
  addressType: SortEnumType
  cityName: SortEnumType
  cityReference: SortEnumType
  countyName: SortEnumType
  countyReference: SortEnumType
  regionName: SortEnumType
  regionReference: SortEnumType
  countryName: SortEnumType
  countryISO: SortEnumType
  toponymy: SortEnumType
  numbering: SortEnumType
  localPostCode: SortEnumType
  notes: SortEnumType
  creationDate: SortEnumType
  deletionDate: SortEnumType
  id: SortEnumType
}

input AuditLogFilterInput {
  and: [AuditLogFilterInput!]
  or: [AuditLogFilterInput!]
  auditDate: DateTimeOperationFilterInput
  action: CustomStringFilterInput
  entityType: CustomStringFilterInput
  tablePk: CustomStringFilterInput
}

input AuditLogSortInput {
  entityType: SortEnumType
  tablePk: SortEnumType
  auditData: SortEnumType
  auditUser: SortEnumType
  action: SortEnumType
  auditDate: SortEnumType
  id: SortEnumType
}

input BankAccountCodeTypeOperationFilterInput {
  eq: BankAccountCodeType
  neq: BankAccountCodeType
  in: [BankAccountCodeType!]
  nin: [BankAccountCodeType!]
}

input BankAccountFilterInput {
  and: [BankAccountFilterInput!]
  or: [BankAccountFilterInput!]
  bankAccountType: BankAccountTypeOperationFilterInput
  referenceCode: CustomStringFilterInput
  referenceCodeType: BankAccountCodeTypeOperationFilterInput
  notes: CustomStringFilterInput
  accountHolder: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
  id: IntOperationFilterInput
}

input BankAccountInput {
  id: Int
  bankAccountType: BankAccountType!
  referenceCodeType: BankAccountCodeType!
  referenceCode: String
  accountHolder: String
  notes: String
}

input BankAccountTypeOperationFilterInput {
  eq: BankAccountType
  neq: BankAccountType
  in: [BankAccountType!]
  nin: [BankAccountType!]
}

input BillEmissionTypeOperationFilterInput {
  eq: BillEmissionType
  neq: BillEmissionType
  in: [BillEmissionType!]
  nin: [BillEmissionType!]
}

input BillFilterInput {
  and: [BillFilterInput!]
  or: [BillFilterInput!]
  isTemporary: BooleanOperationFilterInput
  managementSubjectName: CustomStringFilterInput
  counterpartSubjectName: CustomStringFilterInput
  estateUnitInternalCode: CustomStringFilterInput
  estateUnitAddress: CustomStringFilterInput
  transactorSubjectName: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  externalSourceCode: CustomStringFilterInput
  externalExportCode: CustomStringFilterInput
  year: IntOperationFilterInput
  transactorSubjectId: IntOperationFilterInput
  mainCounterpartSubjectId: IntOperationFilterInput
  estateUnitId: IntOperationFilterInput
  invoiceId: IntOperationFilterInput
  isOccupiedWithoutRight: BooleanOperationFilterInput
  isInvoiced: BooleanOperationFilterInput
  transactorPaymentType: PaymentTypeOperationFilterInput
  contract: ContractFilterInput
  date: DateOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  finalDate: DateTimeOperationFilterInput
  emissionType: BillEmissionTypeOperationFilterInput
  contractBillingPeriod: BillingPeriodOperationFilterInput
  totalAmount: DecimalOperationFilterInput
  billRows: ListFilterInputTypeOfBillRowFilterInput
  id: IntOperationFilterInput
}

input BillInput {
  year: Int!
  transactorSubjectId: Int!
  mainCounterpartSubjectId: Int!
  isOccupiedWithoutRight: Boolean!
  isInvoiced: Boolean!
  transactorPaymentType: PaymentType!
  emissionType: BillEmissionType!
  contractBillingPeriod: BillingPeriod!
  totalAmount: Decimal!
  billRows: [BillRowInput!]!
}

input BillItemTypeFilterInput {
  and: [BillItemTypeFilterInput!]
  or: [BillItemTypeFilterInput!]
  defaultAccountingItemInternalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  isForContractFee: BooleanOperationFilterInput
  isForContractCosts: BooleanOperationFilterInput
  isForAdministration: BooleanOperationFilterInput
  isPositive: BooleanOperationFilterInput
  isForTax: BooleanOperationFilterInput
  defaultAccountingItemId: IntOperationFilterInput
  activeSubjectVRId: IntOperationFilterInput
  activeExemptVRId: IntOperationFilterInput
  activeNonTaxableVRId: IntOperationFilterInput
  passiveSubjectVRId: IntOperationFilterInput
  passiveExemptVRId: IntOperationFilterInput
  passiveNonTaxableVRId: IntOperationFilterInput
  administrationVRId: IntOperationFilterInput
  id: IntOperationFilterInput
}

input BillItemTypeInput {
  id: Int
  description: String!
  internalCode: String!
  isForContractFee: Boolean!
  isForContractCosts: Boolean!
  isForAdministration: Boolean!
  isPositive: Boolean!
  isForTax: Boolean!
  defaultAccountingItemId: Int
  activeSubjectVRId: Int!
  activeExemptVRId: Int!
  activeNonTaxableVRId: Int!
  passiveSubjectVRId: Int!
  passiveExemptVRId: Int!
  passiveNonTaxableVRId: Int!
  administrationVRId: Int!
}

input BillItemTypeSortInput {
  defaultAccountingItemInternalCode: SortEnumType
  description: SortEnumType
  internalCode: SortEnumType
  isForContractFee: SortEnumType
  isForContractCosts: SortEnumType
  isForAdministration: SortEnumType
  isPositive: SortEnumType
  isForTax: SortEnumType
  defaultAccountingItemId: SortEnumType
  activeSubjectVRId: SortEnumType
  activeExemptVRId: SortEnumType
  activeNonTaxableVRId: SortEnumType
  passiveSubjectVRId: SortEnumType
  passiveExemptVRId: SortEnumType
  passiveNonTaxableVRId: SortEnumType
  administrationVRId: SortEnumType
  id: SortEnumType
}

input BillRowFilterInput {
  and: [BillRowFilterInput!]
  or: [BillRowFilterInput!]
  bill: BillFilterInput
  itemType: BillItemTypeFilterInput
  vatRateId: IntOperationFilterInput
  amount: DecimalOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  notes: CustomStringFilterInput
  recurringAdditionSource: RecurringAdditionFilterInput
  oneshotAdditionSource: OneshotAdditionFilterInput
  termInstallmentSource: TermInstallmentFilterInput
  id: IntOperationFilterInput
}

input BillRowInput {
  id: Int
  billItemTypeId: Int!
  vatRateId: Int!
  amount: Decimal!
  since: Date
  until: Date
  notes: String
}

input BillSortInput {
  isTemporary: SortEnumType
  managementSubjectName: SortEnumType
  counterpartSubjectName: SortEnumType
  estateUnitInternalCode: SortEnumType
  estateUnitAddress: SortEnumType
  transactorSubjectName: SortEnumType
  internalCode: SortEnumType
  externalSourceCode: SortEnumType
  externalExportCode: SortEnumType
  year: SortEnumType
  transactorSubjectId: SortEnumType
  mainCounterpartSubjectId: SortEnumType
  estateUnitId: SortEnumType
  invoiceId: SortEnumType
  isOccupiedWithoutRight: SortEnumType
  isInvoiced: SortEnumType
  transactorPaymentType: SortEnumType
  contract: ContractSortInput
  date: SortEnumType
  since: SortEnumType
  until: SortEnumType
  finalDate: SortEnumType
  emissionType: SortEnumType
  contractBillingPeriod: SortEnumType
  totalAmount: SortEnumType
  id: SortEnumType
}

input BillingInfoFilterInput {
  and: [BillingInfoFilterInput!]
  or: [BillingInfoFilterInput!]
  billingPeriod: NullableOfBillingPeriodOperationFilterInput
  vatPercentage: DecimalOperationFilterInput
  purchaseFeeWithoutVAT: DecimalOperationFilterInput
  fixedRateFee: DecimalOperationFilterInput
  discountPercentage: DecimalOperationFilterInput
}

input BillingInfoInput {
  billingPeriod: BillingPeriod
  vatPercentage: Decimal
  purchaseFeeWithoutVAT: Decimal
  fixedRateFee: Decimal
  discountPercentage: Decimal
}

input BillingInfoSortInput {
  billingPeriod: SortEnumType
  vatPercentage: SortEnumType
  purchaseFeeWithoutVAT: SortEnumType
  fixedRateFee: SortEnumType
  discountPercentage: SortEnumType
}

input BillingPauseFilterInput {
  and: [BillingPauseFilterInput!]
  or: [BillingPauseFilterInput!]
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  isRecoveryArrears: BooleanOperationFilterInput
  notes: CustomStringFilterInput
  id: IntOperationFilterInput
}

input BillingPeriodOperationFilterInput {
  eq: BillingPeriod
  neq: BillingPeriod
  in: [BillingPeriod!]
  nin: [BillingPeriod!]
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input BooleanOperatorOperationFilterInput {
  eq: BooleanOperator
  neq: BooleanOperator
  in: [BooleanOperator!]
  nin: [BooleanOperator!]
}

input CadastralCategoryFilterInput {
  and: [CadastralCategoryFilterInput!]
  or: [CadastralCategoryFilterInput!]
  description: CustomStringFilterInput
  externalCode: CustomStringFilterInput
  groupName: CustomStringFilterInput
  countryISO: CustomStringFilterInput
  cadastralValueFactor: DecimalOperationFilterInput
  cadastralValueTaxFactor: DecimalOperationFilterInput
  isInstrumental: BooleanOperationFilterInput
  isTaxed: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input CadastralCategorySortInput {
  description: SortEnumType
  externalCode: SortEnumType
  groupName: SortEnumType
  countryISO: SortEnumType
  cadastralValueFactor: SortEnumType
  cadastralValueTaxFactor: SortEnumType
  isInstrumental: SortEnumType
  isTaxed: SortEnumType
  id: SortEnumType
}

input CadastralCoordinatesFilterInput {
  and: [CadastralCoordinatesFilterInput!]
  or: [CadastralCoordinatesFilterInput!]
  notes: CustomStringFilterInput
  level1: CustomStringFilterInput
  level2: CustomStringFilterInput
  level3: CustomStringFilterInput
  level4: CustomStringFilterInput
  level5: CustomStringFilterInput
  coordinateType: CoordinateTypeOperationFilterInput
  itTavPartita: CustomStringFilterInput
  itTavCorpo: CustomStringFilterInput
  itTavPorzione: CustomStringFilterInput
  hasITTavData: BooleanOperationFilterInput
  unmanagedOverride: CustomStringFilterInput
  id: IntOperationFilterInput
}

input CadastralCoordinatesInput {
  id: Int
  notes: String
  level1: String
  level2: String
  level3: String
  level4: String
  level5: String
  itTavPartita: String
  itTavCorpo: String
  itTavPorzione: String
  type: CoordinateType!
  unmanagedOverride: String
}

input CadastralExpenseTypeOperationFilterInput {
  eq: CadastralExpenseType
  neq: CadastralExpenseType
  in: [CadastralExpenseType!]
  nin: [CadastralExpenseType!]
}

input CadastralExpensesFilterInput {
  and: [CadastralExpensesFilterInput!]
  or: [CadastralExpensesFilterInput!]
  expenseType: CadastralExpenseTypeOperationFilterInput
  referenceYear: IntOperationFilterInput
  fiscalYear: IntOperationFilterInput
  amount: DecimalOperationFilterInput
  revaluationFactor: FloatOperationFilterInput
  id: IntOperationFilterInput
}

input CadastralExpensesInput {
  id: Int
  expenseType: CadastralExpenseType!
  referenceYear: Int!
  fiscalYear: Int
  amount: Decimal
  revaluationFactor: Float
}

input CadastralLandCategoryFilterInput {
  and: [CadastralLandCategoryFilterInput!]
  or: [CadastralLandCategoryFilterInput!]
  description: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  countryISO: CustomStringFilterInput
  ordering: IntOperationFilterInput
  id: IntOperationFilterInput
}

input CadastralLandCategoryInput {
  description: String!
  internalCode: String!
  countryISO: String!
  ordering: Int!
}

input CadastralLandCategorySortInput {
  description: SortEnumType
  internalCode: SortEnumType
  countryISO: SortEnumType
  ordering: SortEnumType
  id: SortEnumType
}

input CadastralUnavailabilityFilterInput {
  and: [CadastralUnavailabilityFilterInput!]
  or: [CadastralUnavailabilityFilterInput!]
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  notes: CustomStringFilterInput
  id: IntOperationFilterInput
}

input CadastralUnavailabilityInput {
  id: Int
  since: Date
  until: Date
  notes: String
}

input CadastralUnitFilterInput {
  and: [CadastralUnitFilterInput!]
  or: [CadastralUnitFilterInput!]
  address: IAddressFilterInput
  income: CadastralUnitIncomeFilterInput
  coordinates: ListCadastralCoordinatesFilterTypeFilterInput
  managementSubjectName: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  status: NullableOfCadastralUnitStatusOperationFilterInput
  type: NullableOfEstateUnitTypeOperationFilterInput
  estateUnit: EstateUnitFilterInput
  addressId: IntOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  deletionDate: DateTimeOperationFilterInput
  lastRelevantChangeDate: DateTimeOperationFilterInput
  historyTags: ListUuidOperationFilterInput
  isCadastralRegistrationInProgress: BooleanOperationFilterInput
  isAncillaryUnit: BooleanOperationFilterInput
  unavailabilities: ListFilterInputTypeOfCadastralUnavailabilityFilterInput
  expenses: ListFilterInputTypeOfCadastralExpensesFilterInput
  taxPayments: ListFilterInputTypeOfAssetTaxCalculationFilterInput
  cadastralNotes: CustomStringFilterInput
  fiscalNotes: CustomStringFilterInput
  consortiumNotes: CustomStringFilterInput
  inspection: CadastralUnitInspectionFilterInput
  id: IntOperationFilterInput
}

input CadastralUnitIncomeFilterInput {
  and: [CadastralUnitIncomeFilterInput!]
  or: [CadastralUnitIncomeFilterInput!]
  macroCategory: CustomStringFilterInput
  microCategory: CustomStringFilterInput
  metric: NullableOfIncomeMetricOperationFilterInput
  metricAmount: DecimalOperationFilterInput
  metricRentedAmount: DecimalOperationFilterInput
  registeredSurface: DecimalOperationFilterInput
  type: NullableOfIncomeTypeOperationFilterInput
  cadastralAmount: DecimalOperationFilterInput
  farmAmount: DecimalOperationFilterInput
  landAmount: DecimalOperationFilterInput
  marketValue: DecimalOperationFilterInput
}

input CadastralUnitIncomeInput {
  macroCategory: String
  microCategory: String
  cadastralCategoryId: Int
  cadastralLandCategoryId: Int
  metric: IncomeMetric
  metricAmount: Decimal
  metricRentedAmount: Decimal
  registeredSurface: Decimal
  type: IncomeType
  cadastralAmount: Decimal
  farmAmount: Decimal
  landAmount: Decimal
  marketValue: Decimal
}

input CadastralUnitIncomeSortInput {
  cadastralCategory: CadastralCategorySortInput
  cadastralLandCategory: CadastralLandCategorySortInput
  macroCategory: SortEnumType
  microCategory: SortEnumType
  metric: SortEnumType
  metricAmount: SortEnumType
  metricRentedAmount: SortEnumType
  registeredSurface: SortEnumType
  type: SortEnumType
  cadastralAmount: SortEnumType
  farmAmount: SortEnumType
  landAmount: SortEnumType
  marketValue: SortEnumType
}

input CadastralUnitInput {
  estateUnitId: Int
  internalCode: String
  address: AsstAddressInput!
  type: EstateUnitType
  status: CadastralUnitStatus
  since: Date
  until: Date
  inspection: CadastralUnitInspectionInput
  income: CadastralUnitIncomeInput!
  coordinates: [CadastralCoordinatesInput!]
  expenses: [CadastralExpensesInput!]
  unavailabilities: [CadastralUnavailabilityInput!]
  taxConfig: [CadastralUnitTaxConfigInput!]
  cadastralNotes: String
  fiscalNotes: String
  consortiumNotes: String
  isAncillaryUnit: Boolean!
  isCadastralRegistrationInProgress: Boolean!
}

input CadastralUnitInspectionFilterInput {
  and: [CadastralUnitInspectionFilterInput!]
  or: [CadastralUnitInspectionFilterInput!]
  date: DateOperationFilterInput
  protocolDate: DateOperationFilterInput
  protocolNumber: CustomStringFilterInput
  heading: CustomStringFilterInput
  macroZone: CustomStringFilterInput
  microZone: CustomStringFilterInput
  isHistoricalEstate: BooleanOperationFilterInput
  isDirectRestriction: BooleanOperationFilterInput
}

input CadastralUnitInspectionInput {
  macroZone: String
  microZone: String
  isHistoricalEstate: Boolean!
  isDirectRestriction: Boolean!
  protocolDate: Date
  date: Date
  protocolNumber: String
  heading: String
}

input CadastralUnitInspectionSortInput {
  date: SortEnumType
  protocolDate: SortEnumType
  protocolNumber: SortEnumType
  heading: SortEnumType
  macroZone: SortEnumType
  microZone: SortEnumType
  isHistoricalEstate: SortEnumType
  isDirectRestriction: SortEnumType
}

input CadastralUnitSortInput {
  address: IAddressSortInput
  managementSubjectName: SortEnumType
  internalCode: SortEnumType
  status: SortEnumType
  type: SortEnumType
  estateUnit: EstateUnitSortInput
  addressId: SortEnumType
  since: SortEnumType
  until: SortEnumType
  deletionDate: SortEnumType
  lastRelevantChangeDate: SortEnumType
  isCadastralRegistrationInProgress: SortEnumType
  isAncillaryUnit: SortEnumType
  income: CadastralUnitIncomeSortInput
  cadastralNotes: SortEnumType
  fiscalNotes: SortEnumType
  consortiumNotes: SortEnumType
  inspection: CadastralUnitInspectionSortInput
  id: SortEnumType
}

input CadastralUnitTaxConfigFilterInput {
  and: [CadastralUnitTaxConfigFilterInput!]
  or: [CadastralUnitTaxConfigFilterInput!]
  taxCalculator: UuidOperationFilterInput
  code: CustomStringFilterInput
  isMandatory: BooleanOperationFilterInput
  templateTypeId: UuidOperationFilterInput
  type: CustomFieldTypeOperationFilterInput
  value: CustomStringFilterInput
  id: IntOperationFilterInput
}

input CadastralUnitTaxConfigInput {
  taxCalculatorId: UUID!
  isMandatory: Boolean!
  name: String!
  type: CustomFieldType!
  templateTypeId: UUID!
  value: String
}

input CalendarDayFilterInput {
  and: [CalendarDayFilterInput!]
  or: [CalendarDayFilterInput!]
  dayOfWeek: DayOfWeekOperationFilterInput
  timeRanges: ListFilterInputTypeOfTimeRangeFilterInput
  id: IntOperationFilterInput
}

input CalendarDayInput {
  id: Int
  timeRanges: [TimeRangeInput!]!
}

input CalendarDaySortInput {
  dayOfWeek: SortEnumType
  id: SortEnumType
}

input CalendarFilterInput {
  and: [CalendarFilterInput!]
  or: [CalendarFilterInput!]
  name: CustomStringFilterInput
  timeZoneId: CustomStringFilterInput
  sunday: CalendarDayFilterInput
  monday: CalendarDayFilterInput
  tuesday: CalendarDayFilterInput
  wednesday: CalendarDayFilterInput
  thursday: CalendarDayFilterInput
  friday: CalendarDayFilterInput
  saturday: CalendarDayFilterInput
  holidays: ListFilterInputTypeOfHolidayFilterInput
  id: IntOperationFilterInput
}

input CalendarInput {
  name: String!
  timeZoneId: String!
  sunday: CalendarDayInput
  monday: CalendarDayInput
  tuesday: CalendarDayInput
  wednesday: CalendarDayInput
  thursday: CalendarDayInput
  friday: CalendarDayInput
  saturday: CalendarDayInput
  holidays: [HolidayInput!]!
}

input CalendarSortInput {
  name: SortEnumType
  timeZoneId: SortEnumType
  sunday: CalendarDaySortInput
  monday: CalendarDaySortInput
  tuesday: CalendarDaySortInput
  wednesday: CalendarDaySortInput
  thursday: CalendarDaySortInput
  friday: CalendarDaySortInput
  saturday: CalendarDaySortInput
  id: SortEnumType
}

input CalendarTicketOutputFilterInput {
  and: [CalendarTicketOutputFilterInput!]
  or: [CalendarTicketOutputFilterInput!]
  supplierSubjectName: CustomStringFilterInput
  id: IntOperationFilterInput
  mainType: TicketMainTypeOperationFilterInput
  requestDateTime: DateTimeOperationFilterInput
  dueDate: DateOperationFilterInput
  internalCode: CustomStringFilterInput
  workOrderReference: CustomStringFilterInput
  description: CustomStringFilterInput
  masterStatus: NullableOfTicketMasterStatusOperationFilterInput
  supplierSubjectId: IntOperationFilterInput
  requestor: CustomStringFilterInput
  isExcludedFromMaintenanceContract: BooleanOperationFilterInput
}

input CatalogueCategoryFilterInput {
  and: [CatalogueCategoryFilterInput!]
  or: [CatalogueCategoryFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  subCategories: ListFilterInputTypeOfCatalogueSubCategoryFilterInput
  catalogueTypes: ListFilterInputTypeOfCatalogueTypeFilterInput
  id: IntOperationFilterInput
}

input CatalogueCategoryInput {
  name: String
  internalCode: String!
  subCategories: [CatalogueSubCategoryInput!]!
}

input CatalogueCategorySortInput {
  name: SortEnumType
  internalCode: SortEnumType
  id: SortEnumType
}

input CatalogueDocumentsCategoryOutputSortInput {
  guid: SortEnumType
  categoryName: SortEnumType
}

input CatalogueDocumentsFlatOutputFilterInput {
  and: [CatalogueDocumentsFlatOutputFilterInput!]
  or: [CatalogueDocumentsFlatOutputFilterInput!]
  catalogueItemInternalCode: CustomStringFilterInput
  estateInternalCode: CustomStringFilterInput
  catalogueTypeName: CustomStringFilterInput
  categoryName: CustomStringFilterInput
  subCategoryName: CustomStringFilterInput
  contentCategoryGroup: CustomStringFilterInput
  document: DocumentFilterInput
}

input CatalogueDocumentsOutputSortInput {
  guid: SortEnumType
  estateInternalCode: SortEnumType
}

input CatalogueIdInput {
  estateId: Int!
  catalogueTypeId: Int!
}

input CatalogueItemFieldFilterInput {
  and: [CatalogueItemFieldFilterInput!]
  or: [CatalogueItemFieldFilterInput!]
  name: CustomStringFilterInput
  isMandatory: BooleanOperationFilterInput
  templateTypeId: UuidOperationFilterInput
  type: CustomFieldTypeOperationFilterInput
  value: CustomStringFilterInput
}

input CatalogueItemFieldInput {
  name: String
  isMandatory: Boolean!
  templateTypeId: UUID!
  type: CustomFieldType!
  value: String
}

input CatalogueItemFilterInput {
  and: [CatalogueItemFilterInput!]
  or: [CatalogueItemFilterInput!]
  estate: EstateFilterInput
  catalogueType: CatalogueTypeFilterInput
  internalCode: CustomStringFilterInput
  status: EstateStatusOperationFilterInput
  activationDate: DateOperationFilterInput
  lastMaintenanceDate: DateOperationFilterInput
  decommissioningDate: DateOperationFilterInput
  fields: ListFilterInputTypeOfCatalogueItemFieldFilterInput
  id: IntOperationFilterInput
}

input CatalogueItemInput {
  id: Int
  estateId: Int!
  catalogueTypeId: Int!
  internalCode: String!
  status: EstateStatus!
  activationDate: Date!
  lastMaintenanceDate: Date!
  decommissioningDate: Date
  fields: [CatalogueItemFieldInput!]!
}

input CatalogueItemSortInput {
  estate: EstateSortInput
  catalogueType: CatalogueTypeSortInput
  internalCode: SortEnumType
  status: SortEnumType
  activationDate: SortEnumType
  lastMaintenanceDate: SortEnumType
  decommissioningDate: SortEnumType
  id: SortEnumType
}

input CatalogueOutputFilterInput {
  and: [CatalogueOutputFilterInput!]
  or: [CatalogueOutputFilterInput!]
  catalogueTypeCount: IntOperationFilterInput
  CatalogueCategory: CustomStringFilterInput
  CatalogueSubCategory: CustomStringFilterInput
  CatalogueType: CustomStringFilterInput
  EstateInternalCode: CustomStringFilterInput
  estateId: IntOperationFilterInput
  estateInternalCode: CustomStringFilterInput
  catalogueTypeId: IntOperationFilterInput
  catalogueCategory: CustomStringFilterInput
  catalogueSubCategory: CustomStringFilterInput
  catalogueType: CustomStringFilterInput
}

input CatalogueOutputSortInput {
  estateId: SortEnumType
  estateInternalCode: SortEnumType
  catalogueTypeId: SortEnumType
  catalogueCategory: SortEnumType
  catalogueSubCategory: SortEnumType
  catalogueType: SortEnumType
  catalogueTypeCount: SortEnumType
}

input CatalogueSubCategoryFilterInput {
  and: [CatalogueSubCategoryFilterInput!]
  or: [CatalogueSubCategoryFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  category: CatalogueCategoryFilterInput
  catalogueTypes: ListFilterInputTypeOfCatalogueTypeFilterInput
  id: IntOperationFilterInput
}

input CatalogueSubCategoryInput {
  id: Int
  name: String
  internalCode: String!
}

input CatalogueSubCategorySortInput {
  name: SortEnumType
  internalCode: SortEnumType
  category: CatalogueCategorySortInput
  id: SortEnumType
}

input CatalogueTypeActivityFilterInput {
  and: [CatalogueTypeActivityFilterInput!]
  or: [CatalogueTypeActivityFilterInput!]
  name: CustomStringFilterInput
  activityType: CatalogueTypeActivityTypeOperationFilterInput
  isMandatoryByLaw: BooleanOperationFilterInput
  type: CatalogueTypeFilterInput
  id: IntOperationFilterInput
}

input CatalogueTypeActivityInput {
  id: Int
  name: String
  activityType: CatalogueTypeActivityType!
  isMandatoryByLaw: Boolean!
}

input CatalogueTypeActivityTypeOperationFilterInput {
  eq: CatalogueTypeActivityType
  neq: CatalogueTypeActivityType
  in: [CatalogueTypeActivityType!]
  nin: [CatalogueTypeActivityType!]
}

input CatalogueTypeFieldFilterInput {
  and: [CatalogueTypeFieldFilterInput!]
  or: [CatalogueTypeFieldFilterInput!]
  name: CustomStringFilterInput
  isMandatory: BooleanOperationFilterInput
  id: UuidOperationFilterInput
  type: CustomFieldTypeOperationFilterInput
  validValues: ListCustomStringFilterInput
}

input CatalogueTypeFieldInput {
  id: UUID
  name: String
  isMandatory: Boolean!
  type: CustomFieldType!
  validValues: [String!]
}

input CatalogueTypeFilterInput {
  and: [CatalogueTypeFilterInput!]
  or: [CatalogueTypeFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  notes: CustomStringFilterInput
  category: CatalogueCategoryFilterInput
  subCategory: CatalogueSubCategoryFilterInput
  items: ListFilterInputTypeOfCatalogueItemFilterInput
  activities: ListFilterInputTypeOfCatalogueTypeActivityFilterInput
  fields: ListListFilterInputTypeOfCatalogueTypeFieldFilterInput
  usageTypes: ListFilterInputTypeOfEstateUsageTypeFilterInput
  id: IntOperationFilterInput
}

input CatalogueTypeInput {
  name: String
  internalCode: String!
  categoryId: Int!
  subCategoryId: Int
  notes: String
  usageTypeIds: [Int!]!
  activities: [CatalogueTypeActivityInput!]!
  fields: [[CatalogueTypeFieldInput!]!]
}

input CatalogueTypeSortInput {
  name: SortEnumType
  internalCode: SortEnumType
  notes: SortEnumType
  category: CatalogueCategorySortInput
  subCategory: CatalogueSubCategorySortInput
  id: SortEnumType
}

input CategoryFunctionFlagsInput {
  isNone: Boolean
  isOfficer: Boolean
  isAgreementParty: Boolean
  isSupplier: Boolean
  isEmployee: Boolean
  isLandlord: Boolean
  isTenant: Boolean
  isCompanyGroup: Boolean
  isHeir: Boolean
  isBuildingAdministrator: Boolean
}

input CategoryFunctionOperationFilterInput {
  eq: CategoryFunctionFlagsInput
  neq: CategoryFunctionFlagsInput
  in: [CategoryFunctionFlagsInput!]
  nin: [CategoryFunctionFlagsInput!]
}

input ChangePasswordInput {
  username: String!
  currentPassword: String!
  newPassword: String!
}

input CityFilterInput {
  and: [CityFilterInput!]
  or: [CityFilterInput!]
  name: CustomStringFilterInput
  name2: CustomStringFilterInput
  name3: CustomStringFilterInput
  countryISO: CustomStringFilterInput
  countryName: CustomStringFilterInput
  countyName: CustomStringFilterInput
  regionName: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
}

input CityInput {
  name: String!
  countryISO: String!
}

input CitySortInput {
  id: SortEnumType
  name: SortEnumType
  regionName: SortEnumType
  countyName: SortEnumType
  countryName: SortEnumType
}

input CommEstateUnitFilterInput {
  and: [CommEstateUnitFilterInput!]
  or: [CommEstateUnitFilterInput!]
  communicationIndex: IntOperationFilterInput
  estateUnitId: IntOperationFilterInput
  estateUnitType: CustomStringFilterInput
  cityId: IntOperationFilterInput
  cadastreType: CustomStringFilterInput
  estatePartition: CustomStringFilterInput
  cadastralCoordinateLevel1: CustomStringFilterInput
  cadastralCoordinateLevel2: CustomStringFilterInput
  cadastralCoordinateLevel3: CustomStringFilterInput
  cadastralCoordinateLevel4: CustomStringFilterInput
  cadastralCategory: CustomStringFilterInput
  cadastralAddressToponymy: CustomStringFilterInput
  cadastralAddressNumbering: CustomStringFilterInput
  cadastralIncome: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input CommunicationTypeOperationFilterInput {
  eq: CommunicationType
  neq: CommunicationType
  in: [CommunicationType!]
  nin: [CommunicationType!]
}

input CompanyGroupInput {
  id: Int
  groupRelation: CompanyGroup!
  notes: String
}

input ComplexTicketConditionFilterInput {
  and: [ComplexTicketConditionFilterInput!]
  or: [ComplexTicketConditionFilterInput!]
  operator: BooleanOperatorOperationFilterInput
  internalConditions: ListFilterInputTypeOfTicketConditionFilterInput
  id: IntOperationFilterInput
}

input ComplexTicketConditionInput {
  operator: BooleanOperator!
  internalConditions: [OneOfTicketConditionInput!]!
  id: Int
}

input ComplexTicketConditionSortInput {
  operator: SortEnumType
  id: SortEnumType
}

input ConfigFilterInput {
  and: [ConfigFilterInput!]
  or: [ConfigFilterInput!]
  function: ConfigFunctionOperationFilterInput
  name: CustomStringFilterInput
  value: CustomStringFilterInput
  lastUpdated: DateTimeOperationFilterInput
  id: IntOperationFilterInput
}

input ConfigFunctionOperationFilterInput {
  eq: ConfigFunction
  neq: ConfigFunction
  in: [ConfigFunction!]
  nin: [ConfigFunction!]
}

input ConfigSortInput {
  function: SortEnumType
  name: SortEnumType
  value: SortEnumType
  lastUpdated: SortEnumType
  id: SortEnumType
}

input ConfirmTemporaryRegistryCommunicationGroupInput {
  managementSubjectId: Int!
  date: Date!
  requestingSubjectLegalRepresentativeId: Int!
  debtBankAccountId: Int!
}

input ConfirmedRegistryCommunicationGroupIdInput {
  managementSubjectId: Int!
  isActiveContract: Boolean!
  communicationType: CommunicationType!
  endDate: Date
  date: Date!
  requestingSubjectLegalRepresentativeId: Int!
  debtBankAccountId: Int!
}

input ContactFilterInput {
  and: [ContactFilterInput!]
  or: [ContactFilterInput!]
  contactType: ContactTypeOperationFilterInput
  contactInfo: CustomStringFilterInput
  contactInfoType: ContactInfoTypeOperationFilterInput
  notes: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
  deletionDate: DateTimeOperationFilterInput
  id: IntOperationFilterInput
}

input ContactInfoTypeOperationFilterInput {
  eq: ContactInfoType
  neq: ContactInfoType
  in: [ContactInfoType!]
  nin: [ContactInfoType!]
}

input ContactInput {
  id: Int
  contactType: ContactType!
  contactInfoType: ContactInfoType!
  contactInfo: String
  notes: String
}

input ContactTypeOperationFilterInput {
  eq: ContactType
  neq: ContactType
  in: [ContactType!]
  nin: [ContactType!]
}

input ContentCategoryOperationFilterInput {
  eq: ContentCategory
  neq: ContentCategory
  in: [ContentCategory!]
  nin: [ContentCategory!]
}

input ContentTypeOperationFilterInput {
  eq: ContentType
  neq: ContentType
  in: [ContentType!]
  nin: [ContentType!]
}

input ContractDeathVariationNewCounterpartInput {
  subjectId: Int!
  contractSharePercent: Float!
  type: CounterpartType
  takeoverDate: Date!
  isMainCounterpart: Boolean!
}

input ContractDocumentsFlatOutputFilterInput {
  and: [ContractDocumentsFlatOutputFilterInput!]
  or: [ContractDocumentsFlatOutputFilterInput!]
  contractInternalCode: CustomStringFilterInput
  contentCategoryGroup: CustomStringFilterInput
  document: DocumentFilterInput
}

input ContractDocumentsOutputSortInput {
  guid: SortEnumType
  contractInternalCode: SortEnumType
}

input ContractFilterInput {
  and: [ContractFilterInput!]
  or: [ContractFilterInput!]
  isSublocated: BooleanOperationFilterInput
  daysToExpiration: IntOperationFilterInput
  counterpartName: CustomStringFilterInput
  managementSubjectName: CustomStringFilterInput
  landlordName: CustomStringFilterInput
  tenantName: CustomStringFilterInput
  anyLocatedUnitInternalCodeContains: String
  status: EntryStatusOperationFilterInput
  internalCode: CustomStringFilterInput
  externalCode: CustomStringFilterInput
  previousCode: CustomStringFilterInput
  managementSubjectId: IntOperationFilterInput
  type: ContractTypeFilterInput
  reason: ReasonOperationFilterInput
  agreementDate: DateOperationFilterInput
  effectStartDate: DateOperationFilterInput
  lastRenewalStartDate: DateOperationFilterInput
  firstTermDurationMonths: IntOperationFilterInput
  secondTermDurationMonths: IntOperationFilterInput
  firstTermExpirationDate: DateOperationFilterInput
  secondTermExpirationDate: DateOperationFilterInput
  anytimeTerminationWarningMonths: IntOperationFilterInput
  nonRenewalWarningMonths: IntOperationFilterInput
  billingStartDate: DateOperationFilterInput
  billingAfterTerm: BooleanOperationFilterInput
  recoverBillsAfterSuspension: BooleanOperationFilterInput
  billingAlignedToCalendarYear: BooleanOperationFilterInput
  billingAppliesBaseFee: BooleanOperationFilterInput
  billingBaseFee: DecimalOperationFilterInput
  billingBaseFeeBillItemType: BillItemTypeFilterInput
  billingVATRateType: NullableOfVATRateTypeOperationFilterInput
  billingPeriod: NullableOfBillingPeriodOperationFilterInput
  billingWithSplitPayment: BooleanOperationFilterInput
  billingWithStampTax: NullableOfAutomaticBooleanOperationFilterInput
  notes: CustomStringFilterInput
  billingNotes: CustomStringFilterInput
  releaseReason: NullableOfReleaseReasonOperationFilterInput
  releaseDate: DateOperationFilterInput
  isReleased: BooleanOperationFilterInput
  terminationDate: DateOperationFilterInput
  terminator: NullableOfContractTerminatorOperationFilterInput
  isOccupiedWithoutRight: BooleanOperationFilterInput
  billingEndDate: DateOperationFilterInput
  sublocatedContract: ContractFilterInput
  registrationTaxData: RegistrationTaxFilterInput
  revaluationData: RevaluationFilterInput
  subLocations: ListFilterInputTypeOfContractFilterInput
  locatedUnits: ListFilterInputTypeOfLocatedUnitFilterInput
  counterparts: ListFilterInputTypeOfCounterpartFilterInput
  transactors: ListFilterInputTypeOfTransactorFilterInput
  securityDeposits: ListFilterInputTypeOfSecurityDepositFilterInput
  takeovers: ListFilterInputTypeOfTakeoverFilterInput
  registrationPayments: ListFilterInputTypeOfRegistrationPaymentFilterInput
  billingPauses: ListFilterInputTypeOfBillingPauseFilterInput
  ratePlans: ListFilterInputTypeOfRatePlanFilterInput
  revaluationHistories: ListFilterInputTypeOfRevaluationHistoryFilterInput
  oneshotAdditions: ListFilterInputTypeOfOneshotAdditionFilterInput
  recurringAdditions: ListFilterInputTypeOfRecurringAdditionFilterInput
  bills: ListFilterInputTypeOfBillFilterInput
  registryCommunications: ListFilterInputTypeOfRegistryCommunicationFilterInput
  durationYears: IntOperationFilterInput
  id: IntOperationFilterInput
}

input ContractInput {
  id: Int
  status: EntryStatus!
  internalCode: String!
  externalCode: String
  previousCode: String
  managementSubjectId: Int!
  typeId: Int!
  reason: Reason!
  agreementDate: Date!
  effectStartDate: Date!
  lastRenewalStartDate: Date!
  firstTermDurationMonths: Int
  secondTermDurationMonths: Int
  firstTermExpirationDate: Date
  secondTermExpirationDate: Date
  anytimeTerminationWarningMonths: Int
  nonRenewalWarningMonths: Int
  billingStartDate: Date!
  billingAfterTerm: Boolean!
  recoverBillsAfterSuspension: Boolean!
  billingAlignedToCalendarYear: Boolean!
  billingAppliesBaseFee: Boolean!
  billingBaseFee: Decimal
  billingBaseFeeBillItemTypeId: Int
  billingVATRateType: VATRateType
  billingPeriod: BillingPeriod
  billingWithSplitPayment: Boolean!
  billingWithStampTax: AutomaticBoolean
  notes: String
  billingNotes: String
  terminationDate: Date
  terminator: ContractTerminator
  billingEndDate: Date
  sublocatedContract: SublocatedContractInput
  registrationTaxData: RegistrationTaxInput
  revaluationData: RevaluationInput
  locatedUnits: [LocatedUnitInput!]!
  counterparts: [CounterpartInput!]!
  transactors: [TransactorInput!]!
  securityDeposits: [SecurityDepositInput!]!
  ratePlans: [RatePlanInput!]!
  oneshotAdditions: [OneshotAdditionInput!]!
  recurringAdditions: [RecurringAdditionInput!]!
}

input ContractNoDateNewCounterpartInput {
  subjectId: Int!
  isMainCounterpart: Boolean!
  contractSharePercent: Float!
  type: CounterpartType
}

input ContractNoDateUpdateCounterpartInput {
  id: Int!
  isMainCounterpart: Boolean!
  contractSharePercent: Float!
}

input ContractSortInput {
  isSublocated: SortEnumType
  daysToExpiration: SortEnumType
  counterpartName: SortEnumType
  managementSubjectName: SortEnumType
  landlordName: SortEnumType
  tenantName: SortEnumType
  status: SortEnumType
  internalCode: SortEnumType
  externalCode: SortEnumType
  previousCode: SortEnumType
  managementSubjectId: SortEnumType
  type: ContractTypeSortInput
  reason: SortEnumType
  agreementDate: SortEnumType
  effectStartDate: SortEnumType
  lastRenewalStartDate: SortEnumType
  firstTermDurationMonths: SortEnumType
  secondTermDurationMonths: SortEnumType
  firstTermExpirationDate: SortEnumType
  secondTermExpirationDate: SortEnumType
  anytimeTerminationWarningMonths: SortEnumType
  nonRenewalWarningMonths: SortEnumType
  billingStartDate: SortEnumType
  billingAfterTerm: SortEnumType
  recoverBillsAfterSuspension: SortEnumType
  billingAlignedToCalendarYear: SortEnumType
  billingAppliesBaseFee: SortEnumType
  billingBaseFee: SortEnumType
  billingBaseFeeBillItemType: BillItemTypeSortInput
  billingVATRateType: SortEnumType
  billingPeriod: SortEnumType
  billingWithSplitPayment: SortEnumType
  billingWithStampTax: SortEnumType
  notes: SortEnumType
  billingNotes: SortEnumType
  releaseReason: SortEnumType
  releaseDate: SortEnumType
  isReleased: SortEnumType
  terminationDate: SortEnumType
  terminator: SortEnumType
  isOccupiedWithoutRight: SortEnumType
  billingEndDate: SortEnumType
  sublocatedContract: ContractSortInput
  registrationTaxData: RegistrationTaxSortInput
  revaluationData: RevaluationSortInput
  durationYears: SortEnumType
  id: SortEnumType
}

input ContractTemplateFilterInput {
  and: [ContractTemplateFilterInput!]
  or: [ContractTemplateFilterInput!]
  description: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  contractType: FcltContractTypeFilterInput
  catalogueTypeIds: ListIntOperationFilterInput
  slas: ListFilterInputTypeOfSLAFilterInput
  penalties: ListFilterInputTypeOfPenaltyFilterInput
  id: IntOperationFilterInput
}

input ContractTemplateInput {
  description: String!
  internalCode: String!
  contractTypeId: Int!
  catalogueTypeIds: [Int!]!
  slaIds: [Int!]!
  penaltyIds: [Int!]!
}

input ContractTemplateSortInput {
  description: SortEnumType
  internalCode: SortEnumType
  contractType: FcltContractTypeSortInput
  id: SortEnumType
}

input ContractTypeFilterInput {
  and: [ContractTypeFilterInput!]
  or: [ContractTypeFilterInput!]
  usageTypeName: CustomStringFilterInput
  description: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  isActive: BooleanOperationFilterInput
  isStampTax: BooleanOperationFilterInput
  isRegistrationTax: BooleanOperationFilterInput
  nature: AssetNatureOperationFilterInput
  usageTypeId: IntOperationFilterInput
  isRentChargeApplicable: BooleanOperationFilterInput
  isAbsoluteRevaluation: BooleanOperationFilterInput
  isRevaluationApplicable: BooleanOperationFilterInput
  revaluationRatePercent: DecimalOperationFilterInput
  revaluationCalculationMonth: IntOperationFilterInput
  revaluationIndexMonth: IntOperationFilterInput
  registrationTaxPercent: FloatOperationFilterInput
  registrationTaxTenantPercent: FloatOperationFilterInput
  registrationTaxIncomeType: NullableOfRegistrationTaxIncomeTypeRLIOperationFilterInput
  id: IntOperationFilterInput
}

input ContractTypeInput {
  id: Int
  description: String
  internalCode: String!
  isActive: Boolean!
  isStampTax: Boolean!
  isRegistrationTax: Boolean!
  nature: AssetNature!
  usageTypeId: Int!
  isRentChargeApplicable: Boolean!
  isAbsoluteRevaluation: Boolean!
  isRevaluationApplicable: Boolean!
  revaluationRatePercent: Decimal
  revaluationCalculationMonth: Int
  revaluationIndexMonth: Int
  registrationTaxPercent: Float
  registrationTaxTenantPercent: Float
  registrationTaxIncomeType: RegistrationTaxIncomeTypeRLI
}

input ContractTypeSortInput {
  usageTypeName: SortEnumType
  description: SortEnumType
  internalCode: SortEnumType
  isActive: SortEnumType
  isStampTax: SortEnumType
  isRegistrationTax: SortEnumType
  nature: SortEnumType
  usageTypeId: SortEnumType
  isRentChargeApplicable: SortEnumType
  isAbsoluteRevaluation: SortEnumType
  isRevaluationApplicable: SortEnumType
  revaluationRatePercent: SortEnumType
  revaluationCalculationMonth: SortEnumType
  revaluationIndexMonth: SortEnumType
  registrationTaxPercent: SortEnumType
  registrationTaxTenantPercent: SortEnumType
  registrationTaxIncomeType: SortEnumType
  id: SortEnumType
}

input ContractVariationNewCounterpartInput {
  subjectId: Int!
  contractSharePercent: Float!
  type: CounterpartType
  since: Date!
  isMainCounterpart: Boolean!
}

input ContractVariationUpdatedCounterpartInput {
  id: Int!
  contractSharePercent: Float!
  type: CounterpartType
  isMainCounterpart: Boolean!
}

input CoordinateTypeOperationFilterInput {
  eq: CoordinateType
  neq: CoordinateType
  in: [CoordinateType!]
  nin: [CoordinateType!]
}

input CostBaseFactorOperationFilterInput {
  eq: CostBaseFactor
  neq: CostBaseFactor
  in: [CostBaseFactor!]
  nin: [CostBaseFactor!]
}

input CostChargeAnalysisFiltersInput {
  estateIds: [Int!]
  utilityTypesIds: [Int!]
  utilityContractCodes: [String!]
  cityName: String
  countyName: String
  toponymy: String
}

input CostChargeConsumptionFilterInput {
  and: [CostChargeConsumptionFilterInput!]
  or: [CostChargeConsumptionFilterInput!]
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  values: ListFilterInputTypeOfReadingValueFilterInput
}

input CostChargeConsumptionInput {
  since: Date!
  until: Date!
  values: [ReadingValueInput!]!
}

input CostChargeConsumptionSortInput {
  since: SortEnumType
  until: SortEnumType
}

input CostChargeFieldFilterInput {
  and: [CostChargeFieldFilterInput!]
  or: [CostChargeFieldFilterInput!]
  name: CustomStringFilterInput
  isMandatory: BooleanOperationFilterInput
  templateTypeId: UuidOperationFilterInput
  type: CustomFieldTypeOperationFilterInput
  value: CustomStringFilterInput
}

input CostChargeFieldInput {
  name: String!
  isMandatory: Boolean!
  templateTypeId: UUID!
  type: CustomFieldType!
  value: String
}

input CostChargeFilterInput {
  and: [CostChargeFilterInput!]
  or: [CostChargeFilterInput!]
  service: UtilityServiceFilterInput
  estateInternalCode: CustomStringFilterInput
  periodStart: DateOperationFilterInput
  periodEnd: DateOperationFilterInput
  totalAmount: DecimalOperationFilterInput
  referenceDate: DateOperationFilterInput
  dueDate: DateOperationFilterInput
  invoiceNumber: CustomStringFilterInput
  totalVATAmount: DecimalOperationFilterInput
  invoicedConsumptionAmount: DecimalOperationFilterInput
  actualConsumption: CostChargeConsumptionFilterInput
  expectedConsumption: CostChargeConsumptionFilterInput
  fields: ListFilterInputTypeOfCostChargeFieldFilterInput
  id: IntOperationFilterInput
}

input CostChargeInput {
  serviceId: Int!
  periodStart: Date!
  periodEnd: Date!
  totalAmount: Decimal!
  referenceDate: Date!
  dueDate: Date!
  invoiceNumber: String!
  totalVATAmount: Decimal!
  invoicedConsumptionAmount: Decimal!
  actualConsumption: CostChargeConsumptionInput
  expectedConsumption: CostChargeConsumptionInput
  fields: [CostChargeFieldInput!]!
}

input CostChargeSortInput {
  service: UtilityServiceSortInput
  periodStart: SortEnumType
  periodEnd: SortEnumType
  totalAmount: SortEnumType
  referenceDate: SortEnumType
  dueDate: SortEnumType
  invoiceNumber: SortEnumType
  totalVATAmount: SortEnumType
  invoicedConsumptionAmount: SortEnumType
  actualConsumption: CostChargeConsumptionSortInput
  expectedConsumption: CostChargeConsumptionSortInput
  id: SortEnumType
}

input CounterpartFilterInput {
  and: [CounterpartFilterInput!]
  or: [CounterpartFilterInput!]
  subjectId: IntOperationFilterInput
  isMainCounterpart: BooleanOperationFilterInput
  contractSharePercent: FloatOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  type: CounterpartTypeOperationFilterInput
  id: IntOperationFilterInput
}

input CounterpartInput {
  id: Int
  subjectId: Int!
  isMainCounterpart: Boolean!
  contractSharePercent: Float!
  since: Date!
  until: Date
  type: CounterpartType!
}

input CounterpartTypeOperationFilterInput {
  eq: CounterpartType
  neq: CounterpartType
  in: [CounterpartType!]
  nin: [CounterpartType!]
}

input CraftFilterInput {
  and: [CraftFilterInput!]
  or: [CraftFilterInput!]
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  ordering: IntOperationFilterInput
  id: IntOperationFilterInput
}

input CraftInput {
  name: String!
  internalCode: String!
  ordering: Int!
}

input CraftSortInput {
  internalCode: SortEnumType
  name: SortEnumType
  ordering: SortEnumType
  id: SortEnumType
}

input CustomFieldTypeOperationFilterInput {
  eq: CustomFieldType
  neq: CustomFieldType
  in: [CustomFieldType!]
  nin: [CustomFieldType!]
}

input CustomStringFilterInput {
  and: [CustomStringFilterInput!]
  or: [CustomStringFilterInput!]
  eq: String
  contains: String
  ncontains: String
  startsWith: String
}

input DateOperationFilterInput {
  eq: Date
  neq: Date
  in: [Date]
  nin: [Date]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DayOfWeekOperationFilterInput {
  eq: DayOfWeek
  neq: DayOfWeek
  in: [DayOfWeek!]
  nin: [DayOfWeek!]
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input DocumentFilterInput {
  and: [DocumentFilterInput!]
  or: [DocumentFilterInput!]
  contentCategoryGroupIn: [String]
  contentContains: String
  name: CustomStringFilterInput
  fileName: CustomStringFilterInput
  contentType: ContentTypeOperationFilterInput
  contentCategory: ContentCategoryOperationFilterInput
  creationDate: DateTimeOperationFilterInput
  since: DateTimeOperationFilterInput
  until: DateTimeOperationFilterInput
  mimeType: CustomStringFilterInput
  folder: CustomStringFilterInput
  tenantId: CustomStringFilterInput
  managementSubjectIds: ListCustomStringFilterInput
  entityId: CustomStringFilterInput
  estateId: CustomStringFilterInput
  cmisId: CustomStringFilterInput
  uploaderName: CustomStringFilterInput
  issuer: CustomStringFilterInput
  issuerCode: CustomStringFilterInput
  issueDate: DateOperationFilterInput
  protocolNumber: CustomStringFilterInput
  notes: CustomStringFilterInput
  id: IntOperationFilterInput
}

input DocumentInput {
  cmisId: String
  name: String!
  fileName: String
  contentType: ContentType!
  contentCategory: ContentCategory!
  since: DateTime
  until: DateTime
  mimeType: String
  issuer: String
  issuerCode: String
  issueDate: Date
  protocolNumber: String
  content: Upload
  notes: String
}

input DocumentRowFilterInput {
  and: [DocumentRowFilterInput!]
  or: [DocumentRowFilterInput!]
  document: DocumentFilterInput
  estateId: IntOperationFilterInput
  estateInternalCode: CustomStringFilterInput
  estateUnitInternalCode: CustomStringFilterInput
  catalogueItemInternalCode: CustomStringFilterInput
  catalogueTypeId: IntOperationFilterInput
  catalogueTypeInternalCode: CustomStringFilterInput
  catalogueCategory: CustomStringFilterInput
  catalogueSubCategory: CustomStringFilterInput
  subjectInternalCode: CustomStringFilterInput
  contractInternalCode: CustomStringFilterInput
  isContractActive: BooleanOperationFilterInput
  isContractSublocated: BooleanOperationFilterInput
  ticketId: IntOperationFilterInput
  ticketInternalCode: CustomStringFilterInput
  isTicketExcludedFromMaintenanceContract: BooleanOperationFilterInput
  fcltContractId: IntOperationFilterInput
  fcltContractInternalCode: CustomStringFilterInput
}

input DocumentRowSortInput {
  document: DocumentSortInput
  estateId: SortEnumType
  estateInternalCode: SortEnumType
  estateUnitInternalCode: SortEnumType
  catalogueItemInternalCode: SortEnumType
  catalogueTypeId: SortEnumType
  catalogueTypeInternalCode: SortEnumType
  catalogueCategory: SortEnumType
  catalogueSubCategory: SortEnumType
  subjectInternalCode: SortEnumType
  contractInternalCode: SortEnumType
  isContractActive: SortEnumType
  isContractSublocated: SortEnumType
  ticketId: SortEnumType
  ticketInternalCode: SortEnumType
  isTicketExcludedFromMaintenanceContract: SortEnumType
  fcltContractId: SortEnumType
  fcltContractInternalCode: SortEnumType
}

input DocumentSortInput {
  name: SortEnumType
  fileName: SortEnumType
  contentType: SortEnumType
  contentCategory: SortEnumType
  contentCategoryGroup: SortEnumType
  creationDate: SortEnumType
  since: SortEnumType
  until: SortEnumType
  mimeType: SortEnumType
  folder: SortEnumType
  tenantId: SortEnumType
  entityId: SortEnumType
  estateId: SortEnumType
  cmisId: SortEnumType
  uploaderName: SortEnumType
  issuer: SortEnumType
  issuerCode: SortEnumType
  issueDate: SortEnumType
  protocolNumber: SortEnumType
  notes: SortEnumType
  entityIntId: SortEnumType
  id: SortEnumType
}

input DocumentsPerContentCategoryGroupOutputSortInput {
  guid: SortEnumType
  contentCategoryGroup: SortEnumType
}

input EntryStatusOperationFilterInput {
  eq: EntryStatus
  neq: EntryStatus
  in: [EntryStatus!]
  nin: [EntryStatus!]
}

input EstateDocumentsFlatOutputFilterInput {
  and: [EstateDocumentsFlatOutputFilterInput!]
  or: [EstateDocumentsFlatOutputFilterInput!]
  estateInternalCode: CustomStringFilterInput
  contentCategoryGroup: CustomStringFilterInput
  document: DocumentFilterInput
}

input EstateDocumentsOutputSortInput {
  guid: SortEnumType
  estateInternalCode: SortEnumType
}

input EstateFilterInput {
  and: [EstateFilterInput!]
  or: [EstateFilterInput!]
  addresses: ListAddressFilterTypeFilterInput
  stairs: ListStairFilterTypeFilterInput
  managementSubjectName: CustomStringFilterInput
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  externalCode: CustomStringFilterInput
  status: EstateStatusOperationFilterInput
  type: EstateTypeOperationFilterInput
  ownership: EstateOwnershipOperationFilterInput
  mainUsageType: EstateMainUsageTypeFilterInput
  usageType: EstateUsageTypeFilterInput
  surfaceAreaSqM: IntOperationFilterInput
  buildYear: IntOperationFilterInput
  decommissioningDate: DateOperationFilterInput
  managementSubjectId: IntOperationFilterInput
  managementOrgUnitId: IntOperationFilterInput
  notes: CustomStringFilterInput
  deletionDate: DateTimeOperationFilterInput
  totalMarketValue: EstateTotalMarketValueFilterInput
  floors: ListFilterInputTypeOfFloorFilterInput
  valuations: ListFilterInputTypeOfValuationFilterInput
  estateUnits: ListFilterInputTypeOfEstateUnitFilterInput
  refactorings: ListFilterInputTypeOfRefactoringFilterInput
  catalogueItems: ListFilterInputTypeOfCatalogueItemFilterInput
  id: IntOperationFilterInput
}

input EstateInput {
  name: String
  internalCode: String!
  externalCode: String
  notes: String
  status: EstateStatus!
  type: EstateType!
  ownership: EstateOwnership!
  managementSubjectId: Int!
  managementOrgUnitId: Int
  mainUsageTypeId: Int!
  usageTypeId: Int!
  surfaceAreaSqM: Int
  buildYear: Int
  decommissioningDate: Date
  addresses: [AsstAddressInput!]!
  stairs: [StairInput!]!
  floors: [FloorInput!]!
  marketValue: EstateTotalMarketValueInput
  valuations: [EstateValuationInput!]!
  refactorings: [RefactoringInput!]!
}

input EstateMainUsageTypeFilterInput {
  and: [EstateMainUsageTypeFilterInput!]
  or: [EstateMainUsageTypeFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  ordering: IntOperationFilterInput
  id: IntOperationFilterInput
}

input EstateMainUsageTypeInput {
  name: String!
  internalCode: String!
  ordering: Int!
}

input EstateMainUsageTypeSortInput {
  name: SortEnumType
  internalCode: SortEnumType
  ordering: SortEnumType
  id: SortEnumType
}

input EstateMarketValueFilterInput {
  and: [EstateMarketValueFilterInput!]
  or: [EstateMarketValueFilterInput!]
  type: EstateMarketValueTypeOperationFilterInput
  value: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input EstateMarketValueInput {
  id: Int
  type: EstateMarketValueType!
  value: Decimal!
}

input EstateMarketValueTypeOperationFilterInput {
  eq: EstateMarketValueType
  neq: EstateMarketValueType
  in: [EstateMarketValueType!]
  nin: [EstateMarketValueType!]
}

input EstateOwnershipOperationFilterInput {
  eq: EstateOwnership
  neq: EstateOwnership
  in: [EstateOwnership!]
  nin: [EstateOwnership!]
}

input EstateSortInput {
  primaryAddress: IAddressSortInput
  managementSubjectName: SortEnumType
  name: SortEnumType
  internalCode: SortEnumType
  externalCode: SortEnumType
  status: SortEnumType
  type: SortEnumType
  ownership: SortEnumType
  mainUsageType: EstateMainUsageTypeSortInput
  usageType: EstateUsageTypeSortInput
  surfaceAreaSqM: SortEnumType
  buildYear: SortEnumType
  decommissioningDate: SortEnumType
  managementSubjectId: SortEnumType
  managementOrgUnitId: SortEnumType
  notes: SortEnumType
  deletionDate: SortEnumType
  totalMarketValue: EstateTotalMarketValueSortInput
  id: SortEnumType
}

input EstateStatusOperationFilterInput {
  eq: EstateStatus
  neq: EstateStatus
  in: [EstateStatus!]
  nin: [EstateStatus!]
}

input EstateSubUnitFilterInput {
  and: [EstateSubUnitFilterInput!]
  or: [EstateSubUnitFilterInput!]
  orgUnitName: CustomStringFilterInput
  occupantSubjectName: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  occupantType: NullableOfOccupantTypeOperationFilterInput
  occupantId: IntOperationFilterInput
  usageType: EstateUsageTypeFilterInput
  estateUnit: EstateUnitFilterInput
  orgUnitId: IntOperationFilterInput
  notes: CustomStringFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  deletionDate: DateTimeOperationFilterInput
  surfaceSqM: IntOperationFilterInput
  occupancyPercent: IntOperationFilterInput
  id: IntOperationFilterInput
}

input EstateSubUnitInput {
  id: Int
  internalCode: String!
  estateUnitId: Int!
  occupantId: Int
  occupancyPercent: Int
  surfaceSqM: Int
  orgUnitId: Int
  occupantType: OccupantType
  usageTypeId: Int
  since: Date
  until: Date
  note: String
}

input EstateSubUnitSortInput {
  orgUnitName: SortEnumType
  occupantSubjectName: SortEnumType
  internalCode: SortEnumType
  occupantType: SortEnumType
  occupantId: SortEnumType
  usageType: EstateUsageTypeSortInput
  estateUnit: EstateUnitSortInput
  orgUnitId: SortEnumType
  notes: SortEnumType
  since: SortEnumType
  until: SortEnumType
  deletionDate: SortEnumType
  surfaceSqM: SortEnumType
  occupancyPercent: SortEnumType
  id: SortEnumType
}

input EstateTotalMarketValueCoefficientFilterInput {
  and: [EstateTotalMarketValueCoefficientFilterInput!]
  or: [EstateTotalMarketValueCoefficientFilterInput!]
  type: EstateTotalMarketValueCoefficientTypeOperationFilterInput
  value: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input EstateTotalMarketValueCoefficientInput {
  id: Int
  type: EstateTotalMarketValueCoefficientType!
  value: Decimal!
}

input EstateTotalMarketValueCoefficientTypeOperationFilterInput {
  eq: EstateTotalMarketValueCoefficientType
  neq: EstateTotalMarketValueCoefficientType
  in: [EstateTotalMarketValueCoefficientType!]
  nin: [EstateTotalMarketValueCoefficientType!]
}

input EstateTotalMarketValueFilterInput {
  and: [EstateTotalMarketValueFilterInput!]
  or: [EstateTotalMarketValueFilterInput!]
  totalSurfaceAreaSqM: IntOperationFilterInput
  notes: CustomStringFilterInput
  coefficients: ListFilterInputTypeOfEstateTotalMarketValueCoefficientFilterInput
  marketValues: ListFilterInputTypeOfEstateMarketValueFilterInput
}

input EstateTotalMarketValueInput {
  totalSurfaceAreaSqM: Int!
  notes: String
  coefficients: [EstateTotalMarketValueCoefficientInput!]!
  marketValues: [EstateMarketValueInput!]!
}

input EstateTotalMarketValueSortInput {
  totalSurfaceAreaSqM: SortEnumType
  notes: SortEnumType
}

input EstateTypeOperationFilterInput {
  eq: EstateType
  neq: EstateType
  in: [EstateType!]
  nin: [EstateType!]
}

input EstateUnitDocumentsFlatOutputFilterInput {
  and: [EstateUnitDocumentsFlatOutputFilterInput!]
  or: [EstateUnitDocumentsFlatOutputFilterInput!]
  estateUnitInternalCode: CustomStringFilterInput
  contentCategoryGroup: CustomStringFilterInput
  document: DocumentFilterInput
}

input EstateUnitDocumentsOutputSortInput {
  guid: SortEnumType
  estateUnitInternalCode: SortEnumType
}

input EstateUnitFilterInput {
  and: [EstateUnitFilterInput!]
  or: [EstateUnitFilterInput!]
  stair: StairFilterInput
  address: IAddressFilterInput
  netSurface: IntOperationFilterInput
  grossSurface: IntOperationFilterInput
  currentCadastralUnit: CadastralUnitFilterInput
  managementSubjectName: CustomStringFilterInput
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  externalCode: CustomStringFilterInput
  notes: CustomStringFilterInput
  type: EstateUnitTypeOperationFilterInput
  status: EstateUnitStatusOperationFilterInput
  usageType: EstateUsageTypeFilterInput
  ownershipType: EstateUnitOwnershipTypeOperationFilterInput
  ownershipStartDate: DateOperationFilterInput
  ownershipEndDate: DateOperationFilterInput
  ownershipPercent: FloatOperationFilterInput
  sharedArea: BooleanOperationFilterInput
  procurementActId: IntOperationFilterInput
  managementSubjectId: IntOperationFilterInput
  costCentreId: IntOperationFilterInput
  disusedDate: DateOperationFilterInput
  deletionDate: DateTimeOperationFilterInput
  lastRelevantChangeDate: DateTimeOperationFilterInput
  estate: EstateFilterInput
  subNumbering: CustomStringFilterInput
  officialActId: IntOperationFilterInput
  historyTags: ListUuidOperationFilterInput
  estateSubUnits: ListFilterInputTypeOfEstateSubUnitFilterInput
  repossessions: ListFilterInputTypeOfRepossessionFilterInput
  unitExpenses: ListFilterInputTypeOfUnitExpensesFilterInput
  surfaces: ListFilterInputTypeOfEstateUnitSurfaceFilterInput
  floors: ListFilterInputTypeOfFloorFilterInput
  lastRepossession: RepossessionFilterInput
  cadastralUnits: ListFilterInputTypeOfCadastralUnitFilterInput
  id: IntOperationFilterInput
}

input EstateUnitFloorFilterInput {
  and: [EstateUnitFloorFilterInput!]
  or: [EstateUnitFloorFilterInput!]
  estateUnit: EstateUnitFilterInput
  estateUnitId: IntOperationFilterInput
  floor: FloorFilterInput
  floorId: IntOperationFilterInput
  id: IntOperationFilterInput
}

input EstateUnitGroupFilterInput {
  and: [EstateUnitGroupFilterInput!]
  or: [EstateUnitGroupFilterInput!]
  managementSubjectName: CustomStringFilterInput
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  managementSubjectId: IntOperationFilterInput
  estateUnitIds: ListIntOperationFilterInput
  id: IntOperationFilterInput
}

input EstateUnitGroupInput {
  name: String!
  internalCode: String!
  managementSubjectId: Int!
  estateUnitIds: [Int!]!
}

input EstateUnitGroupSortInput {
  managementSubjectName: SortEnumType
  name: SortEnumType
  internalCode: SortEnumType
  managementSubjectId: SortEnumType
  id: SortEnumType
}

input EstateUnitInput {
  estateId: Int!
  name: String
  internalCode: String!
  externalCode: String
  addressId: Int!
  subNumbering: String
  stairId: Int
  floorIds: [Int!]!
  type: EstateUnitType!
  status: EstateUnitStatus!
  usageTypeId: Int!
  ownershipStartDate: Date!
  ownershipEndDate: Date
  ownershipType: EstateUnitOwnershipType!
  ownershipPercent: Float
  sharedArea: Boolean!
  notes: String
  officialAct: EstateUnitOfficialActInput
  disusedDate: Date
  surfaces: [EstateUnitSurfaceSummaryInput!]
  repossession: EstateUnitRepossessionInput
  cadastralUnit: CadastralUnitInput
}

input EstateUnitOfficialActInput {
  protocolNumber: String!
  repertoireNumber: String
  registrationNumber: String
  registrationDate: Date
  writtenAtCity: String
  transcriptionNumber: String
  transcriptionDate: Date
  transcriptionCity: String
  notaryActDate: Date!
  collectionNumber: String
  notaryName: String
}

input EstateUnitOwnershipTypeOperationFilterInput {
  eq: EstateUnitOwnershipType
  neq: EstateUnitOwnershipType
  in: [EstateUnitOwnershipType!]
  nin: [EstateUnitOwnershipType!]
}

input EstateUnitRepossessionInput {
  eventId: Int
  notes: String
  eventDate: Date
  eventType: RepossessionType
  eventReason: RepossessionReason
  unitStatus: UnitCondition
  isAssignable: Boolean
  isKeysReturned: Boolean
  isWithValuables: Boolean
}

input EstateUnitSortInput {
  address: IAddressSortInput
  netSurface: SortEnumType
  grossSurface: SortEnumType
  currentCadastralUnit: CadastralUnitSortInput
  managementSubjectName: SortEnumType
  name: SortEnumType
  internalCode: SortEnumType
  externalCode: SortEnumType
  notes: SortEnumType
  type: SortEnumType
  status: SortEnumType
  usageType: EstateUsageTypeSortInput
  ownershipType: SortEnumType
  ownershipStartDate: SortEnumType
  ownershipEndDate: SortEnumType
  ownershipPercent: SortEnumType
  sharedArea: SortEnumType
  procurementActId: SortEnumType
  managementSubjectId: SortEnumType
  costCentreId: SortEnumType
  disusedDate: SortEnumType
  deletionDate: SortEnumType
  lastRelevantChangeDate: SortEnumType
  estate: EstateSortInput
  subNumbering: SortEnumType
  stair: StairSortInput
  officialActId: SortEnumType
  lastRepossession: RepossessionSortInput
  id: SortEnumType
}

input EstateUnitStatusOperationFilterInput {
  eq: EstateUnitStatus
  neq: EstateUnitStatus
  in: [EstateUnitStatus!]
  nin: [EstateUnitStatus!]
}

input EstateUnitSurfaceFilterInput {
  and: [EstateUnitSurfaceFilterInput!]
  or: [EstateUnitSurfaceFilterInput!]
  estateUnit: EstateUnitFilterInput
  metric: SurfaceMeasurementMetricOperationFilterInput
  surfaceSqMTotal: IntOperationFilterInput
  surfaceSqMCommonArea: IntOperationFilterInput
  surfaceSqMSideArea: IntOperationFilterInput
  floorId: IntOperationFilterInput
  floor: FloorFilterInput
  functionAreaId: IntOperationFilterInput
  functionArea: FunctionAreaFilterInput
  id: IntOperationFilterInput
}

input EstateUnitSurfaceSummaryFloorInput {
  surfaceId: Int
  surfaceSqMTotal: Int
  surfaceSqMCommonArea: Int
  surfaceSqMSideArea: Int
  floor: EstateUnitSurfaceSummaryFloorSummaryInput!
  functionAreas: [EstateUnitSurfaceSummaryFunctionAreaInput!]!
}

input EstateUnitSurfaceSummaryFloorSummaryInput {
  id: Int
  name: String
  position: Float!
  templateReference: UUID
}

input EstateUnitSurfaceSummaryFunctionAreaInput {
  surfaceId: Int
  surfaceSqMTotal: Int
  surfaceSqMCommonArea: Int
  surfaceSqMSideArea: Int
  functionArea: EstateUnitSurfaceSummaryFunctionAreaSummaryInput!
}

input EstateUnitSurfaceSummaryFunctionAreaSummaryInput {
  id: Int
  name: String
  surfaceType: SurfaceType!
}

input EstateUnitSurfaceSummaryInput {
  surfaceId: Int
  metric: SurfaceMeasurementMetric!
  surfaceSqMTotal: Int
  surfaceSqMCommonArea: Int
  surfaceSqMSideArea: Int
  floors: [EstateUnitSurfaceSummaryFloorInput!]!
}

input EstateUnitTypeDistributionFilterInput {
  and: [EstateUnitTypeDistributionFilterInput!]
  or: [EstateUnitTypeDistributionFilterInput!]
  percentage: FloatOperationFilterInput
  estateUnitType: EstateUnitTypeOperationFilterInput
}

input EstateUnitTypeDistributionSortInput {
  percentage: SortEnumType
  estateUnitType: SortEnumType
}

input EstateUnitTypeOperationFilterInput {
  eq: EstateUnitType
  neq: EstateUnitType
  in: [EstateUnitType!]
  nin: [EstateUnitType!]
}

input EstateUsageTypeFilterInput {
  and: [EstateUsageTypeFilterInput!]
  or: [EstateUsageTypeFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  ordering: IntOperationFilterInput
  isForEstate: BooleanOperationFilterInput
  isForEstateUnit: BooleanOperationFilterInput
  isForEstateSubUnit: BooleanOperationFilterInput
  isForContracts: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input EstateUsageTypeInput {
  name: String!
  internalCode: String!
  isForEstate: Boolean!
  isForEstateUnit: Boolean!
  isForEstateSubUnit: Boolean!
  isForContracts: Boolean!
  ordering: Int!
}

input EstateUsageTypeSortInput {
  name: SortEnumType
  internalCode: SortEnumType
  ordering: SortEnumType
  isForEstate: SortEnumType
  isForEstateUnit: SortEnumType
  isForEstateSubUnit: SortEnumType
  isForContracts: SortEnumType
  id: SortEnumType
}

input EstateValuationInput {
  id: Int
  year: Int!
  rba: Decimal
  ias: Decimal
  mortgageAmount: Decimal
  transferYear: Int
  revampOperations: Int
}

input FcltContractDocumentsFlatOutputFilterInput {
  and: [FcltContractDocumentsFlatOutputFilterInput!]
  or: [FcltContractDocumentsFlatOutputFilterInput!]
  fcltContractInternalCode: CustomStringFilterInput
  contentCategoryGroup: CustomStringFilterInput
  document: DocumentFilterInput
}

input FcltContractDocumentsOutputSortInput {
  guid: SortEnumType
  fcltContractInternalCode: SortEnumType
}

input FcltContractFilterInput {
  and: [FcltContractFilterInput!]
  or: [FcltContractFilterInput!]
  providerSubjectName: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  externalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  type: FcltContractTypeFilterInput
  originalTemplate: ContractTemplateFilterInput
  entryStatus: EntryStatusOperationFilterInput
  providerSubjectId: IntOperationFilterInput
  agreementDate: DateOperationFilterInput
  effectiveDate: DateOperationFilterInput
  expirationDate: DateOperationFilterInput
  cancellationNoticeDaysCount: IntOperationFilterInput
  renewalNoticeDaysCount: IntOperationFilterInput
  maximumRenewalDaysCount: IntOperationFilterInput
  frameworkAgreements: ListFilterInputTypeOfFrameworkAgreementFilterInput
  originalEstateUnitGroup: EstateUnitGroupFilterInput
  estateUnitIds: ListIntOperationFilterInput
  catalogueTypeIds: ListIntOperationFilterInput
  slas: ListFilterInputTypeOfSLAFilterInput
  penalties: ListFilterInputTypeOfPenaltyFilterInput
  ticketChecklists: ListFilterInputTypeOfTicketChecklistFilterInput
  billingInfo: BillingInfoFilterInput
  priceLists: ListFilterInputTypeOfPriceListFilterInput
  termExtensions: ListFilterInputTypeOfTermExtensionFilterInput
  id: IntOperationFilterInput
}

input FcltContractInput {
  internalCode: String!
  externalCode: String
  description: String!
  typeId: Int!
  originalTemplateId: Int
  entryStatus: EntryStatus!
  providerSubjectId: Int!
  agreementDate: Date
  effectiveDate: Date!
  expirationDate: Date!
  cancellationNoticeDaysCount: Int
  renewalNoticeDaysCount: Int
  maximumRenewalDaysCount: Int
  frameworkAgreements: [FrameworkAgreementInput!]!
  originalEstateUnitGroupId: Int
  estateUnitIds: [Int!]!
  catalogueTypeIds: [Int!]!
  slas: [SLAInput!]!
  penalties: [PenaltyInput!]!
  billingInfo: BillingInfoInput!
  priceListIds: [Int!]!
  termExtensions: [TermExtensionInput!]!
}

input FcltContractSortInput {
  providerSubjectName: SortEnumType
  internalCode: SortEnumType
  externalCode: SortEnumType
  description: SortEnumType
  type: FcltContractTypeSortInput
  originalTemplate: ContractTemplateSortInput
  entryStatus: SortEnumType
  providerSubjectId: SortEnumType
  agreementDate: SortEnumType
  effectiveDate: SortEnumType
  expirationDate: SortEnumType
  cancellationNoticeDaysCount: SortEnumType
  renewalNoticeDaysCount: SortEnumType
  maximumRenewalDaysCount: SortEnumType
  originalEstateUnitGroup: EstateUnitGroupSortInput
  billingInfo: BillingInfoSortInput
  id: SortEnumType
}

input FcltContractTypeFilterInput {
  and: [FcltContractTypeFilterInput!]
  or: [FcltContractTypeFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  ordering: IntOperationFilterInput
  contracts: ListFilterInputTypeOfFcltContractFilterInput
  contractTemplates: ListFilterInputTypeOfContractTemplateFilterInput
  id: IntOperationFilterInput
}

input FcltContractTypeInput {
  name: String!
  internalCode: String!
  ordering: Int!
}

input FcltContractTypeSortInput {
  name: SortEnumType
  internalCode: SortEnumType
  ordering: SortEnumType
  id: SortEnumType
}

input FilteredCityNameFilterInput {
  and: [FilteredCityNameFilterInput!]
  or: [FilteredCityNameFilterInput!]
  value: CustomStringFilterInput
}

input FilteredCityNameSortInput {
  value: SortEnumType
}

input FilteredCountyNameFilterInput {
  and: [FilteredCountyNameFilterInput!]
  or: [FilteredCountyNameFilterInput!]
  value: CustomStringFilterInput
}

input FilteredCountyNameSortInput {
  value: SortEnumType
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input FloorFilterInput {
  and: [FloorFilterInput!]
  or: [FloorFilterInput!]
  name: CustomStringFilterInput
  position: FloatOperationFilterInput
  templateReference: UuidOperationFilterInput
  estateUnits: ListFilterInputTypeOfEstateUnitFilterInput
  estateUnitFloor: ListFilterInputTypeOfEstateUnitFloorFilterInput
  id: IntOperationFilterInput
}

input FloorInput {
  id: Int
  name: String!
  position: Float!
  templateReference: UUID!
}

input FloorTemplateFilterInput {
  and: [FloorTemplateFilterInput!]
  or: [FloorTemplateFilterInput!]
  name: CustomStringFilterInput
  position: FloatOperationFilterInput
  guid: UuidOperationFilterInput
  id: IntOperationFilterInput
}

input FloorTemplateInput {
  name: String!
  position: Float!
}

input FloorTemplateSortInput {
  name: SortEnumType
  position: SortEnumType
  guid: SortEnumType
  id: SortEnumType
}

input FrameworkAgreementFilterInput {
  and: [FrameworkAgreementFilterInput!]
  or: [FrameworkAgreementFilterInput!]
  externalCode: CustomStringFilterInput
  notes: CustomStringFilterInput
  id: IntOperationFilterInput
}

input FrameworkAgreementInput {
  id: Int
  externalCode: String!
  notes: String
}

input FunctionAreaFilterInput {
  and: [FunctionAreaFilterInput!]
  or: [FunctionAreaFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  surfaceType: SurfaceTypeOperationFilterInput
  id: IntOperationFilterInput
}

input FunctionAreaInput {
  name: String
  internalCode: String!
  surfaceType: SurfaceType!
}

input FunctionAreaSortInput {
  name: SortEnumType
  internalCode: SortEnumType
  surfaceType: SortEnumType
  id: SortEnumType
}

input GeoJSONLineStringInput {
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType
  "The \"coordinates\" field is an array of two or more positions."
  coordinates: [Position]
  "The coordinate reference system integer identifier"
  crs: Int
}

input GeoJSONMultiLineStringInput {
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType
  "The \"coordinates\" field is an array of LineString coordinate arrays."
  coordinates: [[Position]]
  "The coordinate reference system integer identifier"
  crs: Int
}

input GeoJSONMultiPointInput {
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType
  "The \"coordinates\" field is an array of positions."
  coordinates: [Position]
  "The coordinate reference system integer identifier"
  crs: Int
}

input GeoJSONMultiPolygonInput {
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType
  "The \"coordinates\" field is an array of Polygon coordinate arrays."
  coordinates: Coordinates
  "The coordinate reference system integer identifier"
  crs: Int
}

input GeoJSONPointInput {
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType
  "The \"coordinates\" field is a single position."
  coordinates: Position
  "The coordinate reference system integer identifier"
  crs: Int
}

input GeoJSONPolygonInput {
  "The geometry type of the GeoJson object"
  type: GeoJSONGeometryType
  "The \"coordinates\" field MUST be an array of linear ring coordinate arrays. For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface."
  coordinates: [[Position]]
  "The coordinate reference system integer identifier"
  crs: Int
}

input GeographicalOrgUnitInput {
  geographicalCities: [Int!]
  entryStatus: EntryStatus
  orgUnitId: Int
  name: String
  internalCode: String!
  externalCode: String
  parentSubjectId: Int!
  parentOrgUnitId: Int
  notes: String
  closureDate: DateTime
  contacts: [ContactInput!]
}

input GroupFilterInput {
  and: [GroupFilterInput!]
  or: [GroupFilterInput!]
  id: IntOperationFilterInput
  name: CustomStringFilterInput
  description: CustomStringFilterInput
}

input GroupSortInput {
  id: SortEnumType
  name: SortEnumType
  description: SortEnumType
}

input HeirInput {
  id: Int!
  since: Date
  notes: String
}

input HolidayFilterInput {
  and: [HolidayFilterInput!]
  or: [HolidayFilterInput!]
  name: CustomStringFilterInput
  date: DateOperationFilterInput
  periodicity: HolidayPeriodicityOperationFilterInput
  id: IntOperationFilterInput
}

input HolidayInput {
  id: Int
  name: String!
  date: Date!
  periodicity: HolidayPeriodicity!
}

input HolidayPeriodicityOperationFilterInput {
  eq: HolidayPeriodicity
  neq: HolidayPeriodicity
  in: [HolidayPeriodicity!]
  nin: [HolidayPeriodicity!]
}

input IAddressFilterInput {
  and: [IAddressFilterInput!]
  or: [IAddressFilterInput!]
  cityName: CustomStringFilterInput
  cityReference: UuidOperationFilterInput
  countyName: CustomStringFilterInput
  countyReference: UuidOperationFilterInput
  regionName: CustomStringFilterInput
  regionReference: UuidOperationFilterInput
  countryName: CustomStringFilterInput
  countryISO: CustomStringFilterInput
  toponymy: CustomStringFilterInput
  numbering: CustomStringFilterInput
  localPostCode: CustomStringFilterInput
  notes: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
}

input IAddressSortInput {
  cityName: SortEnumType
  cityReference: SortEnumType
  countyName: SortEnumType
  countyReference: SortEnumType
  regionName: SortEnumType
  regionReference: SortEnumType
  countryName: SortEnumType
  countryISO: SortEnumType
  toponymy: SortEnumType
  numbering: SortEnumType
  localPostCode: SortEnumType
  notes: SortEnumType
  creationDate: SortEnumType
}

input IContactFilterInput {
  and: [IContactFilterInput!]
  or: [IContactFilterInput!]
  contactType: ContactTypeOperationFilterInput
  contactInfo: CustomStringFilterInput
  contactInfoType: ContactInfoTypeOperationFilterInput
  notes: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
}

input ITaxConfigMainTableRowFilterInput {
  and: [ITaxConfigMainTableRowFilterInput!]
  or: [ITaxConfigMainTableRowFilterInput!]
  groupingName: CustomStringFilterInput
  id: IntOperationFilterInput
  year: IntOperationFilterInput
}

input ITaxConfigMainTableRowSortInput {
  groupingName: SortEnumType
  id: SortEnumType
  year: SortEnumType
}

input ITaxConfigSubTableRowFilterInput {
  and: [ITaxConfigSubTableRowFilterInput!]
  or: [ITaxConfigSubTableRowFilterInput!]
  id: IntOperationFilterInput
}

input ITaxConfigSubTableRowSortInput {
  id: SortEnumType
}

input InstallmentPaymentInput {
  termInstallmentIds: [Int!]!
  billItemTypeId: Int!
  amount: Decimal!
  billDate: Date!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input InterestRateFilterInput {
  and: [InterestRateFilterInput!]
  or: [InterestRateFilterInput!]
  rate: DecimalOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  countryISO3: CustomStringFilterInput
  id: IntOperationFilterInput
}

input InterestRateInput {
  id: Int
  rate: Decimal!
  since: Date!
  until: Date
}

input InterestRateSortInput {
  rate: SortEnumType
  since: SortEnumType
  until: SortEnumType
  countryISO3: SortEnumType
  id: SortEnumType
}

input InterventionTypeFilterInput {
  and: [InterventionTypeFilterInput!]
  or: [InterventionTypeFilterInput!]
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  id: IntOperationFilterInput
}

input InterventionTypeInput {
  name: String!
  internalCode: String!
}

input InterventionTypeSortInput {
  internalCode: SortEnumType
  name: SortEnumType
  id: SortEnumType
}

input KeyValuePairOfInt32AndBooleanInput {
  key: Int!
  value: Boolean!
}

input LegalSubjectInput {
  legalSubjectType: LegalSubjectType!
  ownerManagementSubjectIds: [Int!]!
  fullName: String!
  shorthandDescription: String
  baseCountryTaxIdCode: String
  additionalTaxIdCode: String
  businessStart: Date
  shareCapital: Decimal
  companiesHouseIdCode: String
  additionalGovIdCode: String
  interGroupSignature: String
  bankingId1: String
  bankingId2: String
  companyGroup: CompanyGroupInput
  id: Int
  entryStatus: EntryStatus!
  internalCode: String!
  externalSourceCode: String
  customPersonType: Int
  customSubjectStatus: Int
  closureDate: Date
  addresses: [AddressInput!]!
  contacts: [ContactInput!]!
  bankAccounts: [BankAccountInput!]!
  taxStatuses: [TaxStatusInput!]!
  officers: [OfficerInput!]!
  categoriesIds: [Int!]!
}

input LegalSubjectTypeOperationFilterInput {
  eq: LegalSubjectType
  neq: LegalSubjectType
  in: [LegalSubjectType!]
  nin: [LegalSubjectType!]
}

input ListAddressFilterTypeFilterInput {
  all: IAddressFilterInput
  none: IAddressFilterInput
  some: IAddressFilterInput
  any: Boolean
}

input ListAssetTaxDetailEstateItemFilterTypeFilterInput {
  all: AssetTaxDetailEstateItemFilterInput
  none: AssetTaxDetailEstateItemFilterInput
  some: AssetTaxDetailEstateItemFilterInput
  any: Boolean
}

input ListAssetTaxDetailEstateUnitItemFilterTypeFilterInput {
  all: AssetTaxDetailEstateUnitItemFilterInput
  none: AssetTaxDetailEstateUnitItemFilterInput
  some: AssetTaxDetailEstateUnitItemFilterInput
  any: Boolean
}

input ListCadastralCoordinatesFilterTypeFilterInput {
  all: CadastralCoordinatesFilterInput
  none: CadastralCoordinatesFilterInput
  some: CadastralCoordinatesFilterInput
  any: Boolean
}

input ListContactFilterTypeFilterInput {
  all: IContactFilterInput
  none: IContactFilterInput
  some: IContactFilterInput
  any: Boolean
}

input ListCustomStringFilterInput {
  all: CustomStringFilterInput
  none: CustomStringFilterInput
  some: CustomStringFilterInput
  any: Boolean
}

input ListDayOfWeekOperationFilterInput {
  all: DayOfWeekOperationFilterInput
  none: DayOfWeekOperationFilterInput
  some: DayOfWeekOperationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAdministrationTermFilterInput {
  all: AdministrationTermFilterInput
  none: AdministrationTermFilterInput
  some: AdministrationTermFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArticlePricePeriodFilterInput {
  all: ArticlePricePeriodFilterInput
  none: ArticlePricePeriodFilterInput
  some: ArticlePricePeriodFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAssetTaxCalculationFilterInput {
  all: AssetTaxCalculationFilterInput
  none: AssetTaxCalculationFilterInput
  some: AssetTaxCalculationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAssetTaxPaymentFilterInput {
  all: AssetTaxPaymentFilterInput
  none: AssetTaxPaymentFilterInput
  some: AssetTaxPaymentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBankAccountFilterInput {
  all: BankAccountFilterInput
  none: BankAccountFilterInput
  some: BankAccountFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBillFilterInput {
  all: BillFilterInput
  none: BillFilterInput
  some: BillFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBillRowFilterInput {
  all: BillRowFilterInput
  none: BillRowFilterInput
  some: BillRowFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBillingPauseFilterInput {
  all: BillingPauseFilterInput
  none: BillingPauseFilterInput
  some: BillingPauseFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCadastralExpensesFilterInput {
  all: CadastralExpensesFilterInput
  none: CadastralExpensesFilterInput
  some: CadastralExpensesFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCadastralUnavailabilityFilterInput {
  all: CadastralUnavailabilityFilterInput
  none: CadastralUnavailabilityFilterInput
  some: CadastralUnavailabilityFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCadastralUnitFilterInput {
  all: CadastralUnitFilterInput
  none: CadastralUnitFilterInput
  some: CadastralUnitFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCatalogueItemFieldFilterInput {
  all: CatalogueItemFieldFilterInput
  none: CatalogueItemFieldFilterInput
  some: CatalogueItemFieldFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCatalogueItemFilterInput {
  all: CatalogueItemFilterInput
  none: CatalogueItemFilterInput
  some: CatalogueItemFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCatalogueSubCategoryFilterInput {
  all: CatalogueSubCategoryFilterInput
  none: CatalogueSubCategoryFilterInput
  some: CatalogueSubCategoryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCatalogueTypeActivityFilterInput {
  all: CatalogueTypeActivityFilterInput
  none: CatalogueTypeActivityFilterInput
  some: CatalogueTypeActivityFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCatalogueTypeFieldFilterInput {
  all: CatalogueTypeFieldFilterInput
  none: CatalogueTypeFieldFilterInput
  some: CatalogueTypeFieldFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCatalogueTypeFilterInput {
  all: CatalogueTypeFilterInput
  none: CatalogueTypeFilterInput
  some: CatalogueTypeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCommEstateUnitFilterInput {
  all: CommEstateUnitFilterInput
  none: CommEstateUnitFilterInput
  some: CommEstateUnitFilterInput
  any: Boolean
}

input ListFilterInputTypeOfContactFilterInput {
  all: ContactFilterInput
  none: ContactFilterInput
  some: ContactFilterInput
  any: Boolean
}

input ListFilterInputTypeOfContractFilterInput {
  all: ContractFilterInput
  none: ContractFilterInput
  some: ContractFilterInput
  any: Boolean
}

input ListFilterInputTypeOfContractTemplateFilterInput {
  all: ContractTemplateFilterInput
  none: ContractTemplateFilterInput
  some: ContractTemplateFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCostChargeFieldFilterInput {
  all: CostChargeFieldFilterInput
  none: CostChargeFieldFilterInput
  some: CostChargeFieldFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCounterpartFilterInput {
  all: CounterpartFilterInput
  none: CounterpartFilterInput
  some: CounterpartFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEstateMarketValueFilterInput {
  all: EstateMarketValueFilterInput
  none: EstateMarketValueFilterInput
  some: EstateMarketValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEstateSubUnitFilterInput {
  all: EstateSubUnitFilterInput
  none: EstateSubUnitFilterInput
  some: EstateSubUnitFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEstateTotalMarketValueCoefficientFilterInput {
  all: EstateTotalMarketValueCoefficientFilterInput
  none: EstateTotalMarketValueCoefficientFilterInput
  some: EstateTotalMarketValueCoefficientFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEstateUnitFilterInput {
  all: EstateUnitFilterInput
  none: EstateUnitFilterInput
  some: EstateUnitFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEstateUnitFloorFilterInput {
  all: EstateUnitFloorFilterInput
  none: EstateUnitFloorFilterInput
  some: EstateUnitFloorFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEstateUnitSurfaceFilterInput {
  all: EstateUnitSurfaceFilterInput
  none: EstateUnitSurfaceFilterInput
  some: EstateUnitSurfaceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEstateUsageTypeFilterInput {
  all: EstateUsageTypeFilterInput
  none: EstateUsageTypeFilterInput
  some: EstateUsageTypeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFcltContractFilterInput {
  all: FcltContractFilterInput
  none: FcltContractFilterInput
  some: FcltContractFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFloorFilterInput {
  all: FloorFilterInput
  none: FloorFilterInput
  some: FloorFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFrameworkAgreementFilterInput {
  all: FrameworkAgreementFilterInput
  none: FrameworkAgreementFilterInput
  some: FrameworkAgreementFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHolidayFilterInput {
  all: HolidayFilterInput
  none: HolidayFilterInput
  some: HolidayFilterInput
  any: Boolean
}

input ListFilterInputTypeOfLocatedUnitFilterInput {
  all: LocatedUnitFilterInput
  none: LocatedUnitFilterInput
  some: LocatedUnitFilterInput
  any: Boolean
}

input ListFilterInputTypeOfOneshotAdditionFilterInput {
  all: OneshotAdditionFilterInput
  none: OneshotAdditionFilterInput
  some: OneshotAdditionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfOperationFilterInput {
  all: OperationFilterInput
  none: OperationFilterInput
  some: OperationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPenaltyFilterInput {
  all: PenaltyFilterInput
  none: PenaltyFilterInput
  some: PenaltyFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPenaltyValueFilterInput {
  all: PenaltyValueFilterInput
  none: PenaltyValueFilterInput
  some: PenaltyValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPerformedActivityFilterInput {
  all: PerformedActivityFilterInput
  none: PerformedActivityFilterInput
  some: PerformedActivityFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPriceListArticleFilterInput {
  all: PriceListArticleFilterInput
  none: PriceListArticleFilterInput
  some: PriceListArticleFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPriceListFilterInput {
  all: PriceListFilterInput
  none: PriceListFilterInput
  some: PriceListFilterInput
  any: Boolean
}

input ListFilterInputTypeOfQuoteArticleFilterInput {
  all: QuoteArticleFilterInput
  none: QuoteArticleFilterInput
  some: QuoteArticleFilterInput
  any: Boolean
}

input ListFilterInputTypeOfQuoteHistoryEntryFilterInput {
  all: QuoteHistoryEntryFilterInput
  none: QuoteHistoryEntryFilterInput
  some: QuoteHistoryEntryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRatePlanFilterInput {
  all: RatePlanFilterInput
  none: RatePlanFilterInput
  some: RatePlanFilterInput
  any: Boolean
}

input ListFilterInputTypeOfReadingValueFilterInput {
  all: ReadingValueFilterInput
  none: ReadingValueFilterInput
  some: ReadingValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRecurringAdditionFilterInput {
  all: RecurringAdditionFilterInput
  none: RecurringAdditionFilterInput
  some: RecurringAdditionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRefactoringFilterInput {
  all: RefactoringFilterInput
  none: RefactoringFilterInput
  some: RefactoringFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRegistrationPaymentFilterInput {
  all: RegistrationPaymentFilterInput
  none: RegistrationPaymentFilterInput
  some: RegistrationPaymentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRegistrationPaymentRowFilterInput {
  all: RegistrationPaymentRowFilterInput
  none: RegistrationPaymentRowFilterInput
  some: RegistrationPaymentRowFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRegistryCommunicationAnomalyFilterInput {
  all: RegistryCommunicationAnomalyFilterInput
  none: RegistryCommunicationAnomalyFilterInput
  some: RegistryCommunicationAnomalyFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRegistryCommunicationFilterInput {
  all: RegistryCommunicationFilterInput
  none: RegistryCommunicationFilterInput
  some: RegistryCommunicationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfReminderFilterInput {
  all: ReminderFilterInput
  none: ReminderFilterInput
  some: ReminderFilterInput
  any: Boolean
}

input ListFilterInputTypeOfReplyFilterInput {
  all: ReplyFilterInput
  none: ReplyFilterInput
  some: ReplyFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRepossessionFilterInput {
  all: RepossessionFilterInput
  none: RepossessionFilterInput
  some: RepossessionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRevaluationHistoryFilterInput {
  all: RevaluationHistoryFilterInput
  none: RevaluationHistoryFilterInput
  some: RevaluationHistoryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSLAFilterInput {
  all: SLAFilterInput
  none: SLAFilterInput
  some: SLAFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSecurityDepositFilterInput {
  all: SecurityDepositFilterInput
  none: SecurityDepositFilterInput
  some: SecurityDepositFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSecurityDepositInterestRowFilterInput {
  all: SecurityDepositInterestRowFilterInput
  none: SecurityDepositInterestRowFilterInput
  some: SecurityDepositInterestRowFilterInput
  any: Boolean
}

input ListFilterInputTypeOfServiceActivityFilterInput {
  all: ServiceActivityFilterInput
  none: ServiceActivityFilterInput
  some: ServiceActivityFilterInput
  any: Boolean
}

input ListFilterInputTypeOfServiceFilterInput {
  all: ServiceFilterInput
  none: ServiceFilterInput
  some: ServiceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfServiceSubCategoryFilterInput {
  all: ServiceSubCategoryFilterInput
  none: ServiceSubCategoryFilterInput
  some: ServiceSubCategoryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSessionFilterInput {
  all: SessionFilterInput
  none: SessionFilterInput
  some: SessionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSubjectCategoryFilterInput {
  all: SubjectCategoryFilterInput
  none: SubjectCategoryFilterInput
  some: SubjectCategoryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTakeoverFilterInput {
  all: TakeoverFilterInput
  none: TakeoverFilterInput
  some: TakeoverFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTaxStatusFilterInput {
  all: TaxStatusFilterInput
  none: TaxStatusFilterInput
  some: TaxStatusFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTermExtensionFilterInput {
  all: TermExtensionFilterInput
  none: TermExtensionFilterInput
  some: TermExtensionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTermInstallmentFilterInput {
  all: TermInstallmentFilterInput
  none: TermInstallmentFilterInput
  some: TermInstallmentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTicketChecklistFilterInput {
  all: TicketChecklistFilterInput
  none: TicketChecklistFilterInput
  some: TicketChecklistFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTicketConditionFilterInput {
  all: TicketConditionFilterInput
  none: TicketConditionFilterInput
  some: TicketConditionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTicketFilterInput {
  all: TicketFilterInput
  none: TicketFilterInput
  some: TicketFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTicketHistoryEntryFilterInput {
  all: TicketHistoryEntryFilterInput
  none: TicketHistoryEntryFilterInput
  some: TicketHistoryEntryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTimeRangeFilterInput {
  all: TimeRangeFilterInput
  none: TimeRangeFilterInput
  some: TimeRangeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTransactorFilterInput {
  all: TransactorFilterInput
  none: TransactorFilterInput
  some: TransactorFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUnitExpensesFilterInput {
  all: UnitExpensesFilterInput
  none: UnitExpensesFilterInput
  some: UnitExpensesFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUtilityChargeFieldFilterInput {
  all: UtilityChargeFieldFilterInput
  none: UtilityChargeFieldFilterInput
  some: UtilityChargeFieldFilterInput
  any: Boolean
}

input ListFilterInputTypeOfValuationFilterInput {
  all: ValuationFilterInput
  none: ValuationFilterInput
  some: ValuationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWidgetConfigFilterInput {
  all: WidgetConfigFilterInput
  none: WidgetConfigFilterInput
  some: WidgetConfigFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWidgetSectionFilterInput {
  all: WidgetSectionFilterInput
  none: WidgetSectionFilterInput
  some: WidgetSectionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWidgetSectionRowFilterInput {
  all: WidgetSectionRowFilterInput
  none: WidgetSectionRowFilterInput
  some: WidgetSectionRowFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWorkerFilterInput {
  all: WorkerFilterInput
  none: WorkerFilterInput
  some: WorkerFilterInput
  any: Boolean
}

input ListIntOperationFilterInput {
  all: IntOperationFilterInput
  none: IntOperationFilterInput
  some: IntOperationFilterInput
  any: Boolean
}

input ListListFilterInputTypeOfCatalogueTypeFieldFilterInput {
  all: ListFilterInputTypeOfCatalogueTypeFieldFilterInput
  none: ListFilterInputTypeOfCatalogueTypeFieldFilterInput
  some: ListFilterInputTypeOfCatalogueTypeFieldFilterInput
  any: Boolean
}

input ListListFilterInputTypeOfUtilityChargeFieldFilterInput {
  all: ListFilterInputTypeOfUtilityChargeFieldFilterInput
  none: ListFilterInputTypeOfUtilityChargeFieldFilterInput
  some: ListFilterInputTypeOfUtilityChargeFieldFilterInput
  any: Boolean
}

input ListOrgUnitFilterTypeFilterInput {
  all: OrgUnitFilterInput
  none: OrgUnitFilterInput
  some: OrgUnitFilterInput
  any: Boolean
}

input ListStairFilterTypeFilterInput {
  all: StairFilterInput
  none: StairFilterInput
  some: StairFilterInput
  any: Boolean
}

input ListSubjectRelationFilterTypeFilterInput {
  all: SubjectRelationFilterInput
  none: SubjectRelationFilterInput
  some: SubjectRelationFilterInput
  any: Boolean
}

input ListUuidOperationFilterInput {
  all: UuidOperationFilterInput
  none: UuidOperationFilterInput
  some: UuidOperationFilterInput
  any: Boolean
}

input LocatedUnitFilterInput {
  and: [LocatedUnitFilterInput!]
  or: [LocatedUnitFilterInput!]
  estateSubUnitId: IntOperationFilterInput
  estateUnitId: IntOperationFilterInput
  isMainUnit: BooleanOperationFilterInput
  isRegistryUpdateEnabled: BooleanOperationFilterInput
  isPartialLocation: BooleanOperationFilterInput
  surfaceSqM: IntOperationFilterInput
  id: IntOperationFilterInput
}

input LocatedUnitInput {
  id: Int
  estateSubUnitId: Int
  estateUnitId: Int
  isMainUnit: Boolean!
  isRegistryUpdateEnabled: Boolean!
  isPartialLocation: Boolean!
  surfaceSqM: Int
}

input LoginInput {
  username: String!
  password: String!
}

input ManagementOrgUnitInput {
  entryStatus: EntryStatus
  orgUnitId: Int
  name: String
  internalCode: String!
  externalCode: String
  parentSubjectId: Int!
  parentOrgUnitId: Int
  notes: String
  closureDate: DateTime
  contacts: [ContactInput!]
}

input ManagementSubjectInput {
  managementCode: String
  fullName: String!
  shorthandDescription: String
  baseCountryTaxIdCode: String
  additionalTaxIdCode: String
  businessStart: Date
  shareCapital: Decimal
  companiesHouseIdCode: String
  additionalGovIdCode: String
  interGroupSignature: String
  bankingId1: String
  bankingId2: String
  companyGroup: CompanyGroupInput
  id: Int
  entryStatus: EntryStatus!
  internalCode: String!
  externalSourceCode: String
  customPersonType: Int
  customSubjectStatus: Int
  closureDate: Date
  addresses: [AddressInput!]!
  contacts: [ContactInput!]!
  bankAccounts: [BankAccountInput!]!
  taxStatuses: [TaxStatusInput!]!
  officers: [OfficerInput!]!
  categoriesIds: [Int!]!
}

input MeteringTypeOperationFilterInput {
  eq: MeteringType
  neq: MeteringType
  in: [MeteringType!]
  nin: [MeteringType!]
}

input NotificationFilterInput {
  and: [NotificationFilterInput!]
  or: [NotificationFilterInput!]
  username: CustomStringFilterInput
  timestamp: DateTimeOperationFilterInput
  status: NotificationStatusOperationFilterInput
  id: IntOperationFilterInput
}

input NotificationSortInput {
  username: SortEnumType
  timestamp: SortEnumType
  status: SortEnumType
  id: SortEnumType
}

input NotificationStatusOperationFilterInput {
  eq: NotificationStatus
  neq: NotificationStatus
  in: [NotificationStatus!]
  nin: [NotificationStatus!]
}

input NullableOfAutomaticBooleanOperationFilterInput {
  eq: AutomaticBoolean
  neq: AutomaticBoolean
  in: [AutomaticBoolean]
  nin: [AutomaticBoolean]
}

input NullableOfBillingPeriodOperationFilterInput {
  eq: BillingPeriod
  neq: BillingPeriod
  in: [BillingPeriod]
  nin: [BillingPeriod]
}

input NullableOfBirthSexOperationFilterInput {
  eq: BirthSex
  neq: BirthSex
  in: [BirthSex]
  nin: [BirthSex]
}

input NullableOfCadastralUnitStatusOperationFilterInput {
  eq: CadastralUnitStatus
  neq: CadastralUnitStatus
  in: [CadastralUnitStatus]
  nin: [CadastralUnitStatus]
}

input NullableOfCalculationIssueOperationFilterInput {
  eq: CalculationIssue
  neq: CalculationIssue
  in: [CalculationIssue]
  nin: [CalculationIssue]
}

input NullableOfCompanyGroupOperationFilterInput {
  eq: CompanyGroup
  neq: CompanyGroup
  in: [CompanyGroup]
  nin: [CompanyGroup]
}

input NullableOfContractTerminatorOperationFilterInput {
  eq: ContractTerminator
  neq: ContractTerminator
  in: [ContractTerminator]
  nin: [ContractTerminator]
}

input NullableOfEstateUnitTypeOperationFilterInput {
  eq: EstateUnitType
  neq: EstateUnitType
  in: [EstateUnitType]
  nin: [EstateUnitType]
}

input NullableOfIncomeMetricOperationFilterInput {
  eq: IncomeMetric
  neq: IncomeMetric
  in: [IncomeMetric]
  nin: [IncomeMetric]
}

input NullableOfIncomeTypeOperationFilterInput {
  eq: IncomeType
  neq: IncomeType
  in: [IncomeType]
  nin: [IncomeType]
}

input NullableOfOccupantTypeOperationFilterInput {
  eq: OccupantType
  neq: OccupantType
  in: [OccupantType]
  nin: [OccupantType]
}

input NullableOfOfficerTypeOperationFilterInput {
  eq: OfficerType
  neq: OfficerType
  in: [OfficerType]
  nin: [OfficerType]
}

input NullableOfPlannedPeriodOperationFilterInput {
  eq: PlannedPeriod
  neq: PlannedPeriod
  in: [PlannedPeriod]
  nin: [PlannedPeriod]
}

input NullableOfRegistrationTaxExemptionOperationFilterInput {
  eq: RegistrationTaxExemption
  neq: RegistrationTaxExemption
  in: [RegistrationTaxExemption]
  nin: [RegistrationTaxExemption]
}

input NullableOfRegistrationTaxIncomeTypeOperationFilterInput {
  eq: RegistrationTaxIncomeType
  neq: RegistrationTaxIncomeType
  in: [RegistrationTaxIncomeType]
  nin: [RegistrationTaxIncomeType]
}

input NullableOfRegistrationTaxIncomeTypeRLIOperationFilterInput {
  eq: RegistrationTaxIncomeTypeRLI
  neq: RegistrationTaxIncomeTypeRLI
  in: [RegistrationTaxIncomeTypeRLI]
  nin: [RegistrationTaxIncomeTypeRLI]
}

input NullableOfRegistrationTaxSpecialCaseOperationFilterInput {
  eq: RegistrationTaxSpecialCase
  neq: RegistrationTaxSpecialCase
  in: [RegistrationTaxSpecialCase]
  nin: [RegistrationTaxSpecialCase]
}

input NullableOfReleaseReasonOperationFilterInput {
  eq: ReleaseReason
  neq: ReleaseReason
  in: [ReleaseReason]
  nin: [ReleaseReason]
}

input NullableOfRepossessionReasonOperationFilterInput {
  eq: RepossessionReason
  neq: RepossessionReason
  in: [RepossessionReason]
  nin: [RepossessionReason]
}

input NullableOfRepossessionTypeOperationFilterInput {
  eq: RepossessionType
  neq: RepossessionType
  in: [RepossessionType]
  nin: [RepossessionType]
}

input NullableOfTakeoverTypeOperationFilterInput {
  eq: TakeoverType
  neq: TakeoverType
  in: [TakeoverType]
  nin: [TakeoverType]
}

input NullableOfTicketMasterStatusOperationFilterInput {
  eq: TicketMasterStatus
  neq: TicketMasterStatus
  in: [TicketMasterStatus]
  nin: [TicketMasterStatus]
}

input NullableOfUnitConditionOperationFilterInput {
  eq: UnitCondition
  neq: UnitCondition
  in: [UnitCondition]
  nin: [UnitCondition]
}

input NullableOfVATRateTypeOperationFilterInput {
  eq: VATRateType
  neq: VATRateType
  in: [VATRateType]
  nin: [VATRateType]
}

input OfficeAccessOperationFilterInput {
  eq: OfficeAccess
  neq: OfficeAccess
  in: [OfficeAccess!]
  nin: [OfficeAccess!]
}

input OfficerInput {
  officerId: Int!
  officerType: OfficerType!
  since: Date
  until: Date
  notes: String
}

input OneOfTicketConditionInput {
  complex: ComplexTicketConditionInput
  ticketTypeEquality: TicketTypeEqualityConditionInput
  masterStatus: TicketMasterStatusConditionInput
  catalogueCategoryEquality: TicketCatalogueCategoryEqualityConditionInput
  catalogueSubCategoryEquality: TicketCatalogueSubCategoryEqualityConditionInput
  catalogueTypeEquality: TicketCatalogueTypeEqualityConditionInput
  priorityEquality: TicketPriorityEqualityConditionInput
}

input OneshotAdditionFilterInput {
  and: [OneshotAdditionFilterInput!]
  or: [OneshotAdditionFilterInput!]
  billItemType: BillItemTypeFilterInput
  startDate: DateOperationFilterInput
  accountingItemId: IntOperationFilterInput
  vatRateId: IntOperationFilterInput
  isRentalRateVariation: BooleanOperationFilterInput
  amount: DecimalOperationFilterInput
  installments: IntOperationFilterInput
  isBoundToTermDay: BooleanOperationFilterInput
  termStartDate: DateOperationFilterInput
  termEndDate: DateOperationFilterInput
  notes: CustomStringFilterInput
  registrationPayment: RegistrationPaymentFilterInput
  id: IntOperationFilterInput
}

input OneshotAdditionInput {
  id: Int
  billItemTypeId: Int!
  startDate: Date!
  accountingItemId: Int!
  vatRateId: Int!
  isRentalRateVariation: Boolean!
  amount: Decimal!
  installments: Int
  isBoundToTermDay: Boolean!
  termStartDate: Date
  termEndDate: Date
  notes: String
}

input OperationFilterInput {
  and: [OperationFilterInput!]
  or: [OperationFilterInput!]
  date: DateOperationFilterInput
  amount: DecimalOperationFilterInput
  assetTaxPaymentId: IntOperationFilterInput
  notes: CustomStringFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  id: IntOperationFilterInput
}

input OperationGroupOutputFilterInput {
  and: [OperationGroupOutputFilterInput!]
  or: [OperationGroupOutputFilterInput!]
  ids: ListIntOperationFilterInput
  date: DateOperationFilterInput
  amount: DecimalOperationFilterInput
  notes: CustomStringFilterInput
}

input OperationGroupOutputSortInput {
  date: SortEnumType
  amount: SortEnumType
  notes: SortEnumType
}

input OperationInput {
  date: Date!
  amount: Decimal!
  notes: String
}

input OrgUnitFilterInput {
  and: [OrgUnitFilterInput!]
  or: [OrgUnitFilterInput!]
  orgUnitType: OrgUnitTypeOperationFilterInput
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  externalCode: CustomStringFilterInput
  notes: CustomStringFilterInput
  entryStatus: EntryStatusOperationFilterInput
  creationDate: DateTimeOperationFilterInput
  deletionDate: DateTimeOperationFilterInput
  closureDate: DateTimeOperationFilterInput
  geographicalCities: ListIntOperationFilterInput
  parentOrgUnitId: IntOperationFilterInput
  parentOrgUnit: OrgUnitFilterInput
  parentSubjectId: IntOperationFilterInput
  parentSubject: SubjectFilterInput
  id: IntOperationFilterInput
}

input OrgUnitSortInput {
  name: SortEnumType
  internalCode: SortEnumType
  externalCode: SortEnumType
  notes: SortEnumType
  entryStatus: SortEnumType
  creationDate: SortEnumType
  deletionDate: SortEnumType
  closureDate: SortEnumType
  parentOrgUnitId: SortEnumType
  parentOrgUnit: OrgUnitSortInput
  parentSubjectId: SortEnumType
  parentSubject: SubjectSortInput
  id: SortEnumType
}

input OrgUnitTypeOperationFilterInput {
  eq: OrgUnitType
  neq: OrgUnitType
  in: [OrgUnitType!]
  nin: [OrgUnitType!]
}

input PagedInfoInput {
  pageNumber: Long!
  pageSize: Long!
  totalPages: Long!
  totalRecords: Long!
}

input PaymentTypeOperationFilterInput {
  eq: PaymentType
  neq: PaymentType
  in: [PaymentType!]
  nin: [PaymentType!]
}

input PenaltyFilterInput {
  and: [PenaltyFilterInput!]
  or: [PenaltyFilterInput!]
  isAttachedToContract: BooleanOperationFilterInput
  internalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  ifCondition: ComplexTicketConditionFilterInput
  thenOperator: BooleanOperatorOperationFilterInput
  thenPenalties: ListFilterInputTypeOfPenaltyValueFilterInput
  contract: FcltContractFilterInput
  id: IntOperationFilterInput
}

input PenaltyInput {
  id: Int
  internalCode: String!
  description: String!
  ifCondition: ComplexTicketConditionInput!
  thenOperator: BooleanOperator!
  thenPenalties: [PenaltyValueInput!]!
}

input PenaltySortInput {
  internalCode: SortEnumType
  description: SortEnumType
  ifCondition: ComplexTicketConditionSortInput
  thenOperator: SortEnumType
  contract: FcltContractSortInput
  id: SortEnumType
}

input PenaltyTypeOperationFilterInput {
  eq: PenaltyType
  neq: PenaltyType
  in: [PenaltyType!]
  nin: [PenaltyType!]
}

input PenaltyValueFilterInput {
  and: [PenaltyValueFilterInput!]
  or: [PenaltyValueFilterInput!]
  type: PenaltyTypeOperationFilterInput
  amount: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input PenaltyValueInput {
  id: Int
  type: PenaltyType!
  amount: Decimal!
}

input PerformedActivityFilterInput {
  and: [PerformedActivityFilterInput!]
  or: [PerformedActivityFilterInput!]
  name: CustomStringFilterInput
  ordering: IntOperationFilterInput
  status: PerformedActivityStatusOperationFilterInput
  isMandatoryByLaw: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input PerformedActivityInput {
  id: Int
  status: PerformedActivityStatus!
}

input PerformedActivityStatusOperationFilterInput {
  eq: PerformedActivityStatus
  neq: PerformedActivityStatus
  in: [PerformedActivityStatus!]
  nin: [PerformedActivityStatus!]
}

input PersonTypeOperationFilterInput {
  eq: PersonType
  neq: PersonType
  in: [PersonType!]
  nin: [PersonType!]
}

input PhysicalSubjectInput {
  firstName: String
  lastName: String
  customGender: Int
  birthSex: BirthSex
  birthDate: Date
  birthLocation: AddressInput
  birthCountryTaxIdCode: String
  professionalTaxIdCode: String
  deathDate: Date
  heirs: [HeirInput!]!
  ownerManagementSubjectIds: [Int!]!
  id: Int
  entryStatus: EntryStatus!
  internalCode: String!
  externalSourceCode: String
  customPersonType: Int
  customSubjectStatus: Int
  closureDate: Date
  addresses: [AddressInput!]!
  contacts: [ContactInput!]!
  bankAccounts: [BankAccountInput!]!
  taxStatuses: [TaxStatusInput!]!
  officers: [OfficerInput!]!
  categoriesIds: [Int!]!
}

input PriceListArticleFilterInput {
  and: [PriceListArticleFilterInput!]
  or: [PriceListArticleFilterInput!]
  actualPrice: DecimalOperationFilterInput
  actualPriceSince: DateOperationFilterInput
  actualPriceUntil: DateOperationFilterInput
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  measurementUnit: PriceListMeasurementUnitFilterInput
  priceList: PriceListFilterInput
  pricePeriods: ListFilterInputTypeOfArticlePricePeriodFilterInput
  catalogueTypeIds: ListIntOperationFilterInput
  id: IntOperationFilterInput
}

input PriceListArticleSortInput {
  actualPrice: SortEnumType
  actualPriceSince: SortEnumType
  actualPriceUntil: SortEnumType
  internalCode: SortEnumType
  name: SortEnumType
  measurementUnit: PriceListMeasurementUnitSortInput
  priceList: PriceListSortInput
  id: SortEnumType
}

input PriceListFilterInput {
  and: [PriceListFilterInput!]
  or: [PriceListFilterInput!]
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  ordering: IntOperationFilterInput
  isDefault: BooleanOperationFilterInput
  articles: ListFilterInputTypeOfPriceListArticleFilterInput
  id: IntOperationFilterInput
}

input PriceListInput {
  name: String!
  internalCode: String!
  ordering: Int!
  isDefault: Boolean!
}

input PriceListMeasurementUnitFilterInput {
  and: [PriceListMeasurementUnitFilterInput!]
  or: [PriceListMeasurementUnitFilterInput!]
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  ordering: IntOperationFilterInput
  id: IntOperationFilterInput
}

input PriceListMeasurementUnitInput {
  name: String!
  internalCode: String!
  ordering: Int!
}

input PriceListMeasurementUnitSortInput {
  internalCode: SortEnumType
  name: SortEnumType
  ordering: SortEnumType
  id: SortEnumType
}

input PriceListSortInput {
  internalCode: SortEnumType
  name: SortEnumType
  ordering: SortEnumType
  isDefault: SortEnumType
  id: SortEnumType
}

input PriorityOperationFilterInput {
  eq: Priority
  neq: Priority
  in: [Priority!]
  nin: [Priority!]
}

input QualificationLevelFilterInput {
  and: [QualificationLevelFilterInput!]
  or: [QualificationLevelFilterInput!]
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  ordering: IntOperationFilterInput
  id: IntOperationFilterInput
}

input QualificationLevelInput {
  name: String!
  internalCode: String!
  ordering: Int!
}

input QualificationLevelSortInput {
  internalCode: SortEnumType
  name: SortEnumType
  ordering: SortEnumType
  id: SortEnumType
}

input QuoteArticleFilterInput {
  and: [QuoteArticleFilterInput!]
  or: [QuoteArticleFilterInput!]
  sourceArticle: PriceListArticleFilterInput
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  quantity: IntOperationFilterInput
  ordering: IntOperationFilterInput
  measurementUnit: PriceListMeasurementUnitFilterInput
  unitPrice: DecimalOperationFilterInput
  isExcluded: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input QuoteArticleInput {
  id: Int
  sourceArticleId: Int
  internalCode: String!
  name: String!
  quantity: Int!
  ordering: Int!
  measurementUnitId: Int!
  unitPrice: Decimal!
  isExcluded: Boolean!
}

input QuoteFilterInput {
  and: [QuoteFilterInput!]
  or: [QuoteFilterInput!]
  masterStatus: QuoteMasterStatusOperationFilterInput
  externalCode: CustomStringFilterInput
  isFrameworkAgreement: BooleanOperationFilterInput
  classifications: CustomStringFilterInput
  amount: DecimalOperationFilterInput
  approvedAmount: DecimalOperationFilterInput
  interventionDueDate: DateOperationFilterInput
  orderNumber: CustomStringFilterInput
  notes: CustomStringFilterInput
  history: ListFilterInputTypeOfQuoteHistoryEntryFilterInput
  articles: ListFilterInputTypeOfQuoteArticleFilterInput
  id: IntOperationFilterInput
}

input QuoteHistoryEntryFilterInput {
  and: [QuoteHistoryEntryFilterInput!]
  or: [QuoteHistoryEntryFilterInput!]
  timestamp: DateTimeOperationFilterInput
  userId: IntOperationFilterInput
  id: IntOperationFilterInput
}

input QuoteInput {
  isFrameworkAgreement: Boolean
  masterStatus: QuoteMasterStatus!
  externalCode: String
  classifications: String
  interventionDueDate: Date!
  orderNumber: String
  notes: String
  articles: [QuoteArticleInput!]!
}

input QuoteMasterStatusOperationFilterInput {
  eq: QuoteMasterStatus
  neq: QuoteMasterStatus
  in: [QuoteMasterStatus!]
  nin: [QuoteMasterStatus!]
}

input QuoteSortInput {
  masterStatus: SortEnumType
  externalCode: SortEnumType
  isFrameworkAgreement: SortEnumType
  classifications: SortEnumType
  amount: SortEnumType
  approvedAmount: SortEnumType
  interventionDueDate: SortEnumType
  orderNumber: SortEnumType
  notes: SortEnumType
  id: SortEnumType
}

input RatePlanFilterInput {
  and: [RatePlanFilterInput!]
  or: [RatePlanFilterInput!]
  since: DateOperationFilterInput
  newYearlyRate: DecimalOperationFilterInput
  isDeclarationExpected: BooleanOperationFilterInput
  isDeclared: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input RatePlanInput {
  id: Int
  since: Date!
  newYearlyRate: Decimal!
  isDeclarationExpected: Boolean!
}

input ReadingFilterInput {
  and: [ReadingFilterInput!]
  or: [ReadingFilterInput!]
  utilityService: UtilityServiceFilterInput
  notes: CustomStringFilterInput
  readingTimestamp: DateTimeOperationFilterInput
  isEstimated: BooleanOperationFilterInput
  values: ListFilterInputTypeOfReadingValueFilterInput
  id: IntOperationFilterInput
}

input ReadingInput {
  utilityServiceId: Int!
  notes: String
  readingTimestamp: DateTime!
  isEstimated: Boolean!
  values: [ReadingValueInput!]!
}

input ReadingSortInput {
  utilityService: UtilityServiceSortInput
  notes: SortEnumType
  readingTimestamp: SortEnumType
  isEstimated: SortEnumType
  id: SortEnumType
}

input ReadingValueFilterInput {
  and: [ReadingValueFilterInput!]
  or: [ReadingValueFilterInput!]
  touRateIndex: IntOperationFilterInput
  value: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input ReadingValueInput {
  id: Int
  touRateIndex: Int!
  value: Decimal
}

input ReasonOperationFilterInput {
  eq: Reason
  neq: Reason
  in: [Reason!]
  nin: [Reason!]
}

input RecurringAdditionFilterInput {
  and: [RecurringAdditionFilterInput!]
  or: [RecurringAdditionFilterInput!]
  billItemType: BillItemTypeFilterInput
  accountingItemId: IntOperationFilterInput
  vatRateId: IntOperationFilterInput
  amountPerInstallment: DecimalOperationFilterInput
  excludeStartMonth: IntOperationFilterInput
  excludeEndMonth: IntOperationFilterInput
  notes: CustomStringFilterInput
  id: IntOperationFilterInput
}

input RecurringAdditionInput {
  id: Int
  billItemTypeId: Int!
  accountingItemId: Int!
  vatRateId: Int!
  amountPerInstallment: Decimal!
  excludeStartMonth: Int
  excludeEndMonth: Int
  notes: String
}

input RefactoringFilterInput {
  and: [RefactoringFilterInput!]
  or: [RefactoringFilterInput!]
  referenceYear: IntOperationFilterInput
  buildingPermitYear: IntOperationFilterInput
  condition: UnitConditionOperationFilterInput
  ageCoefficient: FloatOperationFilterInput
  estateUnitIds: ListIntOperationFilterInput
  id: IntOperationFilterInput
}

input RefactoringInput {
  id: Int
  referenceYear: Int!
  buildingPermitYear: Int
  condition: UnitCondition!
  ageCoefficient: Float
  estateUnitIds: [Int!]!
}

input RegistrationOfficeFilterInput {
  and: [RegistrationOfficeFilterInput!]
  or: [RegistrationOfficeFilterInput!]
  externalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  cityId: IntOperationFilterInput
  id: IntOperationFilterInput
}

input RegistrationOfficeInput {
  id: Int
  description: String
  externalCode: String
  cityId: Int
}

input RegistrationOfficeSortInput {
  externalCode: SortEnumType
  description: SortEnumType
  cityId: SortEnumType
  id: SortEnumType
}

input RegistrationPaymentFilterInput {
  and: [RegistrationPaymentFilterInput!]
  or: [RegistrationPaymentFilterInput!]
  contract: ContractFilterInput
  paymentType: RegistrationPaymentTypeOperationFilterInput
  paymentYear: IntOperationFilterInput
  paymentCode: CustomStringFilterInput
  valueDate: DateOperationFilterInput
  taxAmount: DecimalOperationFilterInput
  sanctionAmount: DecimalOperationFilterInput
  totalAmount: DecimalOperationFilterInput
  rows: ListFilterInputTypeOfRegistrationPaymentRowFilterInput
  id: IntOperationFilterInput
}

input RegistrationPaymentInput {
  id: Int
  contractId: Int!
  paymentYear: Int!
  paymentCode: String!
  valueDate: Date!
  taxAmount: Decimal!
  sanctionAmount: Decimal!
  totalAmount: Decimal!
  rows: [RegistrationPaymentRowInput!]!
}

input RegistrationPaymentRowFilterInput {
  and: [RegistrationPaymentRowFilterInput!]
  or: [RegistrationPaymentRowFilterInput!]
  payment: RegistrationPaymentFilterInput
  paymentRowCode: CustomStringFilterInput
  paymentRowSection: CustomStringFilterInput
  paymentRowReceivingEntity: CustomStringFilterInput
  referenceYear: IntOperationFilterInput
  referencePeriod: IntOperationFilterInput
  amountDue: DecimalOperationFilterInput
  amountCleared: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input RegistrationPaymentRowInput {
  id: Int
  paymentRowCode: String!
  paymentRowSection: String
  paymentRowReceivingEntity: String
  referenceYear: Int!
  referencePeriod: Int
  amountDue: Decimal!
  amountCleared: Decimal
}

input RegistrationPaymentSortInput {
  contract: ContractSortInput
  paymentType: SortEnumType
  paymentYear: SortEnumType
  paymentCode: SortEnumType
  valueDate: SortEnumType
  taxAmount: SortEnumType
  sanctionAmount: SortEnumType
  totalAmount: SortEnumType
  id: SortEnumType
}

input RegistrationPaymentTypeOperationFilterInput {
  eq: RegistrationPaymentType
  neq: RegistrationPaymentType
  in: [RegistrationPaymentType!]
  nin: [RegistrationPaymentType!]
}

input RegistrationTaxFilterInput {
  and: [RegistrationTaxFilterInput!]
  or: [RegistrationTaxFilterInput!]
  isTakeoverFromPreviousSubject: BooleanOperationFilterInput
  takeoverOriginalSubjectIds: ListIntOperationFilterInput
  takeoverType: NullableOfTakeoverTypeOperationFilterInput
  takeoverLegalRepresentativeSubjectId: IntOperationFilterInput
  takeoverDate: DateOperationFilterInput
  paymentType: RegistrationTaxPaymentTypeOperationFilterInput
  isRLIModeEnabled: BooleanOperationFilterInput
  isAccountingManaged: BooleanOperationFilterInput
  incomeTypeRLI: NullableOfRegistrationTaxIncomeTypeRLIOperationFilterInput
  incomeType: NullableOfRegistrationTaxIncomeTypeOperationFilterInput
  registrationSerialNumber: CustomStringFilterInput
  registrationNumber: CustomStringFilterInput
  registrationYear: IntOperationFilterInput
  contractRegistrationCode: CustomStringFilterInput
  requestCode: CustomStringFilterInput
  registrationOffice: RegistrationOfficeFilterInput
  taxableRateRatioPercent: DecimalOperationFilterInput
  tenantTaxSharePercent: DecimalOperationFilterInput
  firstRegistrationPeriod: RegistrationTaxPeriodOperationFilterInput
  firstRegistrationDate: DateOperationFilterInput
  firstOnlineRegistrationDate: DateOperationFilterInput
  lastPaymentDate: DateOperationFilterInput
  lastOnlinePaymentDate: DateOperationFilterInput
  exemptions: NullableOfRegistrationTaxExemptionOperationFilterInput
  transferResolutionAmount: DecimalOperationFilterInput
  specialCase: NullableOfRegistrationTaxSpecialCaseOperationFilterInput
  numberOfPages: IntOperationFilterInput
  numberOfCopies: IntOperationFilterInput
  tenantShareOfStampTaxPercent: DecimalOperationFilterInput
  isVoluntarySanctionApplied: BooleanOperationFilterInput
}

input RegistrationTaxInput {
  isTakeoverFromPreviousSubject: Boolean!
  takeoverOriginalSubjectIds: [Int!]!
  takeoverType: TakeoverType
  takeoverLegalRepresentativeSubjectId: Int
  takeoverDate: Date
  paymentType: RegistrationTaxPaymentType!
  isRLIModeEnabled: Boolean!
  isAccountingManaged: Boolean!
  incomeTypeRLI: RegistrationTaxIncomeTypeRLI
  incomeType: RegistrationTaxIncomeType
  registrationSerialNumber: String
  registrationNumber: String
  registrationYear: Int
  contractRegistrationCode: String
  registrationOfficeId: Int!
  taxableRateRatioPercent: Decimal!
  tenantTaxSharePercent: Decimal!
  firstRegistrationPeriod: RegistrationTaxPeriod!
  firstRegistrationDate: Date
  firstOnlineRegistrationDate: Date
  lastPaymentDate: Date
  lastOnlinePaymentDate: Date
  exemptions: RegistrationTaxExemption
  transferResolutionAmount: Decimal
  specialCase: RegistrationTaxSpecialCase
  numberOfPages: Int!
  numberOfCopies: Int!
  tenantShareOfStampTaxPercent: Decimal!
  isVoluntarySanctionApplied: Boolean!
}

input RegistrationTaxPaymentTypeOperationFilterInput {
  eq: RegistrationTaxPaymentType
  neq: RegistrationTaxPaymentType
  in: [RegistrationTaxPaymentType!]
  nin: [RegistrationTaxPaymentType!]
}

input RegistrationTaxPeriodOperationFilterInput {
  eq: RegistrationTaxPeriod
  neq: RegistrationTaxPeriod
  in: [RegistrationTaxPeriod!]
  nin: [RegistrationTaxPeriod!]
}

input RegistrationTaxSortInput {
  isTakeoverFromPreviousSubject: SortEnumType
  takeoverType: SortEnumType
  takeoverLegalRepresentativeSubjectId: SortEnumType
  takeoverDate: SortEnumType
  paymentType: SortEnumType
  isRLIModeEnabled: SortEnumType
  isAccountingManaged: SortEnumType
  incomeTypeRLI: SortEnumType
  incomeType: SortEnumType
  registrationSerialNumber: SortEnumType
  registrationNumber: SortEnumType
  registrationYear: SortEnumType
  contractRegistrationCode: SortEnumType
  requestCode: SortEnumType
  registrationOffice: RegistrationOfficeSortInput
  taxableRateRatioPercent: SortEnumType
  tenantTaxSharePercent: SortEnumType
  firstRegistrationPeriod: SortEnumType
  firstRegistrationDate: SortEnumType
  firstOnlineRegistrationDate: SortEnumType
  lastPaymentDate: SortEnumType
  lastOnlinePaymentDate: SortEnumType
  exemptions: SortEnumType
  transferResolutionAmount: SortEnumType
  specialCase: SortEnumType
  numberOfPages: SortEnumType
  numberOfCopies: SortEnumType
  tenantShareOfStampTaxPercent: SortEnumType
  isVoluntarySanctionApplied: SortEnumType
}

input RegistryCommunicationAnomalyFilterInput {
  and: [RegistryCommunicationAnomalyFilterInput!]
  or: [RegistryCommunicationAnomalyFilterInput!]
  description: CustomStringFilterInput
}

input RegistryCommunicationAnomalyOutputFilterInput {
  and: [RegistryCommunicationAnomalyOutputFilterInput!]
  or: [RegistryCommunicationAnomalyOutputFilterInput!]
  contractInternalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  guid: UuidOperationFilterInput
}

input RegistryCommunicationAnomalyOutputSortInput {
  contractInternalCode: SortEnumType
  description: SortEnumType
  guid: SortEnumType
}

input RegistryCommunicationFilterInput {
  and: [RegistryCommunicationFilterInput!]
  or: [RegistryCommunicationFilterInput!]
  hasAnomalies: BooleanOperationFilterInput
  anyEstateUnitInternalCode: CustomStringFilterInput
  isSent: BooleanOperationFilterInput
  isExcluded: BooleanOperationFilterInput
  date: DateOperationFilterInput
  countryISO3: CustomStringFilterInput
  office: RegistrationOfficeFilterInput
  type: CommunicationTypeOperationFilterInput
  registryNumber: CustomStringFilterInput
  debtBankAccountId: IntOperationFilterInput
  debtAmount: DecimalOperationFilterInput
  senderSubjectId: IntOperationFilterInput
  contract: ContractFilterInput
  estatesUnits: ListFilterInputTypeOfCommEstateUnitFilterInput
  anomalies: ListFilterInputTypeOfRegistryCommunicationAnomalyFilterInput
  contractCode: CustomStringFilterInput
  requestingSubjectId: IntOperationFilterInput
  requestingSubjectLegalRepresentativeId: IntOperationFilterInput
  contractType: CustomStringFilterInput
  startDate: DateOperationFilterInput
  endDate: DateOperationFilterInput
  contractFee: DecimalOperationFilterInput
  isPayingEntireContractFee: BooleanOperationFilterInput
  registryFee: DecimalOperationFilterInput
  stampFee: DecimalOperationFilterInput
  registryFeePenalty: DecimalOperationFilterInput
  stampFeePenalty: DecimalOperationFilterInput
  registryFeeInterest: DecimalOperationFilterInput
  stampFeeInterest: DecimalOperationFilterInput
  contractSignatureDate: DateOperationFilterInput
  numberOfPages: IntOperationFilterInput
  numberOfCopies: IntOperationFilterInput
  attachedDocumentId: CustomStringFilterInput
  payment: RegistrationPaymentFilterInput
  receipt: RegistryCommunicationReceiptFilterInput
  id: IntOperationFilterInput
}

input RegistryCommunicationGroupFilterInput {
  and: [RegistryCommunicationGroupFilterInput!]
  or: [RegistryCommunicationGroupFilterInput!]
  hasAnomalies: BooleanOperationFilterInput
  managementSubjectName: CustomStringFilterInput
  requestingSubjectLegalRepresentativeName: CustomStringFilterInput
  debtBankAccountReferenceCode: CustomStringFilterInput
  id: RegistryCommunicationGroupIdFilterInput
  debtAmount: DecimalOperationFilterInput
  anomaliesCount: IntOperationFilterInput
}

input RegistryCommunicationGroupIdFilterInput {
  and: [RegistryCommunicationGroupIdFilterInput!]
  or: [RegistryCommunicationGroupIdFilterInput!]
  managementSubjectId: IntOperationFilterInput
  isActiveContract: BooleanOperationFilterInput
  communicationType: CommunicationTypeOperationFilterInput
  endDate: DateOperationFilterInput
  date: DateOperationFilterInput
  requestingSubjectLegalRepresentativeId: IntOperationFilterInput
  debtBankAccountId: IntOperationFilterInput
}

input RegistryCommunicationGroupIdInput {
  managementSubjectId: Int!
  isActiveContract: Boolean!
  communicationType: CommunicationType!
  endDate: Date
  date: Date
  requestingSubjectLegalRepresentativeId: Int
  debtBankAccountId: Int
}

input RegistryCommunicationGroupIdSortInput {
  managementSubjectId: SortEnumType
  isActiveContract: SortEnumType
  communicationType: SortEnumType
  endDate: SortEnumType
  date: SortEnumType
  requestingSubjectLegalRepresentativeId: SortEnumType
  debtBankAccountId: SortEnumType
}

input RegistryCommunicationGroupSortInput {
  hasAnomalies: SortEnumType
  managementSubjectName: SortEnumType
  requestingSubjectLegalRepresentativeName: SortEnumType
  debtBankAccountReferenceCode: SortEnumType
  id: RegistryCommunicationGroupIdSortInput
  debtAmount: SortEnumType
  anomaliesCount: SortEnumType
}

input RegistryCommunicationReceiptFilterInput {
  and: [RegistryCommunicationReceiptFilterInput!]
  or: [RegistryCommunicationReceiptFilterInput!]
  isSuccessful: BooleanOperationFilterInput
  failureMessage: CustomStringFilterInput
  contractAssignedNumber: CustomStringFilterInput
  registrationSeries: CustomStringFilterInput
  registrationNumber: CustomStringFilterInput
}

input RegistryCommunicationReceiptSortInput {
  isSuccessful: SortEnumType
  failureMessage: SortEnumType
  contractAssignedNumber: SortEnumType
  registrationSeries: SortEnumType
  registrationNumber: SortEnumType
}

input RegistryCommunicationSortInput {
  hasAnomalies: SortEnumType
  isSent: SortEnumType
  isExcluded: SortEnumType
  date: SortEnumType
  countryISO3: SortEnumType
  office: RegistrationOfficeSortInput
  type: SortEnumType
  registryNumber: SortEnumType
  debtBankAccountId: SortEnumType
  debtAmount: SortEnumType
  senderSubjectId: SortEnumType
  contract: ContractSortInput
  contractCode: SortEnumType
  requestingSubjectId: SortEnumType
  requestingSubjectLegalRepresentativeId: SortEnumType
  contractType: SortEnumType
  startDate: SortEnumType
  endDate: SortEnumType
  contractFee: SortEnumType
  isPayingEntireContractFee: SortEnumType
  registryFee: SortEnumType
  stampFee: SortEnumType
  registryFeePenalty: SortEnumType
  stampFeePenalty: SortEnumType
  registryFeeInterest: SortEnumType
  stampFeeInterest: SortEnumType
  contractSignatureDate: SortEnumType
  numberOfPages: SortEnumType
  numberOfCopies: SortEnumType
  attachedDocumentId: SortEnumType
  payment: RegistrationPaymentSortInput
  receipt: RegistryCommunicationReceiptSortInput
  id: SortEnumType
}

input ReminderFilterInput {
  and: [ReminderFilterInput!]
  or: [ReminderFilterInput!]
  date: DateOperationFilterInput
  summary: CustomStringFilterInput
  id: IntOperationFilterInput
}

input ReminderInput {
  id: Int
  date: Date!
  summary: String!
}

input ReplyFilterInput {
  and: [ReplyFilterInput!]
  or: [ReplyFilterInput!]
  timestamp: DateTimeOperationFilterInput
  isOperator: BooleanOperationFilterInput
  userId: IntOperationFilterInput
  comment: CustomStringFilterInput
  id: IntOperationFilterInput
}

input ReportGeneratorFilterInput {
  fieldName: String!
  numberValue: Decimal
  stringValue: String
  dateValue: Date
}

input RepossessionFilterInput {
  and: [RepossessionFilterInput!]
  or: [RepossessionFilterInput!]
  estateUnit: EstateUnitFilterInput
  notes: CustomStringFilterInput
  eventDate: DateOperationFilterInput
  eventType: NullableOfRepossessionTypeOperationFilterInput
  eventReason: NullableOfRepossessionReasonOperationFilterInput
  unitStatus: NullableOfUnitConditionOperationFilterInput
  isAssignable: BooleanOperationFilterInput
  isKeysReturned: BooleanOperationFilterInput
  isWithValuables: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input RepossessionSortInput {
  estateUnit: EstateUnitSortInput
  notes: SortEnumType
  eventDate: SortEnumType
  eventType: SortEnumType
  eventReason: SortEnumType
  unitStatus: SortEnumType
  isAssignable: SortEnumType
  isKeysReturned: SortEnumType
  isWithValuables: SortEnumType
  id: SortEnumType
}

input ResolutionFilterInput {
  and: [ResolutionFilterInput!]
  or: [ResolutionFilterInput!]
  interventionStart: DateTimeOperationFilterInput
  interventionEnd: DateTimeOperationFilterInput
  closure: DateTimeOperationFilterInput
  operationsPerformed: CustomStringFilterInput
  diagnosis: CustomStringFilterInput
  resolutionNotes: CustomStringFilterInput
  partsAndSupplies: CustomStringFilterInput
}

input ResolutionInput {
  interventionStart: DateTime
  interventionEnd: DateTime
  closure: DateTime
  operationsPerformed: String
  diagnosis: String
  resolutionNotes: String
  partsAndSupplies: String
}

input ResolutionSortInput {
  interventionStart: SortEnumType
  interventionEnd: SortEnumType
  closure: SortEnumType
  operationsPerformed: SortEnumType
  diagnosis: SortEnumType
  resolutionNotes: SortEnumType
  partsAndSupplies: SortEnumType
}

input RevaluationDataFilterInput {
  and: [RevaluationDataFilterInput!]
  or: [RevaluationDataFilterInput!]
  year: IntOperationFilterInput
  month: IntOperationFilterInput
  dataProvider: UuidOperationFilterInput
  countryISO3: CustomStringFilterInput
  baseYear: IntOperationFilterInput
  revaluationIndex: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input RevaluationDataSortInput {
  year: SortEnumType
  month: SortEnumType
  dataProvider: SortEnumType
  countryISO3: SortEnumType
  baseYear: SortEnumType
  revaluationIndex: SortEnumType
  id: SortEnumType
}

input RevaluationFilterInput {
  and: [RevaluationFilterInput!]
  or: [RevaluationFilterInput!]
  revaluationPeriodMonths: IntOperationFilterInput
  isAbsoluteRevaluationApplied: BooleanOperationFilterInput
  isRevaluationCalculated: BooleanOperationFilterInput
  referencePeriodStart: DateOperationFilterInput
  referencePeriodEnd: DateOperationFilterInput
  revaluationSharePercent: DecimalOperationFilterInput
  rateType: RevaluationRateTypeOperationFilterInput
  baseRevaluationRate: DecimalOperationFilterInput
  nextApplicationDate: DateOperationFilterInput
  isBackHistoryEnabled: BooleanOperationFilterInput
}

input RevaluationHistoryFilterInput {
  and: [RevaluationHistoryFilterInput!]
  or: [RevaluationHistoryFilterInput!]
  since: DateOperationFilterInput
  baseYearlyRate: DecimalOperationFilterInput
  indexPercent: DecimalOperationFilterInput
  revaluationAmount: DecimalOperationFilterInput
  yearlyRateWithRevaluation: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input RevaluationInput {
  revaluationPeriodMonths: Int!
  isAbsoluteRevaluationApplied: Boolean!
  isRevaluationCalculated: Boolean!
  referencePeriodStart: Date!
  referencePeriodEnd: Date!
  revaluationSharePercent: Decimal!
  rateType: RevaluationRateType!
  baseRevaluationRate: Decimal
  nextApplicationDate: Date!
  isBackHistoryEnabled: Boolean!
}

input RevaluationRateTypeOperationFilterInput {
  eq: RevaluationRateType
  neq: RevaluationRateType
  in: [RevaluationRateType!]
  nin: [RevaluationRateType!]
}

input RevaluationSortInput {
  revaluationPeriodMonths: SortEnumType
  isAbsoluteRevaluationApplied: SortEnumType
  isRevaluationCalculated: SortEnumType
  referencePeriodStart: SortEnumType
  referencePeriodEnd: SortEnumType
  revaluationSharePercent: SortEnumType
  rateType: SortEnumType
  baseRevaluationRate: SortEnumType
  nextApplicationDate: SortEnumType
  isBackHistoryEnabled: SortEnumType
}

input SLAFilterInput {
  and: [SLAFilterInput!]
  or: [SLAFilterInput!]
  isAttachedToContract: BooleanOperationFilterInput
  internalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  ifCondition: ComplexTicketConditionFilterInput
  thenCondition: ComplexTicketConditionFilterInput
  contract: FcltContractFilterInput
  id: IntOperationFilterInput
}

input SLAInput {
  id: Int
  internalCode: String!
  description: String!
  ifCondition: ComplexTicketConditionInput!
  thenCondition: ComplexTicketConditionInput!
}

input SLASortInput {
  internalCode: SortEnumType
  description: SortEnumType
  ifCondition: ComplexTicketConditionSortInput
  thenCondition: ComplexTicketConditionSortInput
  contract: FcltContractSortInput
  id: SortEnumType
}

input SecurityDepositFilterInput {
  and: [SecurityDepositFilterInput!]
  or: [SecurityDepositFilterInput!]
  subjectId: IntOperationFilterInput
  type: SecurityDepositTypeOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  baseAmount: DecimalOperationFilterInput
  isInterestCalculated: BooleanOperationFilterInput
  interestCalculationStartDate: DateOperationFilterInput
  interestCalculationEndDate: DateOperationFilterInput
  takeoverDate: DateOperationFilterInput
  suretySubjectId: IntOperationFilterInput
  isSuretyRenewable: BooleanOperationFilterInput
  bankAccountId: IntOperationFilterInput
  notes: CustomStringFilterInput
  interestRows: ListFilterInputTypeOfSecurityDepositInterestRowFilterInput
  id: IntOperationFilterInput
}

input SecurityDepositInput {
  id: Int
  subjectId: Int
  type: SecurityDepositType!
  since: Date
  until: Date
  baseAmount: Decimal!
  isInterestCalculated: Boolean!
  interestCalculationStartDate: Date
  takeoverDate: Date
  suretySubjectId: Int
  isSuretyRenewable: Boolean!
  bankAccountId: Int
  notes: String
}

input SecurityDepositInterestRowFilterInput {
  and: [SecurityDepositInterestRowFilterInput!]
  or: [SecurityDepositInterestRowFilterInput!]
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  baseAmount: DecimalOperationFilterInput
  calculationDate: DateOperationFilterInput
  interestAmount: DecimalOperationFilterInput
  appliedInterestRate: DecimalOperationFilterInput
  id: IntOperationFilterInput
}

input SecurityDepositTypeOperationFilterInput {
  eq: SecurityDepositType
  neq: SecurityDepositType
  in: [SecurityDepositType!]
  nin: [SecurityDepositType!]
}

input ServiceActivityFilterInput {
  and: [ServiceActivityFilterInput!]
  or: [ServiceActivityFilterInput!]
  name: CustomStringFilterInput
  activityType: ServiceActivityTypeOperationFilterInput
  isMandatoryByLaw: BooleanOperationFilterInput
  type: ServiceFilterInput
  id: IntOperationFilterInput
}

input ServiceActivityInput {
  id: Int
  name: String
  activityType: ServiceActivityType!
  isMandatoryByLaw: Boolean!
}

input ServiceActivitySortInput {
  name: SortEnumType
  activityType: SortEnumType
  isMandatoryByLaw: SortEnumType
  type: ServiceSortInput
  id: SortEnumType
}

input ServiceActivityTypeOperationFilterInput {
  eq: ServiceActivityType
  neq: ServiceActivityType
  in: [ServiceActivityType!]
  nin: [ServiceActivityType!]
}

input ServiceCategoryFilterInput {
  and: [ServiceCategoryFilterInput!]
  or: [ServiceCategoryFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  subCategories: ListFilterInputTypeOfServiceSubCategoryFilterInput
  services: ListFilterInputTypeOfServiceFilterInput
  id: IntOperationFilterInput
}

input ServiceCategoryInput {
  id: Int
  name: String
  internalCode: String!
  subCategories: [ServiceSubCategoryInput!]!
}

input ServiceCategorySortInput {
  name: SortEnumType
  internalCode: SortEnumType
  id: SortEnumType
}

input ServiceFilterInput {
  and: [ServiceFilterInput!]
  or: [ServiceFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  category: ServiceCategoryFilterInput
  subCategory: ServiceSubCategoryFilterInput
  activities: ListFilterInputTypeOfServiceActivityFilterInput
  id: IntOperationFilterInput
}

input ServiceInput {
  id: Int
  name: String
  internalCode: String!
  categoryId: Int!
  subCategoryId: Int!
  activities: [ServiceActivityInput!]!
}

input ServiceSortInput {
  name: SortEnumType
  internalCode: SortEnumType
  category: ServiceCategorySortInput
  subCategory: ServiceSubCategorySortInput
  id: SortEnumType
}

input ServiceSubCategoryFilterInput {
  and: [ServiceSubCategoryFilterInput!]
  or: [ServiceSubCategoryFilterInput!]
  name: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  category: ServiceCategoryFilterInput
  services: ListFilterInputTypeOfServiceFilterInput
  id: IntOperationFilterInput
}

input ServiceSubCategoryInput {
  id: Int
  name: String
  internalCode: String!
}

input ServiceSubCategorySortInput {
  name: SortEnumType
  internalCode: SortEnumType
  category: ServiceCategorySortInput
  id: SortEnumType
}

input SessionFilterInput {
  and: [SessionFilterInput!]
  or: [SessionFilterInput!]
  loginUserAgent: CustomStringFilterInput
  loginIPAddress: CustomStringFilterInput
  loginLocation: CustomStringFilterInput
  lastRefreshIPAddress: CustomStringFilterInput
  lastRefreshLocation: CustomStringFilterInput
  lastRefreshUserAgent: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
  refreshTokenExpiration: DateTimeOperationFilterInput
  id: IntOperationFilterInput
}

input StairFilterInput {
  and: [StairFilterInput!]
  or: [StairFilterInput!]
  description: CustomStringFilterInput
  id: IntOperationFilterInput
}

input StairInput {
  id: Int
  description: String!
}

input StairSortInput {
  description: SortEnumType
  id: SortEnumType
}

input SubjectCategoryFilterInput {
  and: [SubjectCategoryFilterInput!]
  or: [SubjectCategoryFilterInput!]
  name: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
  function: CategoryFunctionOperationFilterInput
  id: IntOperationFilterInput
}

input SubjectCategorySortInput {
  name: SortEnumType
  creationDate: SortEnumType
  function: SortEnumType
  id: SortEnumType
}

input SubjectDocumentsFlatOutputFilterInput {
  and: [SubjectDocumentsFlatOutputFilterInput!]
  or: [SubjectDocumentsFlatOutputFilterInput!]
  subjectName: CustomStringFilterInput
  subjectInternalCode: CustomStringFilterInput
  document: DocumentFilterInput
}

input SubjectDocumentsOutputSortInput {
  guid: SortEnumType
  subjectName: SortEnumType
  subjectInternalCode: SortEnumType
}

input SubjectFilterInput {
  and: [SubjectFilterInput!]
  or: [SubjectFilterInput!]
  addresses: ListAddressFilterTypeFilterInput
  contacts: ListContactFilterTypeFilterInput
  orgUnits: ListOrgUnitFilterTypeFilterInput
  relationMains: ListSubjectRelationFilterTypeFilterInput
  relationSubordinates: ListSubjectRelationFilterTypeFilterInput
  legalResidentialAddress: IAddressFilterInput
  customGender: IntOperationFilterInput
  firstName: CustomStringFilterInput
  lastName: CustomStringFilterInput
  birthSex: NullableOfBirthSexOperationFilterInput
  birthCountryTaxIdCode: CustomStringFilterInput
  professionalTaxIdCode: CustomStringFilterInput
  birthDate: DateOperationFilterInput
  deathDate: DateOperationFilterInput
  fullName: CustomStringFilterInput
  shorthandDescription: CustomStringFilterInput
  baseCountryTaxIdCode: CustomStringFilterInput
  additionalTaxIdCode: CustomStringFilterInput
  baseCountryISO: CustomStringFilterInput
  location: CustomStringFilterInput
  businessStart: DateOperationFilterInput
  shareCapital: DecimalOperationFilterInput
  companiesHouseIdCode: CustomStringFilterInput
  additionalGovIdCode: CustomStringFilterInput
  bankingId1: CustomStringFilterInput
  bankingId2: CustomStringFilterInput
  interGroupSignature: CustomStringFilterInput
  legalSubjectType: LegalSubjectTypeOperationFilterInput
  managementCode: CustomStringFilterInput
  name: CustomStringFilterInput
  personType: PersonTypeOperationFilterInput
  internalCode: CustomStringFilterInput
  externalSourceCode: CustomStringFilterInput
  customPersonType: IntOperationFilterInput
  customSubjectStatus: IntOperationFilterInput
  creationDate: DateTimeOperationFilterInput
  closureDate: DateTimeOperationFilterInput
  deletionDate: DateTimeOperationFilterInput
  entryStatus: EntryStatusOperationFilterInput
  bankAccounts: ListFilterInputTypeOfBankAccountFilterInput
  categories: ListFilterInputTypeOfSubjectCategoryFilterInput
  taxStatuses: ListFilterInputTypeOfTaxStatusFilterInput
  id: IntOperationFilterInput
}

input SubjectRelationFilterInput {
  and: [SubjectRelationFilterInput!]
  or: [SubjectRelationFilterInput!]
  main: SubjectFilterInput
  subordinate: SubjectFilterInput
  mainId: IntOperationFilterInput
  subordinateId: IntOperationFilterInput
  relationType: SubjectRelationTypeOperationFilterInput
  creationDate: DateTimeOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  officerRelationType: NullableOfOfficerTypeOperationFilterInput
  groupRelationType: NullableOfCompanyGroupOperationFilterInput
  notes: CustomStringFilterInput
  id: IntOperationFilterInput
}

input SubjectRelationSortInput {
  main: SubjectSortInput
  mainId: SortEnumType
  subordinate: SubjectSortInput
  subordinateId: SortEnumType
  relationType: SortEnumType
  creationDate: SortEnumType
  since: SortEnumType
  until: SortEnumType
  officerRelationType: SortEnumType
  groupRelationType: SortEnumType
  notes: SortEnumType
  id: SortEnumType
}

input SubjectRelationTypeOperationFilterInput {
  eq: SubjectRelationType
  neq: SubjectRelationType
  in: [SubjectRelationType!]
  nin: [SubjectRelationType!]
}

input SubjectSortInput {
  legalResidentialAddress: IAddressSortInput
  customGender: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  birthSex: SortEnumType
  birthCountryTaxIdCode: SortEnumType
  professionalTaxIdCode: SortEnumType
  birthDate: SortEnumType
  deathDate: SortEnumType
  birthLocation: AddressSortInput
  fullName: SortEnumType
  shorthandDescription: SortEnumType
  baseCountryTaxIdCode: SortEnumType
  additionalTaxIdCode: SortEnumType
  baseCountryISO: SortEnumType
  location: SortEnumType
  businessStart: SortEnumType
  shareCapital: SortEnumType
  companiesHouseIdCode: SortEnumType
  additionalGovIdCode: SortEnumType
  bankingId1: SortEnumType
  bankingId2: SortEnumType
  interGroupSignature: SortEnumType
  legalSubjectType: SortEnumType
  managementCode: SortEnumType
  name: SortEnumType
  personType: SortEnumType
  internalCode: SortEnumType
  externalSourceCode: SortEnumType
  customPersonType: SortEnumType
  customSubjectStatus: SortEnumType
  creationDate: SortEnumType
  closureDate: SortEnumType
  deletionDate: SortEnumType
  entryStatus: SortEnumType
  companyGroupParent: SubjectRelationSortInput
  id: SortEnumType
}

input SublocatedContractInput {
  id: Int!
  firstTermDurationMonths: Int
  secondTermDurationMonths: Int
  firstTermExpirationDate: Date
  secondTermExpirationDate: Date
  anytimeTerminationWarningMonths: Int
  nonRenewalWarningMonths: Int
  terminationDate: Date
  terminator: ContractTerminator
}

input SurfaceMeasurementMetricOperationFilterInput {
  eq: SurfaceMeasurementMetric
  neq: SurfaceMeasurementMetric
  in: [SurfaceMeasurementMetric!]
  nin: [SurfaceMeasurementMetric!]
}

input SurfaceTypeOperationFilterInput {
  eq: SurfaceType
  neq: SurfaceType
  in: [SurfaceType!]
  nin: [SurfaceType!]
}

input SwitchTenantInput {
  newTenant: UUID!
}

input TakeoverFilterInput {
  and: [TakeoverFilterInput!]
  or: [TakeoverFilterInput!]
  originalSubjectId: IntOperationFilterInput
  newSubjectId: IntOperationFilterInput
  legalRepresentativeSubjectId: IntOperationFilterInput
  takeoverDate: DateOperationFilterInput
  effectiveDate: DateOperationFilterInput
  type: TakeoverTypeOperationFilterInput
  id: IntOperationFilterInput
}

input TakeoverTypeOperationFilterInput {
  eq: TakeoverType
  neq: TakeoverType
  in: [TakeoverType!]
  nin: [TakeoverType!]
}

input TaxConfigInput {
  subValues: [TaxConfigSubValueRowInput!]
  columnValues: [TaxConfigSubValueColumnInput!]
}

input TaxConfigSubValueColumnInput {
  code: String!
  numberValue: Decimal
  stringValue: String
  dateValue: Date
  booleanValue: Boolean
  valueType: SubValueType!
}

input TaxConfigSubValueRowInput {
  subTable: String
  columnValues: [TaxConfigSubValueColumnInput!]!
}

input TaxCreditFilterInput {
  and: [TaxCreditFilterInput!]
  or: [TaxCreditFilterInput!]
  managementSubjectId: IntOperationFilterInput
  taxCode: CustomStringFilterInput
  description: CustomStringFilterInput
  deletionDate: DateTimeOperationFilterInput
  notes: CustomStringFilterInput
  operations: ListFilterInputTypeOfOperationFilterInput
  id: IntOperationFilterInput
}

input TaxCreditSortInput {
  managementSubjectId: SortEnumType
  taxCode: SortEnumType
  description: SortEnumType
  deletionDate: SortEnumType
  notes: SortEnumType
  id: SortEnumType
}

input TaxStatusFilterInput {
  and: [TaxStatusFilterInput!]
  or: [TaxStatusFilterInput!]
  taxStatusType: TaxStatusTypeOperationFilterInput
  notes: CustomStringFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  id: IntOperationFilterInput
}

input TaxStatusInput {
  id: Int
  taxStatusType: TaxStatusType!
  since: Date
  until: Date
}

input TaxStatusTypeOperationFilterInput {
  eq: TaxStatusType
  neq: TaxStatusType
  in: [TaxStatusType!]
  nin: [TaxStatusType!]
}

input TemporaryRegistryCommunicationGroupIdInput {
  managementSubjectId: Int!
  isActiveContract: Boolean!
  communicationType: CommunicationType!
  endDate: Date
}

input TermExtensionFilterInput {
  and: [TermExtensionFilterInput!]
  or: [TermExtensionFilterInput!]
  daysCount: IntOperationFilterInput
  feeDifference: DecimalOperationFilterInput
  notes: CustomStringFilterInput
  id: IntOperationFilterInput
}

input TermExtensionInput {
  id: Int
  daysCount: Int!
  feeDifference: Decimal
  notes: String
}

input TermGroupedInstallmentPaymentInput {
  billId: Int
  installmentNumbers: [Int!]!
  paymentDate: Date!
}

input TermInstallmentFilterInput {
  and: [TermInstallmentFilterInput!]
  or: [TermInstallmentFilterInput!]
  administrationTerm: AdministrationTermFilterInput
  installmentNumber: IntOperationFilterInput
  dueDate: DateOperationFilterInput
  amount: DecimalOperationFilterInput
  notes: CustomStringFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  billItemType: BillItemTypeFilterInput
  payments: ListFilterInputTypeOfBillRowFilterInput
  id: IntOperationFilterInput
}

input TermInstallmentInput {
  id: Int
  installmentNumber: Int!
  billItemTypeId: Int!
  dueDate: Date!
  amount: Decimal!
  since: Date!
  until: Date!
  notes: String
}

input TermTypeOperationFilterInput {
  eq: TermType
  neq: TermType
  in: [TermType!]
  nin: [TermType!]
}

input TicketCatalogueCategoryEqualityConditionInput {
  operator: EqualityOperator!
  targetCatalogueCategoryId: Int!
  id: Int
}

input TicketCatalogueSubCategoryEqualityConditionInput {
  operator: EqualityOperator!
  targetCatalogueSubCategoryId: Int!
  id: Int
}

input TicketCatalogueTypeEqualityConditionInput {
  operator: EqualityOperator!
  targetCatalogueTypeId: Int!
  id: Int
}

input TicketChecklistFilterInput {
  and: [TicketChecklistFilterInput!]
  or: [TicketChecklistFilterInput!]
  catalogueType: CustomStringFilterInput
  catalogueCategory: CustomStringFilterInput
  catalogueSubCategory: CustomStringFilterInput
  estateUnitInternalCode: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  contract: FcltContractFilterInput
  estateUnitId: IntOperationFilterInput
  catalogueTypeId: IntOperationFilterInput
  type: TicketChecklistTemplateTypeOperationFilterInput
  rawWorkCost: DecimalOperationFilterInput
  safetyCost: DecimalOperationFilterInput
  costBaseFactor: CostBaseFactorOperationFilterInput
  preventativePlannedPeriod: NullableOfPlannedPeriodOperationFilterInput
  preventativeDaysOfWeek: ListDayOfWeekOperationFilterInput
  preventativeToleranceDays: IntOperationFilterInput
  preventativeInterventionType: InterventionTypeFilterInput
  preventativeCraft: CraftFilterInput
  preventativeActivityIds: ListIntOperationFilterInput
  onTriggerInterventionType: InterventionTypeFilterInput
  onTriggerCraft: CraftFilterInput
  onTriggerActivityIds: ListIntOperationFilterInput
  id: IntOperationFilterInput
}

input TicketChecklistSortInput {
  catalogueType: SortEnumType
  catalogueCategory: SortEnumType
  catalogueSubCategory: SortEnumType
  estateUnitInternalCode: SortEnumType
  internalCode: SortEnumType
  name: SortEnumType
  contract: FcltContractSortInput
  estateUnitId: SortEnumType
  catalogueTypeId: SortEnumType
  type: SortEnumType
  rawWorkCost: SortEnumType
  safetyCost: SortEnumType
  costBaseFactor: SortEnumType
  preventativePlannedPeriod: SortEnumType
  preventativeToleranceDays: SortEnumType
  preventativeInterventionType: InterventionTypeSortInput
  preventativeCraft: CraftSortInput
  onTriggerInterventionType: InterventionTypeSortInput
  onTriggerCraft: CraftSortInput
  id: SortEnumType
}

input TicketChecklistTemplateFilterInput {
  and: [TicketChecklistTemplateFilterInput!]
  or: [TicketChecklistTemplateFilterInput!]
  catalogueType: CustomStringFilterInput
  catalogueCategory: CustomStringFilterInput
  catalogueSubCategory: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  name: CustomStringFilterInput
  catalogueTypeId: IntOperationFilterInput
  type: TicketChecklistTemplateTypeOperationFilterInput
  rawWorkCost: DecimalOperationFilterInput
  safetyCost: DecimalOperationFilterInput
  costBaseFactor: CostBaseFactorOperationFilterInput
  preventativePlannedPeriod: NullableOfPlannedPeriodOperationFilterInput
  preventativeDaysOfWeek: ListDayOfWeekOperationFilterInput
  preventativeToleranceDays: IntOperationFilterInput
  preventativeInterventionType: InterventionTypeFilterInput
  preventativeCraft: CraftFilterInput
  preventativeActivityIds: ListIntOperationFilterInput
  onTriggerInterventionType: InterventionTypeFilterInput
  onTriggerCraft: CraftFilterInput
  onTriggerActivityIds: ListIntOperationFilterInput
  id: IntOperationFilterInput
}

input TicketChecklistTemplateInput {
  internalCode: String!
  name: String!
  catalogueTypeId: Int!
  type: TicketChecklistTemplateType!
  rawWorkCost: Decimal!
  safetyCost: Decimal!
  costBaseFactor: CostBaseFactor!
  preventativePlannedPeriod: PlannedPeriod
  preventativeDaysOfWeek: [DayOfWeek!]
  preventativeToleranceDays: Int
  preventativeInterventionTypeId: Int
  preventativeCraftId: Int
  preventativeActivityIds: [Int!]
  onTriggerInterventionTypeId: Int
  onTriggerCraftId: Int
  onTriggerActivityIds: [Int!]
}

input TicketChecklistTemplateSortInput {
  catalogueType: SortEnumType
  catalogueCategory: SortEnumType
  catalogueSubCategory: SortEnumType
  internalCode: SortEnumType
  name: SortEnumType
  catalogueTypeId: SortEnumType
  type: SortEnumType
  rawWorkCost: SortEnumType
  safetyCost: SortEnumType
  costBaseFactor: SortEnumType
  preventativePlannedPeriod: SortEnumType
  preventativeToleranceDays: SortEnumType
  preventativeInterventionType: InterventionTypeSortInput
  preventativeCraft: CraftSortInput
  onTriggerInterventionType: InterventionTypeSortInput
  onTriggerCraft: CraftSortInput
  id: SortEnumType
}

input TicketChecklistTemplateTypeOperationFilterInput {
  eq: TicketChecklistTemplateType
  neq: TicketChecklistTemplateType
  in: [TicketChecklistTemplateType!]
  nin: [TicketChecklistTemplateType!]
}

input TicketChecklistTemplatesPerEstateUnitInput {
  estateUnitId: Int!
  templateIds: [Int!]!
}

input TicketConditionFilterInput {
  and: [TicketConditionFilterInput!]
  or: [TicketConditionFilterInput!]
  id: IntOperationFilterInput
}

input TicketDocumentsFlatOutputFilterInput {
  and: [TicketDocumentsFlatOutputFilterInput!]
  or: [TicketDocumentsFlatOutputFilterInput!]
  ticketInternalCode: CustomStringFilterInput
  isTicketExcludedFromMaintenanceContract: BooleanOperationFilterInput
  document: DocumentFilterInput
}

input TicketDocumentsOutputSortInput {
  guid: SortEnumType
  ticketInternalCode: SortEnumType
  isTicketExcludedFromMaintenanceContract: SortEnumType
}

input TicketFilterInput {
  and: [TicketFilterInput!]
  or: [TicketFilterInput!]
  supplierSubjectName: CustomStringFilterInput
  locationEstateUnitInternalCode: CustomStringFilterInput
  requestYear: IntOperationFilterInput
  isMandatoryByLaw: BooleanOperationFilterInput
  internalCode: CustomStringFilterInput
  mainType: TicketMainTypeOperationFilterInput
  masterStatus: TicketMasterStatusOperationFilterInput
  locationEstateUnitId: IntOperationFilterInput
  locationFloorId: IntOperationFilterInput
  locationSector: CustomStringFilterInput
  locationRoom: CustomStringFilterInput
  requestor: CustomStringFilterInput
  requestorContactEmail: CustomStringFilterInput
  requestorContactPhone: CustomStringFilterInput
  requestDateTime: DateTimeOperationFilterInput
  dueDate: DateOperationFilterInput
  isExcludedFromMaintenanceContract: BooleanOperationFilterInput
  isWorkSafetyExpected: BooleanOperationFilterInput
  workOrderReference: CustomStringFilterInput
  customType: TicketTypeFilterInput
  priority: PriorityOperationFilterInput
  catalogueTypeId: IntOperationFilterInput
  catalogueItemIds: ListIntOperationFilterInput
  contract: FcltContractFilterInput
  checklist: TicketChecklistFilterInput
  summary: CustomStringFilterInput
  description: CustomStringFilterInput
  performedActivities: ListFilterInputTypeOfPerformedActivityFilterInput
  reminders: ListFilterInputTypeOfReminderFilterInput
  history: ListFilterInputTypeOfTicketHistoryEntryFilterInput
  replies: ListFilterInputTypeOfReplyFilterInput
  workers: ListFilterInputTypeOfWorkerFilterInput
  children: ListFilterInputTypeOfTicketFilterInput
  resolution: ResolutionFilterInput
  quote: QuoteFilterInput
  supplierSubjectId: IntOperationFilterInput
  plannedTeam: WorkTeamFilterInput
  plannedTeamLeaderUserId: IntOperationFilterInput
  isOverduePlannedPeriod: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

input TicketHistoryEntryFilterInput {
  and: [TicketHistoryEntryFilterInput!]
  or: [TicketHistoryEntryFilterInput!]
  timestamp: DateTimeOperationFilterInput
  userId: IntOperationFilterInput
  id: IntOperationFilterInput
}

input TicketInput {
  locationEstateUnitId: Int!
  locationFloorId: Int
  locationSector: String
  locationRoom: String
  internalCode: String!
  masterStatus: TicketMasterStatus!
  isWorkSafetyExpected: Boolean!
  workOrderReference: String
  requestor: String
  requestorContactEmail: String
  requestorContactPhone: String
  requestDateTime: DateTime!
  dueDate: Date!
  customTypeId: Int
  priority: Priority!
  catalogueTypeId: Int!
  catalogueItemIds: [Int!]!
  summary: String
  description: String
  reminders: [ReminderInput!]!
  resolution: ResolutionInput!
  performedActivityInputs: [PerformedActivityInput!]!
  supplierSubjectId: Int!
  plannedTeamId: Int
  plannedTeamLeaderUserId: Int
  workers: [WorkerInput!]!
  quote: QuoteInput
}

input TicketMainTypeOperationFilterInput {
  eq: TicketMainType
  neq: TicketMainType
  in: [TicketMainType!]
  nin: [TicketMainType!]
}

input TicketMasterStatusConditionInput {
  targetMasterStatus: TicketMasterStatus!
  calendarId: Int!
  timeComparisonOperator: ComparisonOperator!
  minTimePeriodInMinutes: Int
  maxTimePeriodInMinutes: Int
  id: Int
}

input TicketMasterStatusOperationFilterInput {
  eq: TicketMasterStatus
  neq: TicketMasterStatus
  in: [TicketMasterStatus!]
  nin: [TicketMasterStatus!]
}

input TicketPriorityEqualityConditionInput {
  operator: EqualityOperator!
  targetPriority: Priority!
  id: Int
}

input TicketSortInput {
  supplierSubjectName: SortEnumType
  internalCode: SortEnumType
  mainType: SortEnumType
  masterStatus: SortEnumType
  locationEstateUnitId: SortEnumType
  locationFloorId: SortEnumType
  locationSector: SortEnumType
  locationRoom: SortEnumType
  requestor: SortEnumType
  requestorContactEmail: SortEnumType
  requestorContactPhone: SortEnumType
  requestDateTime: SortEnumType
  dueDate: SortEnumType
  isExcludedFromMaintenanceContract: SortEnumType
  isWorkSafetyExpected: SortEnumType
  workOrderReference: SortEnumType
  customType: TicketTypeSortInput
  priority: SortEnumType
  catalogueTypeId: SortEnumType
  contract: FcltContractSortInput
  checklist: TicketChecklistSortInput
  summary: SortEnumType
  description: SortEnumType
  resolution: ResolutionSortInput
  quote: QuoteSortInput
  supplierSubjectId: SortEnumType
  plannedTeam: WorkTeamSortInput
  plannedTeamLeaderUserId: SortEnumType
  isOverduePlannedPeriod: SortEnumType
  id: SortEnumType
}

input TicketTypeEqualityConditionInput {
  operator: EqualityOperator!
  targetTicketTypeId: Int!
  id: Int
}

input TicketTypeFilterInput {
  and: [TicketTypeFilterInput!]
  or: [TicketTypeFilterInput!]
  internalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  ordering: IntOperationFilterInput
  id: IntOperationFilterInput
}

input TicketTypeInput {
  description: String!
  internalCode: String!
  ordering: Int!
}

input TicketTypeSortInput {
  internalCode: SortEnumType
  description: SortEnumType
  ordering: SortEnumType
  id: SortEnumType
}

input TicketsPerEstateUnitSortInput {
  locationEstateUnitInternalCode: SortEnumType
  locationEstateUnitId: SortEnumType
}

input TicketsPerEstateUnitsPerYearSortInput {
  requestYear: SortEnumType
}

input TimeRangeFilterInput {
  and: [TimeRangeFilterInput!]
  or: [TimeRangeFilterInput!]
  since: TimeSpanOperationFilterInput
  until: TimeSpanOperationFilterInput
}

input TimeRangeInput {
  since: TimeSpan!
  until: TimeSpan!
}

input TimeSpanOperationFilterInput {
  eq: TimeSpan
  neq: TimeSpan
  in: [TimeSpan]
  nin: [TimeSpan]
  gt: TimeSpan
  ngt: TimeSpan
  gte: TimeSpan
  ngte: TimeSpan
  lt: TimeSpan
  nlt: TimeSpan
  lte: TimeSpan
  nlte: TimeSpan
}

input TransactorFilterInput {
  and: [TransactorFilterInput!]
  or: [TransactorFilterInput!]
  subjectId: IntOperationFilterInput
  addressId: IntOperationFilterInput
  invoiceAddressId: IntOperationFilterInput
  transactionSharePercent: FloatOperationFilterInput
  isInvoiced: BooleanOperationFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  type: PaymentTypeOperationFilterInput
  id: IntOperationFilterInput
}

input TransactorInput {
  id: Int
  subjectId: Int!
  addressId: Int!
  invoiceAddressId: Int!
  transactionSharePercent: Float!
  isInvoiced: Boolean!
  since: Date!
  until: Date
  type: PaymentType!
}

input UnitConditionOperationFilterInput {
  eq: UnitCondition
  neq: UnitCondition
  in: [UnitCondition!]
  nin: [UnitCondition!]
}

input UnitExpensesFilterInput {
  and: [UnitExpensesFilterInput!]
  or: [UnitExpensesFilterInput!]
  estateUnit: EstateUnitFilterInput
  referenceYear: IntOperationFilterInput
  amount: DecimalOperationFilterInput
  revaluationFactor: FloatOperationFilterInput
  id: IntOperationFilterInput
}

input UpdatePriceListArticleInput {
  internalCode: String!
  name: String!
  measurementUnitId: Int!
  priceListId: Int!
  catalogueTypeIds: [Int!]!
  pricePeriods: [ArticlePricePeriodInput!]!
}

input UpdateTicketChecklistInput {
  internalCode: String!
  name: String!
  rawWorkCost: Decimal!
  safetyCost: Decimal!
  costBaseFactor: CostBaseFactor!
  preventativePlannedPeriod: PlannedPeriod
  preventativeDaysOfWeek: [DayOfWeek!]
  preventativeToleranceDays: Int
  preventativeActivityIds: [Int!]
  onTriggerActivityIds: [Int!]
}

input UsageTypeDistributionFilterInput {
  and: [UsageTypeDistributionFilterInput!]
  or: [UsageTypeDistributionFilterInput!]
  percentage: FloatOperationFilterInput
  usageTypeName: CustomStringFilterInput
}

input UsageTypeDistributionSortInput {
  percentage: SortEnumType
  usageTypeName: SortEnumType
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  groupName: CustomStringFilterInput
  managementSubjectName: CustomStringFilterInput
  userName: CustomStringFilterInput
  type: UserTypeOperationFilterInput
  status: UserStatusOperationFilterInput
  officeAccess: OfficeAccessOperationFilterInput
  supplierSubjectId: IntOperationFilterInput
  preferredLanguageCode: CustomStringFilterInput
  firstName: CustomStringFilterInput
  lastName: CustomStringFilterInput
  suspensionReason: CustomStringFilterInput
  creationDate: DateTimeOperationFilterInput
  ceasedDate: DateTimeOperationFilterInput
  lastPasswordUpdated: DateTimeOperationFilterInput
  lastLoggedIn: DateTimeOperationFilterInput
  lastLogInAttempt: DateTimeOperationFilterInput
  lockedSince: DateTimeOperationFilterInput
  lockedUntil: DateTimeOperationFilterInput
  enabledSince: DateTimeOperationFilterInput
  deletionDate: DateTimeOperationFilterInput
  passwordExpiredSince: DateTimeOperationFilterInput
  mainDashboard: ListFilterInputTypeOfWidgetSectionFilterInput
  facilityDashboard: ListFilterInputTypeOfWidgetSectionFilterInput
  contacts: ListFilterInputTypeOfContactFilterInput
  sessions: ListFilterInputTypeOfSessionFilterInput
  subjects: ListIntOperationFilterInput
  orgUnits: ListIntOperationFilterInput
  id: IntOperationFilterInput
}

input UserSortInput {
  userName: SortEnumType
  type: SortEnumType
  status: SortEnumType
  officeAccess: SortEnumType
  supplierSubjectId: SortEnumType
  preferredLanguageCode: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  suspensionReason: SortEnumType
  creationDate: SortEnumType
  ceasedDate: SortEnumType
  lastPasswordUpdated: SortEnumType
  lastLoggedIn: SortEnumType
  lastLogInAttempt: SortEnumType
  lockedSince: SortEnumType
  lockedUntil: SortEnumType
  enabledSince: SortEnumType
  deletionDate: SortEnumType
  passwordExpiredSince: SortEnumType
  id: SortEnumType
}

input UserStatusOperationFilterInput {
  eq: UserStatus
  neq: UserStatus
  in: [UserStatus!]
  nin: [UserStatus!]
}

input UserTypeOperationFilterInput {
  eq: UserType
  neq: UserType
  in: [UserType!]
  nin: [UserType!]
}

input UtilityCategoryOperationFilterInput {
  eq: UtilityCategory
  neq: UtilityCategory
  in: [UtilityCategory!]
  nin: [UtilityCategory!]
}

input UtilityChargeFieldFilterInput {
  and: [UtilityChargeFieldFilterInput!]
  or: [UtilityChargeFieldFilterInput!]
  name: CustomStringFilterInput
  isMandatory: BooleanOperationFilterInput
  id: UuidOperationFilterInput
  type: CustomFieldTypeOperationFilterInput
  validValues: ListCustomStringFilterInput
}

input UtilityChargeFieldInput {
  name: String!
  isMandatory: Boolean!
  id: UUID
  type: CustomFieldType!
  validValues: [String!]
}

input UtilityServiceFilterInput {
  and: [UtilityServiceFilterInput!]
  or: [UtilityServiceFilterInput!]
  utilityType: UtilityTypeFilterInput
  estateInternalCode: CustomStringFilterInput
  estateUnitInternalCode: CustomStringFilterInput
  providerSubjectName: CustomStringFilterInput
  providerSubjectInternalCode: CustomStringFilterInput
  providerSubjectProfessionalTaxIdCode: CustomStringFilterInput
  providerSubjectBaseCountryTaxIdCode: CustomStringFilterInput
  referenceSubjectName: CustomStringFilterInput
  orgUnitName: CustomStringFilterInput
  accountingItemInternalCode: CustomStringFilterInput
  accountingItemDescription: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  estateIds: ListIntOperationFilterInput
  estateUnitIds: ListIntOperationFilterInput
  providerSubjectId: IntOperationFilterInput
  referenceSubjectId: IntOperationFilterInput
  orgUnitId: IntOperationFilterInput
  accountingItemId: IntOperationFilterInput
  description: CustomStringFilterInput
  utilityUserCode: CustomStringFilterInput
  utilityContractCode: CustomStringFilterInput
  utilityMeterSerial: CustomStringFilterInput
  utilityDeliveryPointCode: CustomStringFilterInput
  isFreeMarket: BooleanOperationFilterInput
  deposit: DecimalOperationFilterInput
  status: EntryStatusOperationFilterInput
  activationDate: DateOperationFilterInput
  deactivationRequestDate: DateOperationFilterInput
  deactivationDate: DateOperationFilterInput
  contractPowerMaximum: CustomStringFilterInput
  contractPowerNominal: CustomStringFilterInput
  contractNominalTension: CustomStringFilterInput
  notes: CustomStringFilterInput
  id: IntOperationFilterInput
}

input UtilityServiceInput {
  internalCode: String!
  utilityTypeId: Int!
  estateIds: [Int!]!
  estateUnitIds: [Int!]!
  providerSubjectId: Int!
  referenceSubjectId: Int!
  orgUnitId: Int!
  accountingItemId: Int!
  description: String
  utilityUserCode: String!
  utilityContractCode: String!
  utilityMeterSerial: String
  utilityDeliveryPointCode: String
  isFreeMarket: Boolean!
  deposit: Decimal
  status: EntryStatus!
  activationDate: Date!
  contractPowerMaximum: String
  contractPowerNominal: String
  contractNominalTension: String
  notes: String
}

input UtilityServiceSortInput {
  utilityType: UtilityTypeSortInput
  providerSubjectName: SortEnumType
  providerSubjectInternalCode: SortEnumType
  providerSubjectProfessionalTaxIdCode: SortEnumType
  providerSubjectBaseCountryTaxIdCode: SortEnumType
  referenceSubjectName: SortEnumType
  orgUnitName: SortEnumType
  accountingItemInternalCode: SortEnumType
  accountingItemDescription: SortEnumType
  internalCode: SortEnumType
  providerSubjectId: SortEnumType
  referenceSubjectId: SortEnumType
  orgUnitId: SortEnumType
  accountingItemId: SortEnumType
  description: SortEnumType
  utilityUserCode: SortEnumType
  utilityContractCode: SortEnumType
  utilityMeterSerial: SortEnumType
  utilityDeliveryPointCode: SortEnumType
  isFreeMarket: SortEnumType
  deposit: SortEnumType
  status: SortEnumType
  activationDate: SortEnumType
  deactivationRequestDate: SortEnumType
  deactivationDate: SortEnumType
  contractPowerMaximum: SortEnumType
  contractPowerNominal: SortEnumType
  contractNominalTension: SortEnumType
  notes: SortEnumType
  id: SortEnumType
}

input UtilityTypeFilterInput {
  and: [UtilityTypeFilterInput!]
  or: [UtilityTypeFilterInput!]
  category: UtilityCategoryOperationFilterInput
  description: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  externalCode: CustomStringFilterInput
  expenseClass: CustomStringFilterInput
  measurementUnit: CustomStringFilterInput
  measurementUnitDescription: CustomStringFilterInput
  timeOfUseRateCount: IntOperationFilterInput
  meteringType: MeteringTypeOperationFilterInput
  hasHeatingAccountingSystem: BooleanOperationFilterInput
  chargeFields: ListListFilterInputTypeOfUtilityChargeFieldFilterInput
  id: IntOperationFilterInput
}

input UtilityTypeInput {
  category: UtilityCategory!
  description: String!
  internalCode: String!
  externalCode: String
  expenseClass: String
  measurementUnit: String!
  measurementUnitDescription: String!
  timeOfUseRateCount: Int!
  meteringType: MeteringType!
  hasHeatingAccountingSystem: Boolean!
  chargeFields: [[UtilityChargeFieldInput!]!]
}

input UtilityTypeSortInput {
  category: SortEnumType
  description: SortEnumType
  internalCode: SortEnumType
  externalCode: SortEnumType
  expenseClass: SortEnumType
  measurementUnit: SortEnumType
  measurementUnitDescription: SortEnumType
  timeOfUseRateCount: SortEnumType
  meteringType: SortEnumType
  hasHeatingAccountingSystem: SortEnumType
  id: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input VATRateFilterInput {
  and: [VATRateFilterInput!]
  or: [VATRateFilterInput!]
  internalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  type: VATRateTypeOperationFilterInput
  ratePercent: FloatOperationFilterInput
  id: IntOperationFilterInput
}

input VATRateInput {
  id: Int
  internalCode: String!
  description: String
  type: VATRateType!
  ratePercent: Float!
}

input VATRateSortInput {
  internalCode: SortEnumType
  description: SortEnumType
  type: SortEnumType
  ratePercent: SortEnumType
  id: SortEnumType
}

input VATRateTypeOperationFilterInput {
  eq: VATRateType
  neq: VATRateType
  in: [VATRateType!]
  nin: [VATRateType!]
}

input ValuationFilterInput {
  and: [ValuationFilterInput!]
  or: [ValuationFilterInput!]
  referenceYear: IntOperationFilterInput
  iasValue: DecimalOperationFilterInput
  rbaValue: DecimalOperationFilterInput
  mortgageAmount: DecimalOperationFilterInput
  transferYear: IntOperationFilterInput
  revampOperations: IntOperationFilterInput
  id: IntOperationFilterInput
}

input WidgetConfigFilterInput {
  and: [WidgetConfigFilterInput!]
  or: [WidgetConfigFilterInput!]
  width: IntOperationFilterInput
  type: CustomStringFilterInput
  id: IntOperationFilterInput
}

input WidgetConfigInput {
  id: Int
  width: Int!
  type: String!
}

input WidgetSectionFilterInput {
  and: [WidgetSectionFilterInput!]
  or: [WidgetSectionFilterInput!]
  title: CustomStringFilterInput
  backgroundColor: CustomStringFilterInput
  rows: ListFilterInputTypeOfWidgetSectionRowFilterInput
  id: IntOperationFilterInput
}

input WidgetSectionInput {
  id: Int
  title: String
  backgroundColor: String
  rows: [WidgetSectionRowInput!]!
}

input WidgetSectionRowFilterInput {
  and: [WidgetSectionRowFilterInput!]
  or: [WidgetSectionRowFilterInput!]
  widgets: ListFilterInputTypeOfWidgetConfigFilterInput
  id: IntOperationFilterInput
}

input WidgetSectionRowInput {
  id: Int
  widgets: [WidgetConfigInput!]!
}

input WorkTeamFilterInput {
  and: [WorkTeamFilterInput!]
  or: [WorkTeamFilterInput!]
  providerSubjectName: CustomStringFilterInput
  leaderUserName: CustomStringFilterInput
  internalCode: CustomStringFilterInput
  description: CustomStringFilterInput
  providerSubjectId: IntOperationFilterInput
  leaderUserId: IntOperationFilterInput
  insertionDate: DateOperationFilterInput
  workers: ListFilterInputTypeOfWorkerFilterInput
  id: IntOperationFilterInput
}

input WorkTeamInput {
  internalCode: String!
  description: String!
  providerSubjectId: Int!
  leaderUserId: Int!
  insertionDate: Date!
  workers: [WorkerInput!]!
}

input WorkTeamSortInput {
  providerSubjectName: SortEnumType
  leaderUserName: SortEnumType
  internalCode: SortEnumType
  description: SortEnumType
  providerSubjectId: SortEnumType
  leaderUserId: SortEnumType
  insertionDate: SortEnumType
  id: SortEnumType
}

input WorkerFilterInput {
  and: [WorkerFilterInput!]
  or: [WorkerFilterInput!]
  firstName: CustomStringFilterInput
  lastName: CustomStringFilterInput
  since: DateOperationFilterInput
  until: DateOperationFilterInput
  craft: CraftFilterInput
  qualificationLevel: QualificationLevelFilterInput
  id: IntOperationFilterInput
}

input WorkerInput {
  id: Int
  firstName: String!
  lastName: String!
  since: Date!
  until: Date
  craftId: Int!
  qualificationLevelId: Int!
}

enum AddressType {
  LEGAL_RESIDENTIAL
  FISCAL
  MAILING
  CARE_OF
  BIRTH_LOCATION
}

enum AdministrationType {
  GENERIC
  RENT_GENERAL
  SERVICE_PROVIDER
  HEATING_PROVIDER
  OWNER
  BUILDING_COMPLEX
  HEATING
  CONCIERGE
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum AssetNature {
  UNDEFINED
  BUILDING
  LAND
}

enum AsstAddressType {
  PRIMARY
  OTHER_ADDRESS
}

enum AutomaticBoolean {
  AUTOMATIC
  TRUE
  FALSE
}

enum BankAccountCodeType {
  IBAN
}

enum BankAccountType {
  MAIN
  BACKUP
}

enum BillEmissionType {
  MANUAL
  AUTOMATIC
}

enum BillingPeriod {
  MONTHLY
  BIMONTHLY
  PER_QUARTER
  PER_QUADRIMESTER
  PER_SEMESTER
  YEARLY
}

enum BirthSex {
  MALE
  FEMALE
}

enum BooleanOperator {
  AND
  OR
}

enum CadastralExpenseType {
  BALANCE_INGRESS_VALUE
  INCREMENT
}

enum CadastralUnitStatus {
  EXISTING
  CANCELLED
  DISCONTINUED_SPLIT
  DISCONTINUED_MERGE
  TRANSFORMED
  CHANGED
}

enum CalculationIssue {
  MISSING_OR_ZERO_RATE
  MISSING_OR_INVALID_OWNERSHIP_DATES
  MISSING_CADASTRAL_CATEGORY
  MISSING_CADASTRAL_INCOME_DATA
}

enum CatalogueTypeActivityType {
  ON_INCIDENT
  PLANNED_MAINTENANCE
}

enum CommunicationType {
  ITA_RLI12_FIRST_REGISTRATION
  ITA_RLI12_UPDATE
  ITA_RLI12_TAKEOVER
  ITA_RLI12_DEATH
  ITA_RLI12_TRANSFER
}

enum CompanyGroup {
  MEMBER
  LEADER
}

enum ComparisonOperator {
  BETWEEN
  GREATER_THAN
  LESS_THAN
}

enum ConfigFunction {
  CMIS_ENDPOINT
  GEOCODER
  SEPA_XML_EXPORT
  EXTERNAL_LOGIN
  PASSWORD_LOGIN
  DATA_IMPORT
}

enum ContactInfoType {
  UNKNOWN
  LANDLINE_PHONE
  MOBILE_PHONE
  E_MAIL
  REGISTERED_EMAIL
  SKYPE
}

enum ContactType {
  MAIN
  BACKUP
}

enum ContentCategory {
  GENERIC
  SBJ_IDENTITY_NATIONAL
  SBJ_IDENTITY_PASSPORT
  SBJ_OTHER
  BLD_PLAN
  BLD_PHOTO
  BLD_ADMIN_GENERIC
  BLD_ADMIN_CONTEXT
  BLD_ADMIN_OWNERSHIP
  BLD_ADMIN_LIMITATIONS
  BLD_ADMIN_CADASTRE
  BLD_ADMIN_ORIGIN
  BLD_ADMIN_GOVERNMENT
  BLD_ADMIN_PERMITS_APPROVALS
  BLD_ADMIN_COMMUNICATIONS
  BLD_TECH_GENERIC
  BLD_TECH_STRUCTURE
  BLD_TECH_BUILDTECH
  BLD_TECH_REFACTORING
  BLD_TECH_SYSTEMS
  BLD_TECH_FIREPROOFING
  BLD_TECH_SAFETY_AND_EVACUATION
  BLD_TECH_OBSTACLES
  BLD_TECH_ENERGY_ACOUSTICS
  BLD_TECH_ASBESTO_AND_MSDS
  BLD_TECH_COMMUNICATIONS
  BLD_MGMT_GENERIC
  BLD_MGMT_USAGE
  BLD_MGMT_CONDOMINIUM
  BLD_MGMT_LITIGATION
  BLD_MGMT_REVAMPING
  BLD_MGMT_PROCUREMENT
  BLD_MGMT_SELLING
  BLD_MGMT_UTILITIES
  BLD_MGMT_INSURANCE
  BLD_MGMT_MAINTENANCE
  BLD_MGMT_INSPECTIONS
  BLD_MGMT_INCIDENTS_REPORTS
  BLD_MGMT_EQUIPMENT_MANUALS
  BLD_MGMT_EQUIPMENT_WARRANTIES
  BLD_MGMT_SAFETY_TRAINING
  BLD_MGMT_COMMUNICATIONS
  CAT_ADMIN_GENERIC
  CAT_ADMIN_OWNERSHIP
  CAT_ADMIN_CONTRACTS
  CAT_ADMIN_COMMUNICATIONS
  CAT_TECH_GENERIC
  CAT_TECH_MANUALS
  CAT_TECH_DATASHEETS
  CAT_TECH_CERTIFICATIONS
  CAT_TECH_COMMUNICATIONS
  CAT_MGMT_GENERIC
  CAT_MGMT_MAINTENANCE_OPERATION
  CAT_MGMT_INSPECTIONS
  CAT_MGMT_OPERATIONAL_REPORTS
  CAT_MGMT_EQUIPMENT_MANUALS
  CAT_MGMT_EQUIPMENT_WARRANTIES
  CAT_MGMT_SAFETY_TRAINING
  CAT_MGMT_COMMUNICATIONS
}

enum ContentType {
  GENERIC
  PAPER
  IMAGE
  VIDEO
  EMAIL
  PDF
  CAD_DRAWING
  SPREADSHEET
}

enum ContractTerminator {
  LANDLORD
  TENANT
}

enum CoordinateType {
  GENERIC_OVERRIDE
  ITALIAN_ORDINARY
}

enum CostBaseFactor {
  FORFAIT
  SQ_M
}

enum CostChargeAnalysisCategory {
  OTHER
  WATER
  ELECTRICITY
  GAS
}

enum CounterpartType {
  REGULAR
  NON_PROFIT
  PHYSICAL_SUBJECT_WITH_TEMPORARY_ID
}

enum CustomFieldType {
  SIMPLE_TEXT
  SIMPLE_NUMBER
  DATE
  SINGLE_ITEM_FROM_LIST
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum EntryStatus {
  INCOMPLETE_DRAFT
  WORKING
  FROZEN_CLOSED
}

enum EqualityOperator {
  EQUAL
  NOT_EQUAL
}

enum EstateMarketValueType {
  MAX_VALUE_PER_SQ_M
  MIN_VALUE_PER_SQ_M
  MOST_COMMON_VALUE_PER_SQ_M
}

enum EstateOwnership {
  FREEHOLD
  LOAN
  EASEMENT
  LEASING
  OVERGROUND_ONLY
  UNDERGROUND_ONLY
  THIRD_PARTY
  MIXED
}

enum EstateStatus {
  OPERATIONAL
  DECOMMISSIONED
}

enum EstateTotalMarketValueCoefficientType {
  OBSOLESCENCE
  AGE
}

enum EstateType {
  UNDEFINED
  LAND_PLOT_UNDEVELOPED
  LAND_PLOT_BUILDABLE
  URBAN_PLOT
  BUILDING
  MIXED
}

enum EstateUnitHeritageType {
  BUILDING
  LAND
}

enum EstateUnitOwnershipType {
  LOAN
  SURFACE_RIGHTS
  SUBSOIL_RIGHTS
  THIRD_PARTIES
  LEASING
  RIGHT_OF_USE
  PROPERTY
}

enum EstateUnitStatus {
  DISCONTINUED_SPLIT
  DISCONTINUED_MERGE
  EXISTING
  DISUSED
  TRANSFORMED
  SOLD
  RETURNED
  CANCELLED
}

enum EstateUnitType {
  BUILDING
  OTHER
  BUILDING_AREA
  URBAN_AREA
  GROUND
}

enum GeoJSONGeometryType {
  Point
  MultiPoint
  LineString
  MultiLineString
  Polygon
  MultiPolygon
  GeometryCollection
}

enum HolidayPeriodicity {
  YEARLY
  ONCE
}

enum IncomeMetric {
  ROOMS
  ARES
  SQUARE_METRES
  CUBIC_METRES
}

enum IncomeType {
  ACTUAL_INCOME
  PRESUMED_INCOME
  PROPOSED_INCOME_BY_LAW_IT701_94
  BALANCE_SHEET_VALUE
}

enum LegalSubjectType {
  ACTUAL_LEGAL_SUBJECT
  UNRECOGNIZED_BUSINESS_SOCIETY
  UNRECOGNIZED_NONBUSINESS_SOCIETY
}

enum LineChartType {
  DAILY
  WEEKLY
  MONTHLY
}

enum MeteringType {
  INCREMENTAL_READING
  USAGE
}

enum NotificationStatus {
  NEW
  UNREAD
  READ
}

enum OccupantType {
  COMMON_AREA
  THIRD_PARTIES
  COMPANY_GROUP_MEMBER
}

enum OfficeAccess {
  BOTH
  BACK_OFFICE
  FRONT_OFFICE
}

enum OfficerType {
  LEGAL_REPRESENTATIVE
  SPECIAL_LEGAL_REPRESENTATIVE
  TRUSTEE
  CURATOR
  EXECUTOR_ADMINISTRATOR
  GUARDIAN
  ATTORNEY
}

enum OrgUnitType {
  MANAGEMENT_HIERARCHY
  GEOGRAPHICAL_HIERARCHY
  COST_CENTRE
}

enum PaymentType {
  UNDEFINED
  CASH
  CHECK
  WIRE_TRANSFER
  SALARY_DEDUCTION
  ASCI
  ASTR
  AITO
  MAV
  RID
  POST_ACCOUNT
  CCPM
  F23
  NOPA
  DEBT_NOTE
}

enum PenaltyType {
  FIXED
  PERCENTAGE
}

enum PerformedActivityStatus {
  TO_BE_PERFORMED
  PERFORMED_SUCCESSFULLY
  PERFORMED_UNSUCCESSFULLY
  CANNOT_PERFORM
}

enum PersonType {
  PHYSICAL_PERSON
  LEGAL_PERSON
  MANAGEMENT_SUBJECT
}

enum PlannedPeriod {
  DAILY
  MIDWEEK
  WEEKLY
  BIWEEKLY
  THRICE_WEEKLY
  MONTHLY
  BIMONTHLY
  QUARTERLY
  EVERY_FOUR_MONTHS
  SEMIANNUAL
  ANNUAL
}

enum Priority {
  MINOR
  NORMAL
  MAJOR
  CRITICAL
}

enum QuoteMasterStatus {
  NEW
  IN_PROGRESS
  COMPLETED
}

enum RateAreaType {
  NO_GROUPING
  BY_CITY
  BY_COUNTY
  BY_REGION
}

enum Reason {
  NOT_SPECIFIED
  RENT_START
  MODIFICATIONS_TO_EXISTING
  RATIFICATION
  SILENT_RENEWAL
  TRANSFER
}

enum RegistrationDateType {
  IT_WRITTEN_AT_DATE
  IT_TRANSCRIPTION_DATE
  IT_NOTARY_ACT_DATE
}

enum RegistrationFieldType {
  IT_REPERTOIRE_NUMBER
  IT_WRITTEN_AT_CITY
  IT_TRANSCRIPTION_NUMBER
  IT_TRANSCRIPTION_CITY
  IT_COLLECTION_NUMBER
}

enum RegistrationPaymentType {
  PAYMENT
  MANUAL_INPUT
}

enum RegistrationTaxExemption {
  STAMP
  DUTIES
  STAMP_AND_DUTIES
}

enum RegistrationTaxIncomeType {
  OTHER_ESTATES
  FARMLAND
  URBAN_ESTATES
  OTHER_LEASING
  RESIDENTIAL_LEASING
  NONRESIDENTIAL_LEASING
  NONRESIDENTIAL_LEASING_WITH_VAT
  OTHER_RENTAL_LAW133_ART6
  OTHER_RENTAL_LAW633_ART10
  RESIDENTIAL_RENTAL_BY_BUILDERS
  RESIDENTIAL_RENTAL_LAW133_ART6
  RESIDENTIAL_RENTAL_LAW633_ART10
  NONRESIDENTIAL_RENTAL
  NONRESIDENTIAL_RENTAL_LAW133_ART6
  NONRESIDENTIAL_RENTAL_LAW633_ART10
  NONRESIDENTIAL_RENTAL_WITH_VAT
}

enum RegistrationTaxIncomeTypeRLI {
  ITA_L1_RESIDENTIAL
  ITA_L2_RESIDENTIAL_DISCOUNT
  ITA_L3_RESIDENTIAL_WITH_VAT
  ITA_L4_RESIDENTIAL_FINANCIAL
  ITA_S1_NONRESIDENTIAL
  ITA_S2_INSTRUMENTAL_WITH_VAT
  ITA_S3_NONRESIDENTIAL_FINANCIAL
  ITA_T1_FARMLAND
  ITA_T2_FARMLAND_DISCOUNT
  ITA_T3_NONBUILDABLE_LAND
  ITA_T4_NONBUILDABLE_PARKING_WITH_VAT
}

enum RegistrationTaxPaymentType {
  UNDEFINED
  ITA_F24_ELIDE
  ITA_TELEMATICO
}

enum RegistrationTaxPeriod {
  ENTIRE_DURATION
  YEAR
}

enum RegistrationTaxSpecialCase {
  ITA_1_YEARS_WITH_DIFFERENT_RATES
  ITA_2_SUBLETTING
  ITA_3_YEARS_WITH_RATES_DIFFERENT_FROM_WHOLE
}

enum ReleaseReason {
  NOT_RENEWED_AT_TERMINATION
  WITHDRAWAL
  TERMINATION
}

enum ReportFormat {
  EXCEL
  PDF
}

enum RepossessionReason {
  OTHER
  TENANT_DEFAULT
  CITY_DECREE
  SQUATTING
  EMERGENCY_MAINTENANCE
  GOODWILL_LOAN
  TECHNICAL_DIFFICULTIES
  JUDICIARY_INJUCTION
  GIVEN_BACK_FORCED_SALE
  GIVEN_BACK_JUDICIARY_OFFICIAL
  ESTATE_STATUS_CHECK
  NEGOTIATION_OCCUPATION_PAYBACK
  NEGOTIATION_COMMERCIAL_LOCATION
}

enum RepossessionType {
  CHECK_BEFORE
  REPOSSESSION
  BLOCKED_REPOSSESSION
  INCOMPLETE_REPOSSESSION
}

enum ResultStatus {
  OK
  ERROR
  FORBIDDEN
  UNAUTHORIZED
  INVALID
  NOT_FOUND
  CONFLICT
  CRITICAL_ERROR
  UNAVAILABLE
}

enum RevaluationRateType {
  ACTUAL_RATE
  BASE_RATE
  MULTIYEAR_RATE
}

enum SecurityDepositType {
  CASH
  BANK_ACCOUNT
  INSURANCE_SURETY
  BANK_SURETY
}

enum ServiceActivityType {
  ON_INCIDENT
  PLANNED_MAINTENANCE
}

enum SortEnumType {
  ASC
  DESC
}

enum SubValueType {
  STRING
  NUMBER
  BOOLEAN
  DATE
  CURRENCY
  CITY
}

enum SubjectRelationType {
  COMPANY_GROUP
  MANAGEMENT_ENTITY_OWNED
  OFFICER
  SUB_ORGANIZATION
  HEIR
}

enum SurfaceMeasurementMetric {
  ROOMS
  SQUARE_METRE_NET_NORMAL
  SQUARE_METRE_NET_LOW_CEILING
  SQUARE_METRE_GROSS_NORMAL
  SQUARE_METRE_HEATING_COOLING
}

enum SurfaceType {
  MAIN_AREA
  SIDE_AREA
  COMMON_AREA
}

enum TakeoverType {
  ITA_T1_DEMISE
  ITA_T2_RIGHTS_TRANSFER
  ITA_T3_COMPANY_TRANSFORMATION
  ITA_T4_COMPANY_MERGER
  ITA_T5_COMPANY_SPLIT
  ITA_T6_OTHERS
}

enum TaxStatusType {
  APPLY_SPLIT_PAYMENT
  VAT_SUBJECT_AS_TENANT
  VAT_SUBJECT_AS_LANDLORD
}

enum TermType {
  GENERIC
  HEATING
  EXTRAORDINARY_NON_ASSET
  EXTRAORDINARY_ASSET
}

enum TicketChecklistTemplateType {
  PREVENTATIVE
  ON_TRIGGER_CONDITION
  PREVENTATIVE_AND_ON_TRIGGER_CONDITION
}

enum TicketMainType {
  ISSUE
  ISSUE_PARENT
  CHECKLIST_PREVENTATIVE
  CHECKLIST_ON_TRIGGER_CONDITION
}

enum TicketMasterStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  COMPLETED
}

enum Trend {
  UP
  DOWN
  SAME
}

enum UnitCondition {
  UNAVAILABLE
  NORMAL
  ACCEPTABLE
  DEGRADED
}

enum UserStatus {
  ACTIVE
  CEASED
  SUSPENDED
}

enum UserType {
  INTERNAL
  EXTERNAL_SUPPLIER
}

enum UtilityCategory {
  WATER_SUPPLY
  ELECTRICAL
  NATURAL_GAS
  LIQUID_FOSSIL_FUELS
  CLEANING_AND_MAINTENANCE
  GARDENING
  TELECOMMUNICATION
  SEWAGE
  WASTE_MANAGEMENT_COLLECTION
  DISTRICT_HEATING
  DISTRICT_COOLING
  PUBLIC_TRANSPORTATION
  STREET_LIGHTING
  POSTAL_SERVICE
}

enum VATRateType {
  RATE
  EXEMPT
  NON_TAXABLE
}

enum ValidationSeverity {
  ERROR
  WARNING
  INFO
}

directive @allowAnonymous repeatable on FIELD_DEFINITION

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"A coordinate is an array of positions."
scalar Coordinates

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

scalar Geometry

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
scalar Position

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")

"The `Upload` scalar type represents a file upload."
scalar Upload