using Ardalis.Result;
using Ardalis.SmartEnum;
using Humanizer;
using RealGimm.Core.Anag.SubjectAggregate;
using RealGimm.Core.Anag.OrgUnitAggregate;
using RealGimm.Core.Asst.CadastralUnitAggregate;
using RealGimm.Core.Asst.CatalogueCategoryAggregate;
using RealGimm.Core.Asst.CatalogueItemAggregate;
using RealGimm.Core.Asst.CatalogueTypeAggregate;
using RealGimm.Core.Asst.EstateAggregate;
using RealGimm.Core.Asst.EstateUnitAggregate;
using RealGimm.Core.Asst.FunctionAreaAggregate;
using RealGimm.Core.Common.CityAggregate;
using RealGimm.Core.Prop.ContractTypeAggregate;
using RealGimm.Core.Common.VATRateAggregate;
using RealGimm.Core.Common.InterestRateAggregate;
using RealGimm.Core.Prop.RegistrationOfficeAggregate;
using RealGimm.Core.Prop.BillItemTypeAggregate;
using RealGimm.Core.Prop.ContractAggregate;
using RealGimm.Core.Docs.DocumentAggregate;
using RealGimm.Core.Prop.BillAggregate;
using RealGimm.Core.Prop.AdministrationAggregate;
using RealGimm.Core.Nrgy.UtilityTypeAggregate;
using RealGimm.Core.Nrgy.UtilityServiceAggregate;
using RealGimm.Core.Prop.AdministrationTermAggregate;
using RealGimm.Core.Nrgy.CostChargeAggregate;
using RealGimm.Core.Asst.EstateUsageTypeAggregate;
using RealGimm.Core.Asst.EstateMainUsageTypeAggregate;
using RealGimm.Core.Nrgy.ReadingAggregate;
using Microsoft.Extensions.Localization;
using RealGimm.Core.Fclt.ServiceCategoryAggregate;
using RealGimm.Core.Fclt.ServiceAggregate;

namespace RealGimm.Core;

public class ErrorCode : SmartEnum<ErrorCode>
{
  public static readonly ErrorCode CityNameIsNullOrEmptyString = new(nameof(CityNameIsNullOrEmptyString), 1, null, nameof(Anag.SubjectAggregate.Address.CityName));
  public static readonly ErrorCode ToponymyIsNullOrEmptyString = new(nameof(ToponymyIsNullOrEmptyString), 2, null, nameof(Anag.SubjectAggregate.Address.Toponymy));
  public static readonly ErrorCode LocalPostCodeIsNullOrEmptyString = new(nameof(LocalPostCodeIsNullOrEmptyString), 3, null, nameof(Anag.SubjectAggregate.Address.LocalPostCode));
  public static readonly ErrorCode AccountHolderNameIsNullOrEmptyString = new(nameof(AccountHolderNameIsNullOrEmptyString), 4, null, nameof(BankAccount.AccountHolder));
  public static readonly ErrorCode ReferenceCodeIsNullOrEmptyString = new(nameof(ReferenceCodeIsNullOrEmptyString), 5, null, nameof(BankAccount.ReferenceCode));
  public static readonly ErrorCode ReferenceCodeIsNotValidIBAN = new(nameof(ReferenceCodeIsNotValidIBAN), 6, null, nameof(BankAccount.ReferenceCode));
  public static readonly ErrorCode ContactInfoIsNotValidEMail = new(nameof(ContactInfoIsNotValidEMail), 7, null, nameof(Contact.ContactInfo));
  public static readonly ErrorCode ContactInfoIsNotValidPhone = new(nameof(ContactInfoIsNotValidPhone), 8, null, nameof(Contact.ContactInfo));
  public static readonly ErrorCode NameIsNullOrEmptyString = new(nameof(NameIsNullOrEmptyString), 9, null, nameof(Subject.Name));
  public static readonly ErrorCode InternalCodeIsNullOrEmptyString = new(nameof(InternalCodeIsNullOrEmptyString), 10, null, nameof(Subject.InternalCode));
  public static readonly ErrorCode LegalResidentialAddressIsNotProvided = new(nameof(LegalResidentialAddressIsNotProvided), 11, null, nameof(Subject.Addresses));
  public static readonly ErrorCode MainBankAccountIsNotProvided = new(nameof(MainBankAccountIsNotProvided), 12, null, nameof(Subject.BankAccounts));
  public static readonly ErrorCode LastNameIsNullOrEmptyString = new(nameof(LastNameIsNullOrEmptyString), 13, null, nameof(PhysicalSubject.LastName));
  public static readonly ErrorCode FirstNameIsNullOrEmptyString = new(nameof(FirstNameIsNullOrEmptyString), 14, null, nameof(PhysicalSubject.FirstName));
  public static readonly ErrorCode BirthDateIsNullOrEmpty = new(nameof(BirthDateIsNullOrEmpty), 16, null, nameof(PhysicalSubject.BirthDate));
  public static readonly ErrorCode BirthLocationIsNullOrEmptyString = new(nameof(BirthLocationIsNullOrEmptyString), 17, null, nameof(PhysicalSubject.BirthLocation));
  public static readonly ErrorCode BirthCountryTaxIdCodeIsNullOrEmptyString = new(nameof(BirthCountryTaxIdCodeIsNullOrEmptyString), 18, null, nameof(PhysicalSubject.BirthCountryTaxIdCode));
  public static readonly ErrorCode OrgUnitInvalidId = new(nameof(OrgUnitInvalidId), 19, null, nameof(Subject.Id));
  public static readonly ErrorCode OrgUnitInvalidParentSubjectId = new(nameof(OrgUnitInvalidParentSubjectId), 20, null, nameof(Subject.Id));
  public static readonly ErrorCode OrgUnitInvalidParentOrgUnitId = new(nameof(OrgUnitInvalidParentOrgUnitId), 21, null, nameof(OrgUnit.Id));
  public static readonly ErrorCode OrgUnitDifferentParentSubjectIds = new(nameof(OrgUnitDifferentParentSubjectIds), 22, null, nameof(Subject.Id));
  public static readonly ErrorCode StartDateAfterEndDate = new(nameof(StartDateAfterEndDate), 23, null, nameof(TaxStatus.Since));
  public static readonly ErrorCode TaxStatusDoOverlap = new(nameof(TaxStatusDoOverlap), 24, null, nameof(Subject.TaxStatuses));
  public static readonly ErrorCode OfficerMustHaveStartDate = new(nameof(OfficerMustHaveStartDate), 25, null, nameof(SubjectRelation.Since));
  public static readonly ErrorCode BirthDateGreaterThanDeathDate = new(nameof(BirthDateGreaterThanDeathDate), 26, null, nameof(PhysicalSubject.BirthDate));
  public static readonly ErrorCode CountryNameIsNullOrEmptyString = new(nameof(CountryNameIsNullOrEmptyString), 27, identifier: nameof(Asst.EstateAggregate.Address.CountyName));
  public static readonly ErrorCode NumberingIsNullOrEmptyString = new(nameof(NumberingIsNullOrEmptyString), 28, identifier: nameof(Asst.EstateAggregate.Address.Numbering));
  public static readonly ErrorCode PrimaryAddressIsNotProvided = new(nameof(PrimaryAddressIsNotProvided), 29, identifier: nameof(Estate.Addresses));
  public static readonly ErrorCode CodeIsNullOrEmptyString = new(nameof(CodeIsNullOrEmptyString), 30, identifier: nameof(Estate.InternalCode));
  public static readonly ErrorCode TypeIsNull = new(nameof(TypeIsNull), 31, identifier: nameof(Estate.Type));
  public static readonly ErrorCode StatusIsNull = new(nameof(StatusIsNull), 32, identifier: nameof(Estate.Status));
  public static readonly ErrorCode MainUsageTypeIsNull = new(nameof(MainUsageTypeIsNull), 34, identifier: nameof(Estate.MainUsageType));
  public static readonly ErrorCode OwnershipIsNull = new(nameof(OwnershipIsNull), 35, identifier: nameof(Estate.Ownership));
  public static readonly ErrorCode UsageTypeIsNull = new(nameof(UsageTypeIsNull), 36, identifier: nameof(Estate.UsageType));
  public static readonly ErrorCode SurfaceAreaLessThanOrEqualsZero = new(nameof(SurfaceAreaLessThanOrEqualsZero), 37, identifier: nameof(Estate.SurfaceAreaSqM));
  public static readonly ErrorCode BuildYearLessThanOrEqualsZero = new(nameof(BuildYearLessThanOrEqualsZero), 38, identifier: nameof(Estate.BuildYear));
  public static readonly ErrorCode OfficerCanNotHaveOfficers = new(nameof(OfficerCanNotHaveOfficers), 39, identifier: nameof(Subject.RelationSubordinates));
  public static readonly ErrorCode CompanyGroupCanNotHaveCompanyGroup = new(nameof(CompanyGroupCanNotHaveCompanyGroup), 40, identifier: nameof(Subject.RelationSubordinates));
  public static readonly ErrorCode AtLeastOneManagementEntityOwnedRequired = new(nameof(AtLeastOneManagementEntityOwnedRequired), 41, identifier: nameof(Subject.RelationSubordinates));
  public static readonly ErrorCode MoreThanOneMainBankAccount = new(nameof(MoreThanOneMainBankAccount), 42, identifier: nameof(Subject.BankAccounts));
  public static readonly ErrorCode ManagementSubjectIsNull = new(nameof(ManagementSubjectIsNull), 43, identifier: nameof(Estate.ManagementSubjectId));
  public static readonly ErrorCode CountryIsNotProvided = new(nameof(CountryIsNotProvided), 44, identifier: nameof(Asst.EstateAggregate.Address.CountryISO));
  public static readonly ErrorCode NumberingIsNotProvided = new(nameof(NumberingIsNotProvided), 45, identifier: nameof(Asst.EstateAggregate.Address.Numbering));
  public static readonly ErrorCode LocalPostcodeIsNotProvided = new(nameof(LocalPostcodeIsNotProvided), 46, identifier: nameof(Asst.EstateAggregate.Address.LocalPostCode));
  public static readonly ErrorCode DuplicateInternalCode = new(nameof(DuplicateInternalCode), 47);
  public static readonly ErrorCode DuplicateInterGroupSignature = new(nameof(DuplicateInterGroupSignature), 48, identifier: nameof(LegalSubject.InterGroupSignature));
  public static readonly ErrorCode InvalidReferenceYear = new(nameof(InvalidReferenceYear), 49, identifier: nameof(Valuation.ReferenceYear));
  public static readonly ErrorCode DuplicateFloorTemplateName = new(nameof(DuplicateFloorTemplateName), 50, identifier: nameof(Asst.FloorTemplateAggregate.FloorTemplate.Name));
  public static readonly ErrorCode TaxIdCodeNotValid = new(nameof(TaxIdCodeNotValid), 51, identifier: nameof(PhysicalSubject.ProfessionalTaxIdCode));
  public static readonly ErrorCode BirthSexIsNullOrEmpty = new(nameof(BirthSexIsNullOrEmpty), 52, identifier: nameof(PhysicalSubject.BirthSex));
  public static readonly ErrorCode InvalidUserUpdating = new(nameof(InvalidUserUpdating), 53, identifier: nameof(IAM.UserAggregate.User));
  public static readonly ErrorCode CountyShortCodeIsEmpty = new(nameof(CountyShortCodeIsEmpty), 54, identifier: nameof(City.CountyShortCode));
  public static readonly ErrorCode TotalSurfaceAreaSqMLessThanOrEqualZero = new(nameof(TotalSurfaceAreaSqMLessThanOrEqualZero), 55, identifier: nameof(EstateTotalMarketValue));
  public static readonly ErrorCode CoefficientsSumGreaterThan1 = new(nameof(CoefficientsSumGreaterThan1), 56, identifier: nameof(EstateTotalMarketValue));
  public static readonly ErrorCode CoefficientsIsEmptyCollection = new(nameof(CoefficientsIsEmptyCollection), 57, identifier: nameof(EstateTotalMarketValue));
  public static readonly ErrorCode DuplicatedCoefficients = new(nameof(DuplicatedCoefficients), 58, identifier: nameof(EstateTotalMarketValue));
  public static readonly ErrorCode MarketValuesIsEmptyCollection = new(nameof(MarketValuesIsEmptyCollection), 59, identifier: nameof(EstateTotalMarketValue));
  public static readonly ErrorCode DuplicatedMarketValues = new(nameof(DuplicatedMarketValues), 60, identifier: nameof(EstateTotalMarketValue));
  public static readonly ErrorCode EstateTotalMarketValueCoefficientValueOutOfRange = new(nameof(EstateTotalMarketValueCoefficientValueOutOfRange), 61, identifier: nameof(EstateTotalMarketValueCoefficient));
  public static readonly ErrorCode EstateMarketValueValueOutOfRange = new(nameof(EstateMarketValueValueOutOfRange), 62, identifier: nameof(EstateMarketValue));
  public static readonly ErrorCode AtLeastOneLeaderCompanyGroupRequired = new(nameof(AtLeastOneLeaderCompanyGroupRequired), 63, identifier: nameof(Subject.RelationSubordinates));
  public static readonly ErrorCode BirthCountryTaxIdCodeIsInvalid = new(nameof(BirthCountryTaxIdCodeIsInvalid), 64, null, nameof(PhysicalSubject.BirthCountryTaxIdCode));
  public static readonly ErrorCode OnlyPhysicalSubjectCanBeHeir = new(nameof(OnlyPhysicalSubjectCanBeHeir), 65, identifier: nameof(Subject.Categories));
  public static readonly ErrorCode DuplicateOrgUnitCode = new(nameof(DuplicateOrgUnitCode), 66, identifier: nameof(OrgUnit.InternalCode));
  public static readonly ErrorCode InvalidOwnershipStartDate = new(nameof(InvalidOwnershipStartDate), 67, identifier: nameof(EstateUnit.OwnershipStartDate));
  public static readonly ErrorCode EsateUnitInternalCodeIsNullOrEmptyString = new(nameof(EsateUnitInternalCodeIsNullOrEmptyString), 68, identifier: nameof(EstateUnit.InternalCode));
  public static readonly ErrorCode FloorsAreNotProvided = new(nameof(FloorsAreNotProvided), 69, identifier: nameof(EstateUnit.Floors));
  public static readonly ErrorCode AddressIsNotProvided = new(nameof(AddressIsNotProvided), 70, identifier: nameof(EstateUnit.Address));
  public static readonly ErrorCode RefactoringEstateUnitsAreRequired = new(nameof(RefactoringEstateUnitsAreRequired), 71, identifier: nameof(Refactoring.EstateUnitIds));
  public static readonly ErrorCode ClosureDateIsInTheFuture = new(nameof(ClosureDateIsInTheFuture), 72, identifier: nameof(Subject.ClosureDate));
  public static readonly ErrorCode DecommissioningDateIsInTheFuture = new(nameof(DecommissioningDateIsInTheFuture), 73, identifier: nameof(Estate.DecommissioningDate));
  public static readonly ErrorCode DisusedDateIsInTheFuture = new(nameof(DisusedDateIsInTheFuture), 74, identifier: nameof(EstateUnit.DisusedDate));
  public static readonly ErrorCode CadastralUnitInternalCodeIsNullOrEmptyString = new(nameof(CadastralUnitInternalCodeIsNullOrEmptyString), 75, identifier: nameof(CadastralUnit.InternalCode));
  public static readonly ErrorCode CadastralUnitStatusIsNull = new(nameof(CadastralUnitStatusIsNull), 76, identifier: nameof(CadastralUnit.Status));
  public static readonly ErrorCode CadastralUnitTypeIsNull = new(nameof(CadastralUnitTypeIsNull), 77, identifier: nameof(CadastralUnit.Type));
  public static readonly ErrorCode CadastralAmountLessThanOrEqualsZero = new(nameof(CadastralAmountLessThanOrEqualsZero), 78, identifier: nameof(CadastralUnitIncome.CadastralAmount));
  public static readonly ErrorCode CadastralUnitInspectionInvalidDate = new(nameof(CadastralUnitInspectionInvalidDate), 79, identifier: nameof(CadastralUnitInspection.Date));
  public static readonly ErrorCode CadastralUnitInspectionInvalidProtocolDate = new(nameof(CadastralUnitInspectionInvalidProtocolDate), 80, identifier: nameof(CadastralUnitInspection.ProtocolDate));
  public static readonly ErrorCode CadastralUnitInvalidSince = new(nameof(CadastralUnitInvalidSince), 81, identifier: nameof(CadastralUnit.Since));
  public static readonly ErrorCode CadastralCoordinatesITTavPartita = new(nameof(CadastralCoordinatesITTavPartita), 83, identifier: nameof(CadastralCoordinates.ITTavPartita));
  public static readonly ErrorCode CadastralCoordinatesITTavCorpo = new(nameof(CadastralCoordinatesITTavCorpo), 84, identifier: nameof(CadastralCoordinates.ITTavCorpo));
  public static readonly ErrorCode CadastralCoordinatesITTavPorzione = new(nameof(CadastralCoordinatesITTavPorzione), 85, identifier: nameof(CadastralCoordinates.ITTavPorzione));
  public static readonly ErrorCode EstateUnitRepossessionNotLast = new(nameof(EstateUnitRepossessionNotLast), 86, identifier: nameof(EstateUnit.Repossessions));
  public static readonly ErrorCode CadastralExpensesInvalidReferenceYear = new(nameof(CadastralExpensesInvalidReferenceYear), 87, identifier: nameof(CadastralExpenses.ReferenceYear));
  public static readonly ErrorCode CadastralExpensesInvalidFiscalYear = new(nameof(CadastralExpensesInvalidFiscalYear), 88, identifier: nameof(CadastralExpenses.FiscalYear));
  public static readonly ErrorCode CadastralExpensesAmountLessOrEqualZero = new(nameof(CadastralExpensesAmountLessOrEqualZero), 89, identifier: nameof(CadastralExpenses.Amount));
  public static readonly ErrorCode CadastralExpensesRevaluationFactorLessOrEqualZero = new(nameof(CadastralExpensesRevaluationFactorLessOrEqualZero), 90, identifier: nameof(CadastralExpenses.RevaluationFactor));
  public static readonly ErrorCode CadastralUnitUnavailabilitiesContainsOverlaps = new(nameof(CadastralUnitUnavailabilitiesContainsOverlaps), 91, identifier: nameof(CadastralUnit.Unavailabilities));
  public static readonly ErrorCode CadastralUnitInvalidUntil = new(nameof(CadastralUnitInvalidUntil), 92, identifier: nameof(CadastralUnit.Since));
  public static readonly ErrorCode AddressStillInUse = new(nameof(AddressStillInUse), 93, identifier: nameof(EstateUnit.Address));
  public static readonly ErrorCode DifferentCityNames = new(nameof(DifferentCityNames), 94, identifier: nameof(EstateUnit));
  public static readonly ErrorCode FunctionAreaNameIsNullOrEmptyString = new(nameof(FunctionAreaNameIsNullOrEmptyString), 95, identifier: nameof(FunctionArea.Name));
  public static readonly ErrorCode FunctionAreaInternalCodeIsNullOrEmptyString = new(nameof(FunctionAreaInternalCodeIsNullOrEmptyString), 96, identifier: nameof(FunctionArea.InternalCode));
  public static readonly ErrorCode ItemInUseCannotBeDeleted = new(nameof(ItemInUseCannotBeDeleted), 97);
  public static readonly ErrorCode FloorNameIsNullOrEmptyString = new(nameof(FloorNameIsNullOrEmptyString), 98, identifier: nameof(Floor.Name));
  public static readonly ErrorCode OrgUnitCyclicalDependencies = new(nameof(OrgUnitCyclicalDependencies), 99);
  public static readonly ErrorCode CatalogueCategoryNameIsNullOrEmptyString = new(nameof(CatalogueCategoryNameIsNullOrEmptyString), 100, identifier: nameof(CatalogueCategory.Name));
  public static readonly ErrorCode CatalogueCategoryInternalCodeIsNullOrEmptyString = new(nameof(CatalogueCategoryInternalCodeIsNullOrEmptyString), 101, identifier: nameof(CatalogueCategory.InternalCode));
  public static readonly ErrorCode CatalogueSubCategoryNameIsNullOrEmptyString = new(nameof(CatalogueSubCategoryNameIsNullOrEmptyString), 102, identifier: nameof(CatalogueSubCategory.Name));
  public static readonly ErrorCode CatalogueSubCategoryInternalCodeIsNullOrEmptyString = new(nameof(CatalogueSubCategoryInternalCodeIsNullOrEmptyString), 103, identifier: nameof(CatalogueSubCategory.InternalCode));
  public static readonly ErrorCode CategoryInternalCodeIsNullOrEmptyString = new(nameof(CatalogueSubCategoryInternalCodeIsNullOrEmptyString), 103, identifier: nameof(CatalogueSubCategory.InternalCode));
  public static readonly ErrorCode CatalogueTypeNonExistingCategory = new(nameof(CatalogueTypeNonExistingCategory), 104, identifier: nameof(CatalogueType.Category));
  public static readonly ErrorCode CatalogueTypeNonExistingSubCategory = new(nameof(CatalogueTypeNonExistingSubCategory), 105, identifier: nameof(CatalogueType.SubCategory));
  public static readonly ErrorCode CatalogueTypeNameIsNullOrEmptyString = new(nameof(CatalogueTypeNameIsNullOrEmptyString), 106, identifier: nameof(CatalogueType.Name));
  public static readonly ErrorCode CatalogueTypeInternalCodeIsNullOrEmptyString = new(nameof(CatalogueTypeInternalCodeIsNullOrEmptyString), 107, identifier: nameof(CatalogueType.InternalCode));
  public static readonly ErrorCode CatalogueTypeCategoryIsNull = new(nameof(CatalogueTypeCategoryIsNull), 108, identifier: nameof(CatalogueType.Category));
  public static readonly ErrorCode CatalogueTypeInvalidSubCategory = new(nameof(CatalogueTypeInvalidSubCategory), 109, identifier: nameof(CatalogueType.SubCategory));
  public static readonly ErrorCode CatalogueTypeActivityNameIsNullOrEmptyString = new(nameof(CatalogueTypeActivityNameIsNullOrEmptyString), 110, identifier: nameof(CatalogueTypeActivity.Name));
  public static readonly ErrorCode CatalogueTypeFieldNameIsNullOrEmptyString = new(nameof(CatalogueTypeFieldNameIsNullOrEmptyString), 111, identifier: nameof(CatalogueTypeField.Name));
  public static readonly ErrorCode CatalogueTypeFieldInvalidValidValues = new(nameof(CatalogueTypeFieldInvalidValidValues), 112, identifier: nameof(CatalogueTypeField.ValidValues));
  public static readonly ErrorCode CatalogueTypeInvalidFields = new(nameof(CatalogueTypeInvalidFields), 113, identifier: nameof(CatalogueType.Fields));
  public static readonly ErrorCode DocumentSubjectIsInvalid = new(nameof(DocumentSubjectIsInvalid), 114);
  public static readonly ErrorCode CatalogueItemInvalidDecommissioningDate = new(nameof(CatalogueItemInvalidDecommissioningDate), 115, identifier: nameof(CatalogueItem.DecommissioningDate));
  public static readonly ErrorCode CatalogueItemInvalidActivationDate = new(nameof(CatalogueItemInvalidActivationDate), 116, identifier: nameof(CatalogueItem.ActivationDate));
  public static readonly ErrorCode CatalogueItemInvalidLastMaintenanceDate = new(nameof(CatalogueItemInvalidLastMaintenanceDate), 117, identifier: nameof(CatalogueItem.LastMaintenanceDate));
  public static readonly ErrorCode CatalogueItemInternalCodeIsNullOrEmptyString = new(nameof(CatalogueItemInternalCodeIsNullOrEmptyString), 118, identifier: nameof(CatalogueItem.InternalCode));
  public static readonly ErrorCode CatalogueItemNonExistingEstate = new(nameof(CatalogueItemNonExistingEstate), 119, identifier: nameof(CatalogueItem.Estate));
  public static readonly ErrorCode CatalogueItemNonExistingType = new(nameof(CatalogueItemNonExistingType), 120, identifier: nameof(CatalogueItem.CatalogueType));
  public static readonly ErrorCode CatalogueItemFieldNameIsNullOrEmptyString = new(nameof(CatalogueItemFieldNameIsNullOrEmptyString), 121, identifier: nameof(CatalogueItemField.Name));
  public static readonly ErrorCode CatalogueItemFieldValueIsNullOrEmptyString = new(nameof(CatalogueItemFieldValueIsNullOrEmptyString), 122, identifier: nameof(CatalogueItemField.Value));
  public static readonly ErrorCode TransformTypeAndUseTypeMustBeDifferent = new(nameof(TransformTypeAndUseTypeMustBeDifferent), 123, identifier: nameof(EstateUnit.Type));
  public static readonly ErrorCode ContractTypeInternalCodeIsNullOrEmptyString = new(nameof(ContractTypeInternalCodeIsNullOrEmptyString), 124, identifier: nameof(ContractType.InternalCode));
  public static readonly ErrorCode VATRateInternalCodeIsNullOrEmptyString = new(nameof(VATRateInternalCodeIsNullOrEmptyString), 125, identifier: nameof(VATRate.InternalCode));
  public static readonly ErrorCode VATRateDescriptionIsNullOrEmptyString = new(nameof(VATRateDescriptionIsNullOrEmptyString), 126, identifier: nameof(VATRate.Description));
  public static readonly ErrorCode VATRatePercentShouldBeZero = new(nameof(VATRatePercentShouldBeZero), 127, identifier: nameof(VATRate.RatePercent));
  public static readonly ErrorCode InterestRateDatesMustBeDifferent = new(nameof(InterestRateDatesMustBeDifferent), 128, identifier: nameof(InterestRate.Since));
  public static readonly ErrorCode InterestRateUntilMustBeGreaterThanSince = new(nameof(InterestRateUntilMustBeGreaterThanSince), 129, identifier: nameof(InterestRate.Since));
  public static readonly ErrorCode RegistrationOfficeExternalCodeIsNullOrEmptyString = new(nameof(RegistrationOfficeExternalCodeIsNullOrEmptyString), 130, identifier: nameof(RegistrationOffice.ExternalCode));
  public static readonly ErrorCode RegistrationOfficeDescriptionIsNullOrEmptyString = new(nameof(RegistrationOfficeExternalCodeIsNullOrEmptyString), 131, identifier: nameof(RegistrationOffice.Description));
  public static readonly ErrorCode DocumentEstateIsInvalid = new(nameof(DocumentEstateIsInvalid), 132);
  public static readonly ErrorCode VATRatesMustBeSetForBillItemTypes = new(nameof(VATRatesMustBeSetForBillItemTypes), 133, identifier: nameof(BillItemType));
  public static readonly ErrorCode ContractCounterpartsAreRequired = new(nameof(ContractCounterpartsAreRequired), 134, identifier: nameof(Contract.Counterparts));
  public static readonly ErrorCode ContractTransactorsAreRequired = new(nameof(ContractTransactorsAreRequired), 135, identifier: nameof(Contract.Transactors));
  public static readonly ErrorCode ContractNonExistingType = new(nameof(ContractNonExistingType), 136, identifier: nameof(Contract.Type));
  public static readonly ErrorCode ContractNonExistingSublocatedContract = new(nameof(ContractNonExistingSublocatedContract), 137, identifier: nameof(Contract.SublocatedContract));
  public static readonly ErrorCode ContractNonExistingSubLocation = new(nameof(ContractNonExistingSubLocation), 138, identifier: nameof(Contract.SubLocations));
  public static readonly ErrorCode BillingPauseEndDateCanNotBeLessThanStartDate = new(nameof(BillingPauseEndDateCanNotBeLessThanStartDate), 139, identifier: nameof(BillingPause.Until));
  public static readonly ErrorCode ContractBillingPausesContainsOverlaps = new(nameof(ContractBillingPausesContainsOverlaps), 140, identifier: nameof(Contract.BillingPauses));
  public static readonly ErrorCode ContractBillingIsNotPaused = new(nameof(ContractBillingIsNotPaused), 141, identifier: nameof(Contract.BillingPauses));
  public static readonly ErrorCode ContractReleaseDataIsNotFull = new(nameof(ContractReleaseDataIsNotFull), 142, identifier: nameof(Contract));
  public static readonly ErrorCode InvalidCatalogueItem = new(nameof(InvalidCatalogueItem), 143);
  public static readonly ErrorCode ContractLocatedUnitsAreRequired = new(nameof(ContractLocatedUnitsAreRequired), 144, identifier: nameof(Contract.LocatedUnits));
  public static readonly ErrorCode ContractShouldHaveOneMainLocatedUnit = new(nameof(ContractShouldHaveOneMainLocatedUnit), 145, identifier: nameof(Contract.LocatedUnits));
  public static readonly ErrorCode CounterpartSharePercentMustBeGreaterThanZeroAndLessOrEqualToOneHundred = new(nameof(CounterpartSharePercentMustBeGreaterThanZeroAndLessOrEqualToOneHundred), 146, identifier: nameof(Counterpart.ContractSharePercent));
  public static readonly ErrorCode ContractCounterpartsSharePercentSumShouldBe100 = new(nameof(ContractCounterpartsSharePercentSumShouldBe100), 147, identifier: nameof(Contract.Counterparts));
  public static readonly ErrorCode ContractShouldHaveOneMainCounterpart = new(nameof(ContractShouldHaveOneMainCounterpart), 148, identifier: nameof(Contract.Counterparts));
  public static readonly ErrorCode TransactorTransactionSharePercentMustBeGreaterThanZeroAndLessOrEqualToOneHundred = new(nameof(TransactorTransactionSharePercentMustBeGreaterThanZeroAndLessOrEqualToOneHundred), 149, identifier: nameof(Transactor.TransactionSharePercent));
  public static readonly ErrorCode ContractTransactorsSharePercentSumShouldBe100 = new(nameof(ContractTransactorsSharePercentSumShouldBe100), 150, identifier: nameof(Contract.Transactors));
  public static readonly ErrorCode ContractIsAlreadyReleased = new(nameof(ContractIsAlreadyReleased), 151, identifier: nameof(Contract.Transactors));
  public static readonly ErrorCode ContractIsFrozenClosed = new(nameof(ContractIsFrozenClosed), 152, identifier: nameof(Contract.Status));
  public static readonly ErrorCode SubjectNeedsToBeOfPhysicalType = new(nameof(SubjectNeedsToBeOfPhysicalType), 153, identifier: nameof(Subject.PersonType));
  public static readonly ErrorCode DuplicateDocumentName = new(nameof(DuplicateDocumentName), 154, identifier: nameof(Document.Name));
  public static readonly ErrorCode InvalidCatalogueType = new(nameof(InvalidCatalogueType), 155);
  public static readonly ErrorCode ContractLandlordSuccessorIdsAreRequiredForTakeover = new(nameof(ContractLandlordSuccessorIdsAreRequiredForTakeover), 156, identifier: nameof(Contract));
  public static readonly ErrorCode ContractTenantSuccessorIdsAreRequiredForTakeover = new(nameof(ContractTenantSuccessorIdsAreRequiredForTakeover), 157, identifier: nameof(Contract));
  public static readonly ErrorCode ContractTransferInvalidTakeoverType = new(nameof(ContractTransferInvalidTakeoverType), 158, identifier: nameof(Contract));
  public static readonly ErrorCode ActiveContractNewCounterpartsForAddingAreNotProvided = new(nameof(ActiveContractNewCounterpartsForAddingAreNotProvided), 159, identifier: nameof(Contract));
  public static readonly ErrorCode HeirMustBeManagedByCommonManagementSubject = new(nameof(HeirMustBeManagedByCommonManagementSubject), 160, identifier: nameof(Subject.Heirs));
  public static readonly ErrorCode BillNonExistingContract = new(nameof(BillNonExistingContract), 161, identifier: nameof(Bill));
  public static readonly ErrorCode BillInternalCodeIsNullOrEmptyString = new(nameof(BillInternalCodeIsNullOrEmptyString), 162, identifier: nameof(Bill.InternalCode));
  public static readonly ErrorCode BillTotalAmountIsLessThanOrEqualToZero = new(nameof(BillTotalAmountIsLessThanOrEqualToZero), 163, identifier: nameof(Bill.TotalAmount));
  public static readonly ErrorCode BillRowAmountIsLessThanOrEqualToZero = new(nameof(BillRowAmountIsLessThanOrEqualToZero), 164, identifier: nameof(BillRow.Amount));
  public static readonly ErrorCode BillInvalidTransactorSubject = new(nameof(BillInvalidTransactorSubject), 164, identifier: nameof(Bill));
  public static readonly ErrorCode BillInvalidCounterpartSubject = new(nameof(BillInvalidCounterpartSubject), 165, identifier: nameof(Bill));
  public static readonly ErrorCode LocatedUnitEstateSubUnitDoesntExist = new(nameof(LocatedUnitEstateSubUnitDoesntExist), 166, identifier: nameof(LocatedUnit.EstateSubUnitId));
  public static readonly ErrorCode PassiveContractNewLandlordsForAddingAreNotProvided = new(nameof(PassiveContractNewLandlordsForAddingAreNotProvided), 167, identifier: nameof(Contract));
  public static readonly ErrorCode NotExistingDeceasedCounterpart = new(nameof(NotExistingDeceasedCounterpart), 168, identifier: nameof(Contract));
  public static readonly ErrorCode ContractDoesntExists = new(nameof(ContractDoesntExists), 169, identifier: nameof(Contract));
  public static readonly ErrorCode AdministrationNonExistingEstate = new(nameof(AdministrationNonExistingEstate), 170, identifier: nameof(Administration.EstateId));
  public static readonly ErrorCode AdministrationNonExistingSubject = new(nameof(AdministrationNonExistingSubject), 171, identifier: nameof(Administration.AdministratorSubjectId));
  public static readonly ErrorCode AdministrationNonExistingSubjectBankAccount = new(nameof(AdministrationNonExistingSubjectBankAccount), 172, identifier: nameof(Administration.AdministratorBankAccountId));
  public static readonly ErrorCode AdministrationCollidingInputAdministrator = new(nameof(AdministrationCollidingInputAdministrator), 173, identifier: nameof(Administration.AdministratorSubjectId));
  public static readonly ErrorCode AdministrationCollidingExistingAdministrator = new(nameof(AdministrationCollidingExistingAdministrator), 174, identifier: nameof(Administration.AdministratorSubjectId));
  public static readonly ErrorCode AdministrationSinceMustBeLessThanUntil = new(nameof(AdministrationSinceMustBeLessThanUntil), 175, identifier: nameof(Administration.Since));
  public static readonly ErrorCode TermInstallmentNonExistingBillItemType = new(nameof(TermInstallmentNonExistingBillItemType), 176, identifier: nameof(TermInstallment.BillItemType));
  public static readonly ErrorCode AdministrationNotDeletableActiveTerms = new(nameof(AdministrationNotDeletableActiveTerms), 177, identifier: nameof(Administration.Terms));
  public static readonly ErrorCode InvalidTimeOfUseRateCount = new(nameof(InvalidTimeOfUseRateCount), 178, identifier: nameof(UtilityType.TimeOfUseRateCount));
  public static readonly ErrorCode AdministrationTermSinceMustBeLessThanUntil = new(nameof(AdministrationTermSinceMustBeLessThanUntil), 179, identifier: nameof(AdministrationTerm.Since));
  public static readonly ErrorCode AdministrationTermExpectedAmountMustBeGreaterThanZero = new(nameof(AdministrationTermExpectedAmountMustBeGreaterThanZero), 180, identifier: nameof(AdministrationTerm.ExpectedAmount));
  public static readonly ErrorCode TermInstallmentSinceMustBeLessThanOrEqualToUntil = new(nameof(TermInstallmentSinceMustBeLessThanOrEqualToUntil), 181, identifier: nameof(TermInstallment.Since));
  public static readonly ErrorCode MustHaveAtLeastOneEstateUnit = new(nameof(MustHaveAtLeastOneEstateUnit), 182, identifier: nameof(UtilityService.EstateUnitIds));
  public static readonly ErrorCode InstallmentPaymentInvalidAmount = new(nameof(InstallmentPaymentInvalidAmount), 184, identifier: nameof(BillRow.Amount));
  public static readonly ErrorCode InstallmentPaymentNonExistingBillItemType = new(nameof(InstallmentPaymentNonExistingBillItemType), 185, identifier: nameof(BillRow.ItemType));
  public static readonly ErrorCode UtilityServiceNonExistingType = new(nameof(UtilityServiceNonExistingType), 189, identifier: nameof(UtilityService));
  public static readonly ErrorCode UtilityServiceNonExistingEstate = new(nameof(UtilityServiceNonExistingEstate), 190, identifier: nameof(UtilityService));
  public static readonly ErrorCode UtilityServiceNonExistingEstateUnit = new(nameof(UtilityServiceNonExistingEstateUnit), 191, identifier: nameof(UtilityService));
  public static readonly ErrorCode UtilityServiceNonExistingSubject = new(nameof(UtilityServiceNonExistingSubject), 192, identifier: nameof(UtilityService));
  public static readonly ErrorCode UtilityServiceNonExistingAccountingItem = new(nameof(UtilityServiceNonExistingAccountingItem), 193, identifier: nameof(UtilityService));
  public static readonly ErrorCode UtilityServiceNonExistingOrgUnit = new(nameof(UtilityServiceNonExistingOrgUnit), 194, identifier: nameof(UtilityService));
  public static readonly ErrorCode CostChargeNonExistingUtilityService = new(nameof(CostChargeNonExistingUtilityService), 195, identifier: nameof(CostCharge));
  public static readonly ErrorCode CostChargeSinceMustBeLessThanUntil = new(nameof(CostChargeSinceMustBeLessThanUntil), 196, identifier: nameof(CostChargeConsumption.Since));
  public static readonly ErrorCode CostChargeConsumptionsContainsOverlaps = new(nameof(CostChargeConsumptionsContainsOverlaps), 197, identifier: nameof(CostCharge));
  public static readonly ErrorCode ContractNonExistingBillingBaseFeeBillItemType = new(nameof(ContractNonExistingBillingBaseFeeBillItemType), 198, identifier: nameof(Contract.BillingBaseFeeBillItemType));
  public static readonly ErrorCode ReadingNonExistingUtilityService = new(nameof(ReadingNonExistingUtilityService), 199, identifier: nameof(Reading));
  public static readonly ErrorCode InvalidCatalogue = new(nameof(InvalidCatalogue), 200);
  public static readonly ErrorCode EstateUsageTypeNameIsNullOrEmptyString = new(nameof(EstateUsageTypeNameIsNullOrEmptyString), 201, identifier: nameof(EstateUsageType.Name));
  public static readonly ErrorCode EstateMainUsageTypeNameIsNullOrEmptyString = new(nameof(EstateMainUsageTypeNameIsNullOrEmptyString), 202, identifier: nameof(EstateMainUsageType.Name));
  public static readonly ErrorCode UsageTypeNotForThisEntity = new(nameof(UsageTypeNotForThisEntity), 203);
  public static readonly ErrorCode EstateUnitNonExistingUsageType = new(nameof(EstateUnitNonExistingUsageType), 204, identifier: nameof(EstateUnit));
  public static readonly ErrorCode CadastralUnitTaxConfigCodeIsNullOrEmptyString = new(nameof(CadastralUnitTaxConfigCodeIsNullOrEmptyString), 205, identifier: nameof(CadastralUnitTaxConfig.Code));
  public static readonly ErrorCode CadastralUnitTaxConfigValueIsNullOrEmptyString = new(nameof(CadastralUnitTaxConfigValueIsNullOrEmptyString), 206, identifier: nameof(CadastralUnitTaxConfig.Value));
  public static readonly ErrorCode TaxConfigGroupAlreadyExists = new(nameof(TaxConfigGroupAlreadyExists), 207);
  public static readonly ErrorCode UnableToMapTaxConfigSubValues = new(nameof(UnableToMapTaxConfigSubValues), 208);
  public static readonly ErrorCode CadastralLandCategoryInvalidCountryISO = new(nameof(CadastralLandCategoryInvalidCountryISO), 209);
  public static readonly ErrorCode ReportGeneratorDoesntSupportSpecifiedFormat = new(nameof(ReportGeneratorDoesntSupportSpecifiedFormat), 210);
  public static readonly ErrorCode TaxCreditNonExistingManagementSubject = new(nameof(TaxCreditNonExistingManagementSubject), 211);
  public static readonly ErrorCode ManagementSubjectNotFound = new(nameof(ManagementSubjectNotFound), 212);
  public static readonly ErrorCode EstateUnitNotFound = new(nameof(EstateUnitNotFound), 213);
  public static readonly ErrorCode ContractTypeNotFound = new(nameof(ContractTypeNotFound), 214);
  public static readonly ErrorCode CatalogueCategoryNotFound = new(nameof(CatalogueCategoryNotFound), 215);
  public static readonly ErrorCode CatalogueSubCategoryNotFound = new(nameof(CatalogueCategoryNotFound), 216);
  public static readonly ErrorCode CatalogueTypeNotFound = new(nameof(CatalogueTypeNotFound), 216);
  public static readonly ErrorCode SLANotFound = new(nameof(SLANotFound), 217);
  public static readonly ErrorCode DescriptionIsNullOrEmptyString = new(nameof(DescriptionIsNullOrEmptyString), 218);
  public static readonly ErrorCode SinceDateIsGreaterThanUntilDate = new(nameof(SinceDateIsGreaterThanUntilDate), 219);
  public static readonly ErrorCode OriginatingTemplateIsNullOrEmptyString = new(nameof(OriginatingTemplateIsNullOrEmptyString), 220);
  public static readonly ErrorCode OriginatingEstateGroupIsNullOrEmptyString = new(nameof(OriginatingEstateGroupIsNullOrEmptyString), 221);
  public static readonly ErrorCode ContractorSubjectNotFound = new(nameof(ContractorSubjectNotFound), 222);
  public static readonly ErrorCode ContractTemplateNotFound = new(nameof(ContractTemplateNotFound), 223);
  public static readonly ErrorCode EstateUnitGroupNotFound = new(nameof(EstateUnitGroupNotFound), 224);
  public static readonly ErrorCode CatalogueFilterNotFound = new(nameof(CatalogueFilterNotFound), 225);
  public static readonly ErrorCode OwnershipTypeNotMatching = new(nameof(OwnershipTypeNotMatching), 226);
  public static readonly ErrorCode CraftNotFound = new(nameof(CraftNotFound), 227);
  public static readonly ErrorCode QualificationLevelNotFound = new(nameof(QualificationLevelNotFound), 228);
  public static readonly ErrorCode ProviderSubjectNotFound = new(nameof(ProviderSubjectNotFound), 229);
  public static readonly ErrorCode LeaderSubjectNotFound = new(nameof(LeaderSubjectNotFound), 230);
  public static readonly ErrorCode PeriodEndIsLessThanOrEqualStart = new(nameof(LeaderSubjectNotFound), 231);
  public static readonly ErrorCode TimeRangesContainOverlaps = new(nameof(TimeRangesContainOverlaps), 232);
  public static readonly ErrorCode CalendarContainsDuplicateDays = new(nameof(CalendarContainsDuplicateDays), 233);
  public static readonly ErrorCode EmptyConditionsList = new(nameof(EmptyConditionsList), 234);
  public static readonly ErrorCode CalendarNotFound = new(nameof(CalendarNotFound), 235);
  public static readonly ErrorCode TicketTypeNotFound = new(nameof(TicketTypeNotFound), 236);
  public static readonly ErrorCode PenaltyTypeNotFound = new(nameof(PenaltyTypeNotFound), 237);
  public static readonly ErrorCode ActivityIdsIsEmpty = new(nameof(ActivityIdsIsEmpty), 238);
  public static readonly ErrorCode CatalogueTypeHasNoSubCategory = new(nameof(CatalogueTypeHasNoSubCategory), 239);
  public static readonly ErrorCode CatalogueTypeActivityNotFound = new(nameof(CatalogueTypeActivityNotFound), 240);
  public static readonly ErrorCode InterventionTypeNotFound = new(nameof(InterventionTypeNotFound), 241);
  public static readonly ErrorCode InvalidPreventativeToleranceDays = new(nameof(InvalidPreventativeToleranceDays), 242);
  public static readonly ErrorCode InvalidPreventativeDaysOfWeek = new(nameof(InvalidPreventativeDaysOfWeek), 243);
  public static readonly ErrorCode PenaltyNotFound = new(nameof(PenaltyNotFound), 244);
  public static readonly ErrorCode AtLeastOnePricePeriodRequired = new(nameof(AtLeastOnePricePeriodRequired), 245);
  public static readonly ErrorCode PricePeriodsContainOverlaps = new(nameof(PricePeriodsContainOverlaps), 246);
  public static readonly ErrorCode PricePeriodSinceGreaterThanUntil = new(nameof(PricePeriodSinceGreaterThanUntil), 247);
  public static readonly ErrorCode PriceListMeasurementUnitNotFound = new(nameof(PriceListMeasurementUnitNotFound), 248);
  public static readonly ErrorCode PriceListNotFound = new(nameof(PriceListNotFound), 249);
  public static readonly ErrorCode CatalogueItemNotFound = new(nameof(CatalogueItemNotFound), 250);
  public static readonly ErrorCode PlannedTeamNotFound = new(nameof(PlannedTeamNotFound), 251);
  public static readonly ErrorCode PlannedTeamLeaderUserNotFound = new(nameof(PlannedTeamLeaderUserNotFound), 252);
  public static readonly ErrorCode SourceArticleNotFound = new(nameof(SourceArticleNotFound), 253);
  public static readonly ErrorCode MeasurementUnitNotFound = new(nameof(MeasurementUnitNotFound), 254);
  public static readonly ErrorCode TicketNotFound = new(nameof(TicketNotFound), 255);
  public static readonly ErrorCode LocationFloorNotFound = new(nameof(LocationFloorNotFound), 256);
  public static readonly ErrorCode ReplyNotFound = new(nameof(ReplyNotFound), 257);
  public static readonly ErrorCode ExpirationDateCannotBeEarlierThanEffectiveDate = new(nameof(ExpirationDateCannotBeEarlierThanEffectiveDate), 258);
  public static readonly ErrorCode CancellationNoticeDaysCountMustBeGreaterThanZero = new(nameof(CancellationNoticeDaysCountMustBeGreaterThanZero), 259);
  public static readonly ErrorCode RenewalNoticeDaysCountMustBeGreaterThanZero = new(nameof(RenewalNoticeDaysCountMustBeGreaterThanZero), 260);
  public static readonly ErrorCode MaximumRenewalDaysCountMustBeGreaterThanZero = new(nameof(MaximumRenewalDaysCountMustBeGreaterThanZero), 261);
  public static readonly ErrorCode ExternalCodeIsNullOrEmptyString = new(nameof(ExternalCodeIsNullOrEmptyString), 262);
  public static readonly ErrorCode DaysCountIsLessThanOrEqualToZero = new(nameof(DaysCountIsLessThanOrEqualToZero), 263);
  public static readonly ErrorCode InvlaidVATPercentage = new(nameof(InvlaidVATPercentage), 264);
  public static readonly ErrorCode InvlaidPurchaseFeeWithoutVAT = new(nameof(InvlaidPurchaseFeeWithoutVAT), 265);
  public static readonly ErrorCode InvlaidFixedRateFee = new(nameof(InvlaidFixedRateFee), 266);
  public static readonly ErrorCode InvlaidDiscountPercentage = new(nameof(InvlaidDiscountPercentage), 267);
  public static readonly ErrorCode OriginalTemplateIsNull = new(nameof(OriginalTemplateIsNull), 268);
  public static readonly ErrorCode OriginalEstateUnitGroupIsNull = new(nameof(OriginalEstateUnitGroupIsNull), 269);
  public static readonly ErrorCode TicketChecklistNotFound = new(nameof(TicketChecklistNotFound), 270);
  public static readonly ErrorCode ContractNotFound = new(nameof(ContractNotFound), 271);
  public static readonly ErrorCode EstateUnitNotInContract = new(nameof(EstateUnitNotInContract), 272);
  public static readonly ErrorCode TicketChecklistTemplateNotFound = new(nameof(TicketChecklistTemplateNotFound), 273);
  public static readonly ErrorCode DuplicateUserName = new(nameof(DuplicateUserName), 274);
  public static readonly ErrorCode InvalidTimePeriod = new(nameof(InvalidTimePeriod), 275);
  public static readonly ErrorCode PriceIsLessThanOrEqualToZero = new(nameof(PriceIsLessThanOrEqualToZero), 276);
  public static readonly ErrorCode InvalidFileFormat = new(nameof(InvalidFileFormat), 277);
  public static readonly ErrorCode WorkbookShouldContainOnlyOneWorksheet = new(nameof(WorkbookShouldContainOnlyOneWorksheet), 278);
  public static readonly ErrorCode WorksheetContainsNoRows = new(nameof(WorksheetContainsNoRows), 279);
  public static readonly ErrorCode InvalidRowFormat = new(nameof(InvalidRowFormat), 280);
  public static readonly ErrorCode DuplicateInternalCodes = new(nameof(InvalidRowFormat), 281);
  public static readonly ErrorCode InternalCodesAlredyInUse = new(nameof(InternalCodesAlredyInUse), 282);
  public static readonly ErrorCode ImportErrorsInRow = new(nameof(ImportErrorsInRow), 283);
  public static readonly ErrorCode InvalidaData = new(nameof(InvalidaData), 284);
  public static readonly ErrorCode UtilityServiceNotFound = new(nameof(UtilityServiceNotFound), 285);
  public static readonly ErrorCode InvalidActualConsumptionValuesCount = new(nameof(InvalidActualConsumptionValuesCount), 286);
  public static readonly ErrorCode InvalidExpectedConsumptionValuesCount = new(nameof(InvalidExpectedConsumptionValuesCount), 287);
  public static readonly ErrorCode ServiceCategoryNameIsNullOrEmptyString = new(nameof(ServiceCategoryNameIsNullOrEmptyString), 288, identifier: nameof(ServiceCategory.Name));
  public static readonly ErrorCode ServiceCategoryInternalCodeIsNullOrEmptyString = new(nameof(ServiceCategoryInternalCodeIsNullOrEmptyString), 289, identifier: nameof(ServiceCategory.InternalCode));
  public static readonly ErrorCode ServiceSubCategoryNameIsNullOrEmptyString = new(nameof(ServiceSubCategoryNameIsNullOrEmptyString), 290, identifier: nameof(ServiceSubCategory.Name));
  public static readonly ErrorCode ServiceSubCategoryInternalCodeIsNullOrEmptyString = new(nameof(ServiceSubCategoryInternalCodeIsNullOrEmptyString), 291, identifier: nameof(ServiceSubCategory.InternalCode));
  public static readonly ErrorCode ServiceNameIsNullOrEmptyString = new(nameof(ServiceNameIsNullOrEmptyString), 292, identifier: nameof(Service.Name));
  public static readonly ErrorCode ServiceInternalCodeIsNullOrEmptyString = new(nameof(ServiceInternalCodeIsNullOrEmptyString), 293, identifier: nameof(Service.InternalCode));
  public static readonly ErrorCode ServiceCategoryIsNull = new(nameof(ServiceCategoryIsNull), 294, identifier: nameof(Service.Category));
  public static readonly ErrorCode ServiceInvalidSubCategory = new(nameof(ServiceInvalidSubCategory), 295, identifier: nameof(Service.SubCategory));
  public static readonly ErrorCode ServiceActivityNameIsNullOrEmptyString = new(nameof(ServiceActivityNameIsNullOrEmptyString), 296, identifier: nameof(ServiceActivity.Name));
  
  public string Message { get; }
  public string? Identifier { get; }

  public ErrorCode(string name, int value, string? message = null, string? identifier = null) : base(name, value)
  {
    Message = message ?? name.Humanize();
    Identifier = identifier;
  }

  public ValidationError ToValidationError()
    => new()
    {
      ErrorCode = Name,
      ErrorMessage = Message,
      Severity = ValidationSeverity.Error,
      Identifier = Identifier
    };

  public ValidationError ToValidationError(IStringLocalizer<ErrorCode> localizer, params object[] arguments)
    => new()
    {
      ErrorCode = Name,
      ErrorMessage = localizer[Name, arguments],
      Severity = ValidationSeverity.Error,
      Identifier = Identifier
    };
}
