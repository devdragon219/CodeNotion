// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealGimm.Infrastructure.Common.Data;

#nullable disable

namespace RealGimm.Infra.PgSql.Common
{
    [DbContext(typeof(CommonDbContext))]
    [Migration("20241029115912_RefactorNotificationToGetRidOfStoringLoclizedText")]
    partial class RefactorNotificationToGetRidOfStoringLoclizedText
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("common")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealGimm.Core.Common.AccountingItemAggregate.AccountingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("AccountingItems", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.AuditLogAggregate.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("AuditData")
                        .HasMaxLength(7400)
                        .HasColumnType("character varying(7400)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TablePk")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.CityAggregate.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Polygon>("AdministrativeBoundary")
                        .HasColumnType("geometry");

                    b.Property<string>("CadastralCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CityExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CityProvider")
                        .HasColumnType("uuid");

                    b.Property<string>("ClimateZoneCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CountryISO")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CountyExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CountyGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("CountyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CountyShortCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCountyMainCity")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RegionExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("RegionGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("RegionName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CadastralCode");

                    b.HasIndex("CityProvider");

                    b.HasIndex("CountryISO");

                    b.HasIndex("CountyGuid");

                    b.HasIndex("Guid");

                    b.HasIndex("RegionGuid");

                    b.HasIndex("CityProvider", "CityExternalCode");

                    b.HasIndex("CityProvider", "CountyExternalCode");

                    b.HasIndex("CityProvider", "RegionExternalCode");

                    b.ToTable("Cities", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.ConfigAggregate.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Function")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Value")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("Function", "Name")
                        .IsUnique();

                    b.ToTable("Config", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.CostCentreAggregate.CostCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ManagementSubjectId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("Since")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("CostCentres", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.CustomCodeAggregate.CustomCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DataProvider")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Function")
                        .HasColumnType("integer");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalCode");

                    b.HasIndex("InternalCode");

                    b.HasIndex("DataProvider", "Group");

                    b.ToTable("CustomCodes", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.InterestRateAggregate.InterestRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryISO3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateOnly?>("Since")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("InterestRates", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("Notifications", "common");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RealGimm.Core.Common.OfficialActAggregate.ActRegistrationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DateType")
                        .HasColumnType("integer");

                    b.Property<int?>("OfficialActId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Value")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("OfficialActId");

                    b.ToTable("ActRegistrationDate", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.OfficialActAggregate.ActRegistrationField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<int?>("OfficialActId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OfficialActId");

                    b.ToTable("ActRegistrationField", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.OfficialActAggregate.OfficialAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int?>("EstateUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("IssuerCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IssuerExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IssuerName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("ProtocolNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("OfficialActs", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.RevaluationDataAggregate.RevaluationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseYear")
                        .HasColumnType("integer");

                    b.Property<string>("CountryISO3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<Guid>("DataProvider")
                        .HasColumnType("uuid");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<decimal>("RevaluationIndex")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RevaluationData", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.TaxConfigAggregate.TaxConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupingName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<Guid?>("GroupingReference")
                        .HasColumnType("uuid");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TaxCalculator")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TaxConfigs", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.TaxConfigAggregate.TaxConfigSubValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("DateValue")
                        .HasColumnType("date");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<decimal?>("NumberValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("StringValue")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("SubTable")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TaxConfigId")
                        .HasColumnType("integer");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaxConfigId");

                    b.ToTable("TaxConfigSubValue", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.VATRateAggregate.VATRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("RatePercent")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VATRates", "common");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.ContractsExpirationNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.Notification");

                    b.Property<int[]>("ContractIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("DaysToExpiration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActiveContracts")
                        .HasColumnType("boolean");

                    b.ToTable("Notifications", "common", t =>
                        {
                            t.Property("DaysToExpiration")
                                .HasColumnName("ContractsExpirationNotification_DaysToExpiration");
                        });

                    b.HasDiscriminator().HasValue("ContractsExpirationNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.CostChargesExpirationNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.Notification");

                    b.Property<int[]>("CostChargeIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("DaysToExpiration")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("CostChargesExpirationNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.DocumentExpiredNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.Notification");

                    b.Property<string>("DocumentCmisId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("DocumentExpiredNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.EstatePortfolioExportIsReadyNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.Notification");

                    b.Property<Guid?>("DownloadGuid")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("EstatePortfolioExportIsReadyNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.PasswordExpirationNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.Notification");

                    b.Property<DateTime>("PasswordExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("PasswordExpirationNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.CatalogueItemDocumentExpiredNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.DocumentExpiredNotification");

                    b.Property<int>("CatalogueTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("EstateId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("CatalogueItemDocumentExpiredNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.ContractDocumentExpiredNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.DocumentExpiredNotification");

                    b.Property<bool>("IsContractActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContractSublocated")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("ContractDocumentExpiredNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.EstateDocumentExpiredNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.DocumentExpiredNotification");

                    b.HasDiscriminator().HasValue("EstateDocumentExpiredNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.EstateUnitDocumentExpiredNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.DocumentExpiredNotification");

                    b.HasDiscriminator().HasValue("EstateUnitDocumentExpiredNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.NotificationAggregate.SubjectDocumentExpiredNotification", b =>
                {
                    b.HasBaseType("RealGimm.Core.Common.NotificationAggregate.DocumentExpiredNotification");

                    b.HasDiscriminator().HasValue("SubjectDocumentExpiredNotification");
                });

            modelBuilder.Entity("RealGimm.Core.Common.OfficialActAggregate.ActRegistrationDate", b =>
                {
                    b.HasOne("RealGimm.Core.Common.OfficialActAggregate.OfficialAct", null)
                        .WithMany("ActRegistrationDates")
                        .HasForeignKey("OfficialActId");
                });

            modelBuilder.Entity("RealGimm.Core.Common.OfficialActAggregate.ActRegistrationField", b =>
                {
                    b.HasOne("RealGimm.Core.Common.OfficialActAggregate.OfficialAct", null)
                        .WithMany("ActRegistrationFields")
                        .HasForeignKey("OfficialActId");
                });

            modelBuilder.Entity("RealGimm.Core.Common.TaxConfigAggregate.TaxConfigSubValue", b =>
                {
                    b.HasOne("RealGimm.Core.Common.TaxConfigAggregate.TaxConfig", null)
                        .WithMany("SubValues")
                        .HasForeignKey("TaxConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealGimm.Core.Common.OfficialActAggregate.OfficialAct", b =>
                {
                    b.Navigation("ActRegistrationDates");

                    b.Navigation("ActRegistrationFields");
                });

            modelBuilder.Entity("RealGimm.Core.Common.TaxConfigAggregate.TaxConfig", b =>
                {
                    b.Navigation("SubValues");
                });
#pragma warning restore 612, 618
        }
    }
}
