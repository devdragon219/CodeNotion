// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealGimm.Infrastructure.Anag.Data;

#nullable disable

namespace RealGimm.Infra.PgSql.Anag
{
    [DbContext(typeof(AnagDbContext))]
    [Migration("20241106115457_FixComputedName")]
    partial class FixComputedName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("anag")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealGimm.Core.Anag.OrgUnitAggregate.OrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int[]>("GeographicalCities")
                        .HasColumnType("integer[]");

                    b.Property<Polygon>("InfluenceArea")
                        .HasColumnType("geometry");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("character varying(3192)");

                    b.Property<int>("OrgUnitType")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentOrgUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentSubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InternalCode")
                        .IsUnique();

                    b.HasIndex("ParentOrgUnitId");

                    b.HasIndex("ParentSubjectId");

                    b.ToTable("OrgUnit", "anag");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CityReference")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryISO")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CountyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CountyReference")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LocalPostCode")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("character varying(3192)");

                    b.Property<string>("Numbering")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("RegionReference")
                        .HasColumnType("uuid");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Toponymy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "AddressType", "CountryISO", "CityName", "Toponymy", "Numbering")
                        .IsUnique();

                    b.ToTable("Address", "anag");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountHolder")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("BankAccountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("character varying(3192)");

                    b.Property<string>("ReferenceCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ReferenceCodeType")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "BankAccountType", "ReferenceCodeType", "ReferenceCode")
                        .IsUnique();

                    b.ToTable("BankAccount", "anag");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("ContactInfoType")
                        .HasColumnType("integer");

                    b.Property<int>("ContactType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("character varying(3192)");

                    b.Property<int?>("OrgUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("SubjectId", "ContactType", "ContactInfoType", "ContactInfo")
                        .IsUnique();

                    b.ToTable("Contact", "anag");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CustomPersonType")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomSubjectStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalSourceCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasComputedColumnSql("CASE\r\n  WHEN \"PersonType\" = 0\r\n  THEN \"LastName\" || ' ' || \"FirstName\"\r\nELSE\r\n  COALESCE(\"ShorthandDescription\", \"FullName\")\r\nEND", true);

                    b.Property<int>("PersonType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExternalSourceCode");

                    b.HasIndex("InternalCode");

                    b.ToTable("Subjects", "anag");

                    b.HasDiscriminator<int>("PersonType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.SubjectRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GroupRelationType")
                        .HasColumnType("integer");

                    b.Property<int>("MainId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("character varying(3192)");

                    b.Property<int?>("OfficerRelationType")
                        .HasColumnType("integer");

                    b.Property<int>("RelationType")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("Since")
                        .HasColumnType("date");

                    b.Property<int>("SubordinateId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SubordinateId");

                    b.HasIndex("MainId", "SubordinateId", "RelationType")
                        .IsUnique()
                        .HasFilter("\"Since\" IS NULL");

                    b.HasIndex("MainId", "SubordinateId", "RelationType", "Since")
                        .IsUnique();

                    b.ToTable("SubjectRelation", "anag");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.TaxStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("character varying(3192)");

                    b.Property<DateOnly?>("Since")
                        .HasColumnType("date");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TaxStatusType")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("TaxStatus", "anag");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectCategoryAggregate.SubjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Function")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.ToTable("SubjectCategories", "anag");
                });

            modelBuilder.Entity("SubjectSubjectCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("SubjectSubjectCategory", "anag");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.LegalSubject", b =>
                {
                    b.HasBaseType("RealGimm.Core.Anag.SubjectAggregate.Subject");

                    b.Property<string>("AdditionalGovIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("AdditionalGovIdCode");

                    b.Property<string>("AdditionalTaxIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("AdditionalTaxIdCode");

                    b.Property<string>("BankingId1")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BankingId1");

                    b.Property<string>("BankingId2")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BankingId2");

                    b.Property<string>("BaseCountryISO")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("BaseCountryISO");

                    b.Property<string>("BaseCountryTaxIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BaseCountryTaxIdCode");

                    b.Property<DateOnly?>("BusinessStart")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("BusinessStart");

                    b.Property<string>("CompaniesHouseIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CompaniesHouseIdCode");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("FullName");

                    b.Property<string>("InterGroupSignature")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("InterGroupSignature");

                    b.Property<int>("LegalSubjectType")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Location");

                    b.Property<decimal?>("ShareCapital")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("ShareCapital");

                    b.Property<string>("ShorthandDescription")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ShorthandDescription");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.ManagementSubject", b =>
                {
                    b.HasBaseType("RealGimm.Core.Anag.SubjectAggregate.Subject");

                    b.Property<string>("AdditionalGovIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("AdditionalGovIdCode");

                    b.Property<string>("AdditionalTaxIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("AdditionalTaxIdCode");

                    b.Property<string>("BankingId1")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BankingId1");

                    b.Property<string>("BankingId2")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BankingId2");

                    b.Property<string>("BaseCountryISO")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("BaseCountryISO");

                    b.Property<string>("BaseCountryTaxIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BaseCountryTaxIdCode");

                    b.Property<DateOnly?>("BusinessStart")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("BusinessStart");

                    b.Property<string>("CompaniesHouseIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CompaniesHouseIdCode");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("FullName");

                    b.Property<string>("InterGroupSignature")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("InterGroupSignature");

                    b.Property<string>("Location")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Location");

                    b.Property<string>("ManagementCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("ShareCapital")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("ShareCapital");

                    b.Property<string>("ShorthandDescription")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ShorthandDescription");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.PhysicalSubject", b =>
                {
                    b.HasBaseType("RealGimm.Core.Anag.SubjectAggregate.Subject");

                    b.Property<string>("BirthCountryTaxIdCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("BirthSex")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomGender")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("DeathDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("LastName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("ProfessionalTaxIdCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BaseCountryTaxIdCode");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("RealGimm.Core.Anag.OrgUnitAggregate.OrgUnit", b =>
                {
                    b.HasOne("RealGimm.Core.Anag.OrgUnitAggregate.OrgUnit", "ParentOrgUnit")
                        .WithMany("Children")
                        .HasForeignKey("ParentOrgUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealGimm.Core.Anag.SubjectAggregate.Subject", "ParentSubject")
                        .WithMany("OrgUnits")
                        .HasForeignKey("ParentSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentOrgUnit");

                    b.Navigation("ParentSubject");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.Address", b =>
                {
                    b.HasOne("RealGimm.Core.Anag.SubjectAggregate.Subject", null)
                        .WithMany("Addresses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.BankAccount", b =>
                {
                    b.HasOne("RealGimm.Core.Anag.SubjectAggregate.Subject", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.Contact", b =>
                {
                    b.HasOne("RealGimm.Core.Anag.OrgUnitAggregate.OrgUnit", "OrgUnit")
                        .WithMany("Contacts")
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealGimm.Core.Anag.SubjectAggregate.Subject", "Subject")
                        .WithMany("Contacts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OrgUnit");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.SubjectRelation", b =>
                {
                    b.HasOne("RealGimm.Core.Anag.SubjectAggregate.Subject", "Main")
                        .WithMany("RelationMains")
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Anag.SubjectAggregate.Subject", "Subordinate")
                        .WithMany("RelationSubordinates")
                        .HasForeignKey("SubordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.TaxStatus", b =>
                {
                    b.HasOne("RealGimm.Core.Anag.SubjectAggregate.Subject", null)
                        .WithMany("TaxStatuses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectSubjectCategory", b =>
                {
                    b.HasOne("RealGimm.Core.Anag.SubjectCategoryAggregate.SubjectCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Anag.SubjectAggregate.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealGimm.Core.Anag.OrgUnitAggregate.OrgUnit", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("RealGimm.Core.Anag.SubjectAggregate.Subject", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankAccounts");

                    b.Navigation("Contacts");

                    b.Navigation("OrgUnits");

                    b.Navigation("RelationMains");

                    b.Navigation("RelationSubordinates");

                    b.Navigation("TaxStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
