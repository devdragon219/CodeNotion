// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealGimm.Infrastructure.Fclt.Data;

#nullable disable

namespace RealGimm.Infra.PgSql.Fclt
{
    [DbContext(typeof(FcltDbContext))]
    [Migration("20241026141618_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("fclt")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContractPriceList", b =>
                {
                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("PriceListsId")
                        .HasColumnType("integer");

                    b.HasKey("ContractId", "PriceListsId");

                    b.HasIndex("PriceListsId");

                    b.ToTable("ContractPriceList", "fclt");
                });

            modelBuilder.Entity("ContractTemplatePenaltyRelation", b =>
                {
                    b.Property<int>("ContractTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("PenaltiesId")
                        .HasColumnType("integer");

                    b.HasKey("ContractTemplateId", "PenaltiesId");

                    b.HasIndex("PenaltiesId");

                    b.ToTable("ContractTemplatePenaltyRelation", "fclt");
                });

            modelBuilder.Entity("ContractTemplateSLARelation", b =>
                {
                    b.Property<int>("ContractTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("SLAsId")
                        .HasColumnType("integer");

                    b.HasKey("ContractTemplateId", "SLAsId");

                    b.HasIndex("SLAsId");

                    b.ToTable("ContractTemplateSLARelation", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.CalendarAggregate.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Calendars", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.CalendarAggregate.CalendarDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("CalendarDay", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.CalendarAggregate.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Periodicity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Holiday", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.ContractAggregate.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AgreementDate")
                        .HasColumnType("date");

                    b.Property<int?>("CancellationNoticeDaysCount")
                        .HasColumnType("integer");

                    b.Property<int[]>("CatalogueTypeIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("integer");

                    b.Property<int[]>("EstateUnitIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("MaximumRenewalDaysCount")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginalEstateUnitGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginalTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderSubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("RenewalNoticeDaysCount")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginalEstateUnitGroupId");

                    b.HasIndex("OriginalTemplateId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contracts", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.ContractTemplateAggregate.ContractTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("CatalogueTypeIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractTypeId");

                    b.ToTable("ContractTemplates", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.ContractTypeAggregate.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ContractTypes", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.CraftAggregate.Craft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Crafts", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.EstateUnitGroupAggregate.EstateUnitGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("EstateUnitIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ManagementSubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.ToTable("EstateUnitGroups", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.InterventionTypeAggregate.InterventionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.ToTable("InterventionTypes", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PenaltyAggregate.Penalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ThenOperator")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Penalties", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PenaltyAggregate.PenaltyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<int?>("PenaltyId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PenaltyId");

                    b.ToTable("PenaltyValue", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PriceListAggregate.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PriceLists", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PriceListArticleAggregate.ArticlePricePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<int?>("PriceListArticleId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Since")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PriceListArticleId");

                    b.ToTable("ArticlePricePeriod", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PriceListArticleAggregate.PriceListArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("CatalogueTypeIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("PriceListId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("PriceListId");

                    b.ToTable("PriceListArticles", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PriceListMeasurementUnitAggregate.PriceListMeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PriceListMeasurementUnits", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.QualificationLevelAggregate.QualificationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("QualificationLevels", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.SLA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("SLAs", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComplexTicketConditionId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.HasKey("Id");

                    b.HasIndex("ComplexTicketConditionId");

                    b.ToTable("TicketCondition", "fclt");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TicketCondition");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.Quote", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Classifications")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("InterventionDueDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsFrameworkAgreement")
                        .HasColumnType("boolean");

                    b.Property<int>("MasterStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("character varying(3192)");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Quote", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.QuoteHistory.QuoteHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<int?>("QuoteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteHistoryEntry", "fclt");

                    b.HasDiscriminator<string>("Discriminator").HasValue("QuoteHistoryEntry");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(3192)
                        .HasColumnType("character varying(3192)");

                    b.Property<bool>("IsOperator")
                        .HasColumnType("boolean");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Reply", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("CatalogueItemIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("CatalogueTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChecklistId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsExcludedFromMaintenanceContract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverduePlannedPeriod")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWorkSafetyExpected")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationEstateUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationFloorId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationRoom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LocationSector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MainType")
                        .HasColumnType("integer");

                    b.Property<int>("MasterStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("PlannedTeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlannedTeamLeaderUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Requestor")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("RequestorContactEmail")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("RequestorContactPhone")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Summary")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("SupplierSubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkOrderReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomTypeId");

                    b.HasIndex("PlannedTeamId");

                    b.HasIndex("TicketId");

                    b.ToTable("Tickets", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.TicketHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(89)
                        .HasColumnType("character varying(89)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketHistoryEntry", "fclt");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TicketHistoryEntry");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketChecklistAggregate.TicketChecklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogueTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("CostBaseFactor")
                        .HasColumnType("integer");

                    b.Property<int>("EstateUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int[]>("OnTriggerActivityIds")
                        .HasColumnType("integer[]");

                    b.Property<int?>("OnTriggerCraftId")
                        .HasColumnType("integer");

                    b.Property<int?>("OnTriggerInterventionTypeId")
                        .HasColumnType("integer");

                    b.Property<int[]>("PreventativeActivityIds")
                        .HasColumnType("integer[]");

                    b.Property<int?>("PreventativeCraftId")
                        .HasColumnType("integer");

                    b.Property<int[]>("PreventativeDaysOfWeek")
                        .HasColumnType("integer[]");

                    b.Property<int?>("PreventativeInterventionTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreventativePlannedPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("PreventativeToleranceDays")
                        .HasColumnType("integer");

                    b.Property<decimal>("RawWorkCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("SafetyCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("OnTriggerCraftId");

                    b.HasIndex("OnTriggerInterventionTypeId");

                    b.HasIndex("PreventativeCraftId");

                    b.HasIndex("PreventativeInterventionTypeId");

                    b.ToTable("TicketChecklists", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketChecklistTemplateAggregate.TicketChecklistTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogueTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CostBaseFactor")
                        .HasColumnType("integer");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int[]>("OnTriggerActivityIds")
                        .HasColumnType("integer[]");

                    b.Property<int?>("OnTriggerCraftId")
                        .HasColumnType("integer");

                    b.Property<int?>("OnTriggerInterventionTypeId")
                        .HasColumnType("integer");

                    b.Property<int[]>("PreventativeActivityIds")
                        .HasColumnType("integer[]");

                    b.Property<int?>("PreventativeCraftId")
                        .HasColumnType("integer");

                    b.Property<int[]>("PreventativeDaysOfWeek")
                        .HasColumnType("integer[]");

                    b.Property<int?>("PreventativeInterventionTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreventativePlannedPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("PreventativeToleranceDays")
                        .HasColumnType("integer");

                    b.Property<decimal>("RawWorkCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("SafetyCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OnTriggerCraftId");

                    b.HasIndex("OnTriggerInterventionTypeId");

                    b.HasIndex("PreventativeCraftId");

                    b.HasIndex("PreventativeInterventionTypeId");

                    b.ToTable("TicketChecklistTemplates", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketTypeAggregate.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.WorkTeamAggregate.WorkTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateOnly>("InsertionDate")
                        .HasColumnType("date");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LeaderUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderSubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WorkTeams", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.WorkTeamAggregate.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CraftId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("QualificationLevelId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Since")
                        .HasColumnType("date");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.Property<int?>("WorkTeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CraftId");

                    b.HasIndex("QualificationLevelId");

                    b.HasIndex("TicketId");

                    b.HasIndex("WorkTeamId");

                    b.ToTable("Worker", "fclt");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.ComplexTicketCondition", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.SLAAggregate.TicketCondition");

                    b.Property<int>("Operator")
                        .HasColumnType("integer");

                    b.Property<int?>("PenaltyId")
                        .HasColumnType("integer");

                    b.Property<int?>("SLAIfId")
                        .HasColumnType("integer");

                    b.Property<int?>("SLAThenId")
                        .HasColumnType("integer");

                    b.HasIndex("PenaltyId")
                        .IsUnique();

                    b.HasIndex("SLAIfId")
                        .IsUnique();

                    b.HasIndex("SLAThenId")
                        .IsUnique();

                    b.ToTable("TicketCondition", "fclt", t =>
                        {
                            t.Property("Operator")
                                .HasColumnName("ComplexTicketCondition_Operator");
                        });

                    b.HasDiscriminator().HasValue("ComplexTicketCondition");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketCatalogueCategoryEqualityCondition", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.SLAAggregate.TicketCondition");

                    b.Property<int>("Operator")
                        .HasColumnType("integer");

                    b.Property<int>("TargetCatalogueCategoryId")
                        .HasColumnType("integer");

                    b.ToTable("TicketCondition", "fclt", t =>
                        {
                            t.Property("Operator")
                                .HasColumnName("TicketCatalogueCategoryEqualityCondition_Operator");
                        });

                    b.HasDiscriminator().HasValue("TicketCatalogueCategoryEqualityCondition");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketCatalogueSubCategoryEqualityCondition", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.SLAAggregate.TicketCondition");

                    b.Property<int>("Operator")
                        .HasColumnType("integer");

                    b.Property<int>("TargetCatalogueSubCategoryId")
                        .HasColumnType("integer");

                    b.ToTable("TicketCondition", "fclt", t =>
                        {
                            t.Property("Operator")
                                .HasColumnName("TicketCatalogueSubCategoryEqualityCondition_Operator");
                        });

                    b.HasDiscriminator().HasValue("TicketCatalogueSubCategoryEqualityCondition");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketCatalogueTypeEqualityCondition", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.SLAAggregate.TicketCondition");

                    b.Property<int>("Operator")
                        .HasColumnType("integer");

                    b.Property<int>("TargetCatalogueTypeId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("TicketCatalogueTypeEqualityCondition");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketMasterStatusCondition", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.SLAAggregate.TicketCondition");

                    b.Property<int>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxTimePeriodInMinutes")
                        .HasColumnType("integer");

                    b.Property<int?>("MinTimePeriodInMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("TargetMasterStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TimeComparisonOperator")
                        .HasColumnType("integer");

                    b.HasIndex("CalendarId");

                    b.HasDiscriminator().HasValue("TicketMasterStatusCondition");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketPriorityEqualityCondition", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.SLAAggregate.TicketCondition");

                    b.Property<int>("Operator")
                        .HasColumnType("integer");

                    b.Property<int>("TargetPriority")
                        .HasColumnType("integer");

                    b.ToTable("TicketCondition", "fclt", t =>
                        {
                            t.Property("Operator")
                                .HasColumnName("TicketPriorityEqualityCondition_Operator");
                        });

                    b.HasDiscriminator().HasValue("TicketPriorityEqualityCondition");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketTypeEqualityCondition", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.SLAAggregate.TicketCondition");

                    b.Property<int>("Operator")
                        .HasColumnType("integer");

                    b.Property<int>("TargetTicketTypeId")
                        .HasColumnType("integer");

                    b.HasIndex("TargetTicketTypeId");

                    b.ToTable("TicketCondition", "fclt", t =>
                        {
                            t.Property("Operator")
                                .HasColumnName("TicketTypeEqualityCondition_Operator");
                        });

                    b.HasDiscriminator().HasValue("TicketTypeEqualityCondition");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.QuoteHistory.AmountUpdatedQuoteHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.QuoteHistory.QuoteHistoryEntry");

                    b.Property<decimal?>("NewAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("OldAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasDiscriminator().HasValue("AmountUpdatedQuoteHistoryEntry");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.QuoteHistory.ApprovedAmountUpdatedQuoteHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.QuoteHistory.QuoteHistoryEntry");

                    b.Property<decimal?>("NewApprovedAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("OldApprovedAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasDiscriminator().HasValue("ApprovedAmountUpdatedQuoteHistoryEntry");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.QuoteHistory.MasterStatusUpdatedQuoteHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.QuoteHistory.QuoteHistoryEntry");

                    b.Property<int>("NewMasterStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("OldMasterStatus")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("MasterStatusUpdatedQuoteHistoryEntry");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.ConvertedToExcludedFromMaintenanceContractTicketHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.TicketHistoryEntry");

                    b.HasDiscriminator().HasValue("ConvertedToExcludedFromMaintenanceContractTicketHistoryEntry");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.MasterStatusUpdatedTicketHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.TicketHistoryEntry");

                    b.Property<int>("NewMasterStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("OldMasterStatus")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("MasterStatusUpdatedTicketHistoryEntry");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.NewReminderTicketHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.TicketHistoryEntry");

                    b.Property<DateOnly>("ReminderDate")
                        .HasColumnType("date");

                    b.Property<string>("ReminderSummary")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.ToTable("TicketHistoryEntry", "fclt", t =>
                        {
                            t.Property("ReminderDate")
                                .HasColumnName("NewReminderTicketHistoryEntry_ReminderDate");

                            t.Property("ReminderSummary")
                                .HasColumnName("NewReminderTicketHistoryEntry_ReminderSummary");
                        });

                    b.HasDiscriminator().HasValue("NewReminderTicketHistoryEntry");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.NewReplyTicketHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.TicketHistoryEntry");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("integer");

                    b.HasIndex("ReplyId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("NewReplyTicketHistoryEntry");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.ReminderDeletedTicketHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.TicketHistoryEntry");

                    b.Property<DateOnly>("ReminderDate")
                        .HasColumnType("date");

                    b.Property<string>("ReminderSummary")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasDiscriminator().HasValue("ReminderDeletedTicketHistoryEntry");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.ReminderUpdatedTicketHistoryEntry", b =>
                {
                    b.HasBaseType("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.TicketHistoryEntry");

                    b.Property<DateOnly>("NewReminderDate")
                        .HasColumnType("date");

                    b.Property<string>("NewReminderSummary")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateOnly>("OldReminderDate")
                        .HasColumnType("date");

                    b.Property<string>("OldReminderSummary")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasDiscriminator().HasValue("ReminderUpdatedTicketHistoryEntry");
                });

            modelBuilder.Entity("ContractPriceList", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.ContractAggregate.Contract", null)
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Fclt.PriceListAggregate.PriceList", null)
                        .WithMany()
                        .HasForeignKey("PriceListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractTemplatePenaltyRelation", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.ContractTemplateAggregate.ContractTemplate", null)
                        .WithMany()
                        .HasForeignKey("ContractTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Fclt.PenaltyAggregate.Penalty", null)
                        .WithMany()
                        .HasForeignKey("PenaltiesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractTemplateSLARelation", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.ContractTemplateAggregate.ContractTemplate", null)
                        .WithMany()
                        .HasForeignKey("ContractTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Fclt.SLAAggregate.SLA", null)
                        .WithMany()
                        .HasForeignKey("SLAsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.CalendarAggregate.CalendarDay", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.CalendarAggregate.Calendar", null)
                        .WithMany("Days")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("RealGimm.Core.Fclt.CalendarAggregate.TimeRange", "TimeRanges", b1 =>
                        {
                            b1.Property<int>("CalendarDayId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<TimeOnly>("Since")
                                .HasColumnType("time without time zone");

                            b1.Property<TimeOnly>("Until")
                                .HasColumnType("time without time zone");

                            b1.HasKey("CalendarDayId", "Id");

                            b1.ToTable("TimeRange", "fclt");

                            b1.WithOwner()
                                .HasForeignKey("CalendarDayId");
                        });

                    b.Navigation("TimeRanges");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.CalendarAggregate.Holiday", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.CalendarAggregate.Calendar", null)
                        .WithMany("Holidays")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.ContractAggregate.Contract", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.EstateUnitGroupAggregate.EstateUnitGroup", "OriginalEstateUnitGroup")
                        .WithMany()
                        .HasForeignKey("OriginalEstateUnitGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RealGimm.Core.Fclt.ContractTemplateAggregate.ContractTemplate", "OriginalTemplate")
                        .WithMany()
                        .HasForeignKey("OriginalTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RealGimm.Core.Fclt.ContractTypeAggregate.ContractType", "Type")
                        .WithMany("Contracts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("RealGimm.Core.Fclt.ContractAggregate.BillingInfo", "BillingInfo", b1 =>
                        {
                            b1.Property<int>("ContractId")
                                .HasColumnType("integer");

                            b1.Property<int?>("BillingPeriod")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("DiscountPercentage")
                                .HasPrecision(18, 6)
                                .HasColumnType("numeric(18,6)");

                            b1.Property<decimal?>("FixedRateFee")
                                .HasPrecision(18, 6)
                                .HasColumnType("numeric(18,6)");

                            b1.Property<decimal?>("PurchaseFeeWithoutVAT")
                                .HasPrecision(18, 6)
                                .HasColumnType("numeric(18,6)");

                            b1.Property<decimal?>("VATPercentage")
                                .HasPrecision(18, 6)
                                .HasColumnType("numeric(18,6)");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts", "fclt");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsMany("RealGimm.Core.Fclt.ContractAggregate.FrameworkAgreement", "FrameworkAgreements", b1 =>
                        {
                            b1.Property<int>("ContractId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ExternalCode")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Notes")
                                .HasMaxLength(3192)
                                .HasColumnType("character varying(3192)");

                            b1.HasKey("ContractId", "Id");

                            b1.ToTable("FrameworkAgreement", "fclt");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsMany("RealGimm.Core.Fclt.ContractAggregate.TermExtension", "TermExtensions", b1 =>
                        {
                            b1.Property<int>("ContractId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("DaysCount")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("FeeDifference")
                                .HasPrecision(18, 6)
                                .HasColumnType("numeric(18,6)");

                            b1.Property<string>("Notes")
                                .HasMaxLength(3192)
                                .HasColumnType("character varying(3192)");

                            b1.HasKey("ContractId", "Id");

                            b1.ToTable("TermExtension", "fclt");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.Navigation("BillingInfo")
                        .IsRequired();

                    b.Navigation("FrameworkAgreements");

                    b.Navigation("OriginalEstateUnitGroup");

                    b.Navigation("OriginalTemplate");

                    b.Navigation("TermExtensions");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.ContractTemplateAggregate.ContractTemplate", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.ContractTypeAggregate.ContractType", "ContractType")
                        .WithMany("ContractTemplates")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContractType");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PenaltyAggregate.Penalty", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.ContractAggregate.Contract", "Contract")
                        .WithMany("Penalties")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PenaltyAggregate.PenaltyValue", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.PenaltyAggregate.Penalty", null)
                        .WithMany("ThenPenalties")
                        .HasForeignKey("PenaltyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PriceListArticleAggregate.ArticlePricePeriod", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.PriceListArticleAggregate.PriceListArticle", null)
                        .WithMany("PricePeriods")
                        .HasForeignKey("PriceListArticleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PriceListArticleAggregate.PriceListArticle", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.PriceListMeasurementUnitAggregate.PriceListMeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Fclt.PriceListAggregate.PriceList", "PriceList")
                        .WithMany("Articles")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.SLA", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.ContractAggregate.Contract", "Contract")
                        .WithMany("SLAs")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketCondition", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.SLAAggregate.ComplexTicketCondition", null)
                        .WithMany("InternalConditions")
                        .HasForeignKey("ComplexTicketConditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.Quote", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.TicketAggregate.Ticket", null)
                        .WithOne("Quote")
                        .HasForeignKey("RealGimm.Core.Fclt.TicketAggregate.Quote", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("RealGimm.Core.Fclt.TicketAggregate.QuoteArticle", "Articles", b1 =>
                        {
                            b1.Property<int>("QuoteId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("InternalCode")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<bool>("IsExcluded")
                                .HasColumnType("boolean");

                            b1.Property<int>("MeasurementUnitId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)");

                            b1.Property<int>("Ordering")
                                .HasColumnType("integer");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer");

                            b1.Property<int?>("SourceArticleId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("UnitPrice")
                                .HasPrecision(18, 6)
                                .HasColumnType("numeric(18,6)");

                            b1.HasKey("QuoteId", "Id");

                            b1.HasIndex("MeasurementUnitId");

                            b1.HasIndex("SourceArticleId");

                            b1.ToTable("QuoteArticle", "fclt");

                            b1.HasOne("RealGimm.Core.Fclt.PriceListMeasurementUnitAggregate.PriceListMeasurementUnit", "MeasurementUnit")
                                .WithMany()
                                .HasForeignKey("MeasurementUnitId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");

                            b1.HasOne("RealGimm.Core.Fclt.PriceListArticleAggregate.PriceListArticle", "SourceArticle")
                                .WithMany()
                                .HasForeignKey("SourceArticleId");

                            b1.Navigation("MeasurementUnit");

                            b1.Navigation("SourceArticle");
                        });

                    b.Navigation("Articles");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.QuoteHistory.QuoteHistoryEntry", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.TicketAggregate.Quote", null)
                        .WithMany("History")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.Reply", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.TicketAggregate.Ticket", null)
                        .WithMany("Replies")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.Ticket", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.TicketChecklistAggregate.TicketChecklist", "Checklist")
                        .WithMany()
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealGimm.Core.Fclt.ContractAggregate.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("RealGimm.Core.Fclt.TicketTypeAggregate.TicketType", "CustomType")
                        .WithMany()
                        .HasForeignKey("CustomTypeId");

                    b.HasOne("RealGimm.Core.Fclt.WorkTeamAggregate.WorkTeam", "PlannedTeam")
                        .WithMany()
                        .HasForeignKey("PlannedTeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RealGimm.Core.Fclt.TicketAggregate.Ticket", null)
                        .WithMany("Children")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("RealGimm.Core.Fclt.TicketAggregate.PerformedActivity", "PerformedActivities", b1 =>
                        {
                            b1.Property<int>("TicketId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsMandatoryByLaw")
                                .HasColumnType("boolean");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)");

                            b1.Property<int>("Ordering")
                                .HasColumnType("integer");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("TicketId", "Id");

                            b1.ToTable("PerformedActivity", "fclt");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsMany("RealGimm.Core.Fclt.TicketAggregate.Reminder", "Reminders", b1 =>
                        {
                            b1.Property<int>("TicketId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date");

                            b1.Property<string>("Summary")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("character varying(1024)");

                            b1.HasKey("TicketId", "Id");

                            b1.ToTable("Reminder", "fclt");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("RealGimm.Core.Fclt.TicketAggregate.Resolution", "Resolution", b1 =>
                        {
                            b1.Property<int>("TicketId")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("Closure")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Diagnosis")
                                .HasMaxLength(3192)
                                .HasColumnType("character varying(3192)");

                            b1.Property<DateTime?>("InterventionEnd")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("InterventionStart")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("OperationsPerformed")
                                .HasMaxLength(3192)
                                .HasColumnType("character varying(3192)");

                            b1.Property<string>("PartsAndSupplies")
                                .HasMaxLength(3192)
                                .HasColumnType("character varying(3192)");

                            b1.Property<string>("ResolutionNotes")
                                .HasMaxLength(3192)
                                .HasColumnType("character varying(3192)");

                            b1.HasKey("TicketId");

                            b1.ToTable("Tickets", "fclt");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("Checklist");

                    b.Navigation("Contract");

                    b.Navigation("CustomType");

                    b.Navigation("PerformedActivities");

                    b.Navigation("PlannedTeam");

                    b.Navigation("Reminders");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.TicketHistoryEntry", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.TicketAggregate.Ticket", null)
                        .WithMany("History")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketChecklistAggregate.TicketChecklist", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.ContractAggregate.Contract", "Contract")
                        .WithMany("TicketChecklists")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Fclt.CraftAggregate.Craft", "OnTriggerCraft")
                        .WithMany()
                        .HasForeignKey("OnTriggerCraftId");

                    b.HasOne("RealGimm.Core.Fclt.InterventionTypeAggregate.InterventionType", "OnTriggerInterventionType")
                        .WithMany()
                        .HasForeignKey("OnTriggerInterventionTypeId");

                    b.HasOne("RealGimm.Core.Fclt.CraftAggregate.Craft", "PreventativeCraft")
                        .WithMany()
                        .HasForeignKey("PreventativeCraftId");

                    b.HasOne("RealGimm.Core.Fclt.InterventionTypeAggregate.InterventionType", "PreventativeInterventionType")
                        .WithMany()
                        .HasForeignKey("PreventativeInterventionTypeId");

                    b.Navigation("Contract");

                    b.Navigation("OnTriggerCraft");

                    b.Navigation("OnTriggerInterventionType");

                    b.Navigation("PreventativeCraft");

                    b.Navigation("PreventativeInterventionType");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketChecklistTemplateAggregate.TicketChecklistTemplate", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.CraftAggregate.Craft", "OnTriggerCraft")
                        .WithMany()
                        .HasForeignKey("OnTriggerCraftId");

                    b.HasOne("RealGimm.Core.Fclt.InterventionTypeAggregate.InterventionType", "OnTriggerInterventionType")
                        .WithMany()
                        .HasForeignKey("OnTriggerInterventionTypeId");

                    b.HasOne("RealGimm.Core.Fclt.CraftAggregate.Craft", "PreventativeCraft")
                        .WithMany()
                        .HasForeignKey("PreventativeCraftId");

                    b.HasOne("RealGimm.Core.Fclt.InterventionTypeAggregate.InterventionType", "PreventativeInterventionType")
                        .WithMany()
                        .HasForeignKey("PreventativeInterventionTypeId");

                    b.Navigation("OnTriggerCraft");

                    b.Navigation("OnTriggerInterventionType");

                    b.Navigation("PreventativeCraft");

                    b.Navigation("PreventativeInterventionType");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.WorkTeamAggregate.Worker", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.CraftAggregate.Craft", "Craft")
                        .WithMany()
                        .HasForeignKey("CraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Fclt.QualificationLevelAggregate.QualificationLevel", "QualificationLevel")
                        .WithMany()
                        .HasForeignKey("QualificationLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Fclt.TicketAggregate.Ticket", null)
                        .WithMany("Workers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealGimm.Core.Fclt.WorkTeamAggregate.WorkTeam", null)
                        .WithMany("Workers")
                        .HasForeignKey("WorkTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Craft");

                    b.Navigation("QualificationLevel");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.ComplexTicketCondition", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.PenaltyAggregate.Penalty", null)
                        .WithOne("IfCondition")
                        .HasForeignKey("RealGimm.Core.Fclt.SLAAggregate.ComplexTicketCondition", "PenaltyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealGimm.Core.Fclt.SLAAggregate.SLA", null)
                        .WithOne("IfCondition")
                        .HasForeignKey("RealGimm.Core.Fclt.SLAAggregate.ComplexTicketCondition", "SLAIfId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealGimm.Core.Fclt.SLAAggregate.SLA", null)
                        .WithOne("ThenCondition")
                        .HasForeignKey("RealGimm.Core.Fclt.SLAAggregate.ComplexTicketCondition", "SLAThenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketMasterStatusCondition", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.CalendarAggregate.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.TicketTypeEqualityCondition", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.TicketTypeAggregate.TicketType", "TargetTicketType")
                        .WithMany()
                        .HasForeignKey("TargetTicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetTicketType");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.NewReplyTicketHistoryEntry", b =>
                {
                    b.HasOne("RealGimm.Core.Fclt.TicketAggregate.Reply", "Reply")
                        .WithOne()
                        .HasForeignKey("RealGimm.Core.Fclt.TicketAggregate.TicketHistory.NewReplyTicketHistoryEntry", "ReplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.CalendarAggregate.Calendar", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.ContractAggregate.Contract", b =>
                {
                    b.Navigation("Penalties");

                    b.Navigation("SLAs");

                    b.Navigation("TicketChecklists");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.ContractTypeAggregate.ContractType", b =>
                {
                    b.Navigation("ContractTemplates");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PenaltyAggregate.Penalty", b =>
                {
                    b.Navigation("IfCondition")
                        .IsRequired();

                    b.Navigation("ThenPenalties");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PriceListAggregate.PriceList", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.PriceListArticleAggregate.PriceListArticle", b =>
                {
                    b.Navigation("PricePeriods");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.SLA", b =>
                {
                    b.Navigation("IfCondition")
                        .IsRequired();

                    b.Navigation("ThenCondition")
                        .IsRequired();
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.Quote", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.TicketAggregate.Ticket", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("History");

                    b.Navigation("Quote");

                    b.Navigation("Replies");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.WorkTeamAggregate.WorkTeam", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("RealGimm.Core.Fclt.SLAAggregate.ComplexTicketCondition", b =>
                {
                    b.Navigation("InternalConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
