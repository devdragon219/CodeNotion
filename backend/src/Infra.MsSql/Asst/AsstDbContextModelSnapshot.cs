// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using RealGimm.Infrastructure.Asst.Data;

#nullable disable

namespace RealGimm.Infra.MsSql.Asst
{
    [DbContext(typeof(AsstDbContext))]
    partial class AsstDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("asst")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatalogueTypeEstateUsageType", b =>
                {
                    b.Property<int>("CatalogueTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UsageTypesId")
                        .HasColumnType("int");

                    b.HasKey("CatalogueTypeId", "UsageTypesId");

                    b.HasIndex("UsageTypesId");

                    b.ToTable("CatalogueTypeEstateUsageType", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.AssetTaxCalculationAggregate.AssetTaxCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CadastralUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ExpectedInstallments")
                        .HasColumnType("int");

                    b.Property<string>("TaxCalculator")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("TaxCalculatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CadastralUnitId");

                    b.ToTable("AssetTaxCalculations", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.AssetTaxCalculationAggregate.AssetTaxPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualizedCadastralIncome")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("AssetTaxCalculationId")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseTaxableAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("CreditedAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("DebitedAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateOnly>("ExpectedDueDate")
                        .HasColumnType("date");

                    b.Property<decimal>("GrossCadastralIncome")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("InstallmentsPaid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefinitive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIssueOverridden")
                        .HasColumnType("bit");

                    b.Property<int?>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("ManagementSubjectBankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("ManagementSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyMonths")
                        .HasColumnType("int");

                    b.Property<string>("TaxName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("AssetTaxCalculationId");

                    b.ToTable("AssetTaxPayment", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralCategoryAggregate.CadastralCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CadastralValueFactor")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("CadastralValueTaxFactor")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CountryISO")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool>("IsInstrumental")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CadastralCategories", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralLandCategoryAggregate.CadastralLandCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryISO")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CadastralLandCategories", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralCoordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CadastralUnitId")
                        .HasColumnType("int");

                    b.Property<int>("CoordinateType")
                        .HasColumnType("int");

                    b.Property<string>("ITTavCorpo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ITTavPartita")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ITTavPorzione")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level4")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level5")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<string>("UnmanagedOverride")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CadastralUnitId");

                    b.ToTable("CadastralCoordinates", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CadastralUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int");

                    b.Property<int?>("FiscalYear")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceYear")
                        .HasColumnType("int");

                    b.Property<double?>("RevaluationFactor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CadastralUnitId");

                    b.ToTable("CadastralExpenses", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnavailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CadastralUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<DateOnly?>("Since")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CadastralUnitId");

                    b.ToTable("CadastralUnavailability", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CadastralNotes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<string>("ConsortiumNotes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstateUnitId")
                        .HasColumnType("int");

                    b.Property<string>("FiscalNotes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<string>("HistoryTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAncillaryUnit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCadastralRegistrationInProgress")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRelevantChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("Since")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("EstateUnitId");

                    b.ToTable("CadastralUnits", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnitTaxConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CadastralUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaxCalculator")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CadastralUnitId", "TaxCalculator", "Code")
                        .IsUnique()
                        .HasFilter("[CadastralUnitId] IS NOT NULL");

                    b.ToTable("CadastralUnitTaxConfig", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueCategoryAggregate.CatalogueCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("CatalogueCategories", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueCategoryAggregate.CatalogueSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CatalogueSubCategory", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueItemAggregate.CatalogueItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ActivationDate")
                        .HasColumnType("date");

                    b.Property<int>("CatalogueTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DecommissioningDate")
                        .HasColumnType("date");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("LastMaintenanceDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueTypeId");

                    b.HasIndex("EstateId");

                    b.ToTable("CatalogueItems", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueTypeAggregate.CatalogueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Fields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("CatalogueTypes", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CityReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryISO")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CountyReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("LocalPostCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Point>("LocationLatLon")
                        .HasColumnType("geography");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<string>("Numbering")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RegionReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Toponymy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Address", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Estate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuildYear")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DecommissioningDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MainUsageTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ManagementOrgUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ManagementSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceAreaSqM")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UsageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternalCode");

                    b.HasIndex("MainUsageTypeId");

                    b.HasIndex("UsageTypeId");

                    b.ToTable("Estates", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<float>("Position")
                        .HasColumnType("real");

                    b.Property<Guid>("TemplateReference")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Floor", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Refactoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AgeCoefficient")
                        .HasColumnType("float");

                    b.Property<int?>("BuildingPermitYear")
                        .HasColumnType("int");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("EstateUnitIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferenceYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Refactoring", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Stair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("EstateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Stair", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Valuation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("IASValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("MortgageAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("RBAValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("ReferenceYear")
                        .HasColumnType("int");

                    b.Property<int?>("RevampOperations")
                        .HasColumnType("int");

                    b.Property<int?>("TransferYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Valuation", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateMainUsageTypeAggregate.EstateMainUsageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EstateMainUsageTypes", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateSubUnitAggregate.EstateSubUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstateUnitId")
                        .HasColumnType("int");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<int?>("OccupancyPercent")
                        .HasColumnType("int");

                    b.Property<int?>("OccupantId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupantType")
                        .HasColumnType("int");

                    b.Property<int?>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Since")
                        .HasColumnType("date");

                    b.Property<int?>("SurfaceSqM")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Until")
                        .HasColumnType("date");

                    b.Property<int?>("UsageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstateUnitId");

                    b.HasIndex("InternalCode");

                    b.HasIndex("UsageTypeId");

                    b.ToTable("EstateSubUnits", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CostCentreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DisusedDate")
                        .HasColumnType("date");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HistoryTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastRelevantChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagementSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<int?>("OfficialActId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("OwnershipEndDate")
                        .HasColumnType("date");

                    b.Property<double?>("OwnershipPercent")
                        .HasColumnType("float");

                    b.Property<DateOnly>("OwnershipStartDate")
                        .HasColumnType("date");

                    b.Property<int>("OwnershipType")
                        .HasColumnType("int");

                    b.Property<int?>("ProcurementActId")
                        .HasColumnType("int");

                    b.Property<bool>("SharedArea")
                        .HasColumnType("bit");

                    b.Property<int?>("StairId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubNumbering")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UsageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EstateId");

                    b.HasIndex("InternalCode");

                    b.HasIndex("StairId");

                    b.HasIndex("UsageTypeId");

                    b.ToTable("EstateUnits", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnitFloor", b =>
                {
                    b.Property<int>("EstateUnitId")
                        .HasColumnType("int");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.HasKey("EstateUnitId", "FloorId");

                    b.HasIndex("FloorId");

                    b.ToTable("EstateUnitFloor", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnitSurface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstateUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("FloorId")
                        .HasColumnType("int");

                    b.Property<int?>("FunctionAreaId")
                        .HasColumnType("int");

                    b.Property<int>("Metric")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceSqMCommonArea")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceSqMSideArea")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceSqMTotal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstateUnitId");

                    b.HasIndex("FloorId");

                    b.HasIndex("FunctionAreaId");

                    b.ToTable("EstateUnitSurface", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.Repossession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstateUnitId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("date");

                    b.Property<int?>("EventReason")
                        .HasColumnType("int");

                    b.Property<int?>("EventType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAssignable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsKeysReturned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWithValuables")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(3192)
                        .HasColumnType("nvarchar(3192)");

                    b.Property<int?>("UnitStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstateUnitId");

                    b.ToTable("Repossession", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.UnitExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("EstateUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceYear")
                        .HasColumnType("int");

                    b.Property<double?>("RevaluationFactor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EstateUnitId");

                    b.ToTable("UnitExpenses", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUsageTypeAggregate.EstateUsageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsForContracts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForEstate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForEstateSubUnit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForEstateUnit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EstateUsageTypes", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.FloorTemplateAggregate.FloorTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<float>("Position")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("FloorTemplates", "asst");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.FunctionAreaAggregate.FunctionArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("SurfaceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FunctionArea", "asst");
                });

            modelBuilder.Entity("CatalogueTypeEstateUsageType", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CatalogueTypeAggregate.CatalogueType", null)
                        .WithMany()
                        .HasForeignKey("CatalogueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateUsageTypeAggregate.EstateUsageType", null)
                        .WithMany()
                        .HasForeignKey("UsageTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealGimm.Core.Asst.AssetTaxCalculationAggregate.AssetTaxCalculation", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", "CadastralUnit")
                        .WithMany("TaxPayments")
                        .HasForeignKey("CadastralUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CadastralUnit");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.AssetTaxCalculationAggregate.AssetTaxPayment", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.AssetTaxCalculationAggregate.AssetTaxCalculation", "AssetTaxCalculation")
                        .WithMany("Installments")
                        .HasForeignKey("AssetTaxCalculationId");

                    b.Navigation("AssetTaxCalculation");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralCoordinates", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", "CadastralUnit")
                        .WithMany("Coordinates")
                        .HasForeignKey("CadastralUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CadastralUnit");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralExpenses", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", "CadastralUnit")
                        .WithMany("Expenses")
                        .HasForeignKey("CadastralUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CadastralUnit");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnavailability", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", "CadastralUnit")
                        .WithMany("Unavailabilities")
                        .HasForeignKey("CadastralUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CadastralUnit");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Address", "Address")
                        .WithOne()
                        .HasForeignKey("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", "AddressId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", "EstateUnit")
                        .WithMany("CadastralUnits")
                        .HasForeignKey("EstateUnitId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnitIncome", "Income", b1 =>
                        {
                            b1.Property<int>("CadastralUnitId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("CadastralAmount")
                                .HasPrecision(18, 6)
                                .HasColumnType("decimal(18,6)");

                            b1.Property<int?>("CadastralCategoryId")
                                .HasColumnType("int");

                            b1.Property<int?>("CadastralLandCategoryId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("FarmAmount")
                                .HasPrecision(18, 6)
                                .HasColumnType("decimal(18,6)");

                            b1.Property<decimal?>("LandAmount")
                                .HasPrecision(18, 6)
                                .HasColumnType("decimal(18,6)");

                            b1.Property<string>("MacroCategory")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<decimal?>("MarketValue")
                                .HasPrecision(18, 6)
                                .HasColumnType("decimal(18,6)");

                            b1.Property<int?>("Metric")
                                .HasColumnType("int");

                            b1.Property<decimal?>("MetricAmount")
                                .HasPrecision(18, 6)
                                .HasColumnType("decimal(18,6)");

                            b1.Property<decimal?>("MetricRentedAmount")
                                .HasPrecision(18, 6)
                                .HasColumnType("decimal(18,6)");

                            b1.Property<string>("MicroCategory")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<decimal?>("RegisteredSurface")
                                .HasPrecision(18, 6)
                                .HasColumnType("decimal(18,6)");

                            b1.Property<int?>("Type")
                                .HasColumnType("int");

                            b1.HasKey("CadastralUnitId");

                            b1.HasIndex("CadastralCategoryId");

                            b1.HasIndex("CadastralLandCategoryId");

                            b1.ToTable("CadastralUnits", "asst");

                            b1.HasOne("RealGimm.Core.Asst.CadastralCategoryAggregate.CadastralCategory", "CadastralCategory")
                                .WithMany()
                                .HasForeignKey("CadastralCategoryId");

                            b1.HasOne("RealGimm.Core.Asst.CadastralLandCategoryAggregate.CadastralLandCategory", "CadastralLandCategory")
                                .WithMany()
                                .HasForeignKey("CadastralLandCategoryId");

                            b1.WithOwner()
                                .HasForeignKey("CadastralUnitId");

                            b1.Navigation("CadastralCategory");

                            b1.Navigation("CadastralLandCategory");
                        });

                    b.OwnsOne("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnitInspection", "Inspection", b1 =>
                        {
                            b1.Property<int>("CadastralUnitId")
                                .HasColumnType("int");

                            b1.Property<DateOnly?>("Date")
                                .HasColumnType("date");

                            b1.Property<string>("Heading")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<bool>("IsDirectRestriction")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsHistoricalEstate")
                                .HasColumnType("bit");

                            b1.Property<string>("MacroZone")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("MicroZone")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<DateOnly?>("ProtocolDate")
                                .HasColumnType("date");

                            b1.Property<string>("ProtocolNumber")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("CadastralUnitId");

                            b1.ToTable("CadastralUnits", "asst");

                            b1.WithOwner()
                                .HasForeignKey("CadastralUnitId");
                        });

                    b.Navigation("Address");

                    b.Navigation("EstateUnit");

                    b.Navigation("Income")
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnitTaxConfig", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", null)
                        .WithMany("TaxConfig")
                        .HasForeignKey("CadastralUnitId");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueCategoryAggregate.CatalogueSubCategory", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CatalogueCategoryAggregate.CatalogueCategory", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueItemAggregate.CatalogueItem", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CatalogueTypeAggregate.CatalogueType", "CatalogueType")
                        .WithMany("Items")
                        .HasForeignKey("CatalogueTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Estate", "Estate")
                        .WithMany("CatalogueItems")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogueType");

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueTypeAggregate.CatalogueType", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.CatalogueCategoryAggregate.CatalogueCategory", "Category")
                        .WithMany("CatalogueTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.CatalogueCategoryAggregate.CatalogueSubCategory", "SubCategory")
                        .WithMany("CatalogueTypes")
                        .HasForeignKey("SubCategoryId");

                    b.OwnsMany("RealGimm.Core.Asst.CatalogueTypeAggregate.CatalogueTypeActivity", "Activities", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ActivityType")
                                .HasColumnType("int");

                            b1.Property<bool>("IsMandatoryByLaw")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("nvarchar(120)");

                            b1.Property<int>("TypeId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("TypeId");

                            b1.ToTable("CatalogueTypeActivity", "asst");

                            b1.WithOwner("Type")
                                .HasForeignKey("TypeId");

                            b1.Navigation("Type");
                        });

                    b.Navigation("Activities");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Address", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Estate", "Estate")
                        .WithMany("Addresses")
                        .HasForeignKey("EstateId");

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Estate", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateMainUsageTypeAggregate.EstateMainUsageType", "MainUsageType")
                        .WithMany()
                        .HasForeignKey("MainUsageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateUsageTypeAggregate.EstateUsageType", "UsageType")
                        .WithMany()
                        .HasForeignKey("UsageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("RealGimm.Core.Asst.EstateAggregate.EstateTotalMarketValue", "TotalMarketValue", b1 =>
                        {
                            b1.Property<int>("EstateId")
                                .HasColumnType("int");

                            b1.Property<string>("Notes")
                                .HasMaxLength(3192)
                                .HasColumnType("nvarchar(3192)");

                            b1.Property<int>("TotalSurfaceAreaSqM")
                                .HasColumnType("int");

                            b1.HasKey("EstateId");

                            b1.ToTable("Estates", "asst");

                            b1.WithOwner()
                                .HasForeignKey("EstateId");

                            b1.OwnsMany("RealGimm.Core.Asst.EstateAggregate.EstateMarketValue", "MarketValues", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("EstateTotalMarketValueEstateId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Type")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("Value")
                                        .HasPrecision(18, 6)
                                        .HasColumnType("decimal(18,6)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("EstateTotalMarketValueEstateId");

                                    b2.ToTable("EstateMarketValue", "asst");

                                    b2.WithOwner()
                                        .HasForeignKey("EstateTotalMarketValueEstateId");
                                });

                            b1.OwnsMany("RealGimm.Core.Asst.EstateAggregate.EstateTotalMarketValueCoefficient", "Coefficients", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("EstateTotalMarketValueEstateId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Type")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("Value")
                                        .HasPrecision(18, 6)
                                        .HasColumnType("decimal(18,6)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("EstateTotalMarketValueEstateId");

                                    b2.ToTable("EstateTotalMarketValueCoefficient", "asst");

                                    b2.WithOwner()
                                        .HasForeignKey("EstateTotalMarketValueEstateId");
                                });

                            b1.Navigation("Coefficients");

                            b1.Navigation("MarketValues");
                        });

                    b.Navigation("MainUsageType");

                    b.Navigation("TotalMarketValue");

                    b.Navigation("UsageType");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Floor", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Estate", null)
                        .WithMany("Floors")
                        .HasForeignKey("EstateId");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Refactoring", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Estate", "Estate")
                        .WithMany("Refactorings")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Stair", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Estate", null)
                        .WithMany("Stairs")
                        .HasForeignKey("EstateId");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Valuation", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Estate", "Estate")
                        .WithMany("Valuations")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateSubUnitAggregate.EstateSubUnit", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", "EstateUnit")
                        .WithMany("EstateSubUnits")
                        .HasForeignKey("EstateUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateUsageTypeAggregate.EstateUsageType", "UsageType")
                        .WithMany()
                        .HasForeignKey("UsageTypeId");

                    b.Navigation("EstateUnit");

                    b.Navigation("UsageType");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Address", "Address")
                        .WithMany("EstateUnit")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Estate", "Estate")
                        .WithMany("EstateUnits")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Stair", "Stair")
                        .WithMany()
                        .HasForeignKey("StairId");

                    b.HasOne("RealGimm.Core.Asst.EstateUsageTypeAggregate.EstateUsageType", "UsageType")
                        .WithMany()
                        .HasForeignKey("UsageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Estate");

                    b.Navigation("Stair");

                    b.Navigation("UsageType");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnitFloor", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", "EstateUnit")
                        .WithMany("EstateUnitFloors")
                        .HasForeignKey("EstateUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Floor", "Floor")
                        .WithMany("EstateUnitFloor")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstateUnit");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnitSurface", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", "EstateUnit")
                        .WithMany("Surfaces")
                        .HasForeignKey("EstateUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealGimm.Core.Asst.EstateAggregate.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId");

                    b.HasOne("RealGimm.Core.Asst.FunctionAreaAggregate.FunctionArea", "FunctionArea")
                        .WithMany()
                        .HasForeignKey("FunctionAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EstateUnit");

                    b.Navigation("Floor");

                    b.Navigation("FunctionArea");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.Repossession", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", "EstateUnit")
                        .WithMany("Repossessions")
                        .HasForeignKey("EstateUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstateUnit");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.UnitExpenses", b =>
                {
                    b.HasOne("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", "EstateUnit")
                        .WithMany("UnitExpenses")
                        .HasForeignKey("EstateUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstateUnit");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.AssetTaxCalculationAggregate.AssetTaxCalculation", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CadastralUnitAggregate.CadastralUnit", b =>
                {
                    b.Navigation("Coordinates");

                    b.Navigation("Expenses");

                    b.Navigation("TaxConfig");

                    b.Navigation("TaxPayments");

                    b.Navigation("Unavailabilities");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueCategoryAggregate.CatalogueCategory", b =>
                {
                    b.Navigation("CatalogueTypes");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueCategoryAggregate.CatalogueSubCategory", b =>
                {
                    b.Navigation("CatalogueTypes");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.CatalogueTypeAggregate.CatalogueType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Address", b =>
                {
                    b.Navigation("EstateUnit");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Estate", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CatalogueItems");

                    b.Navigation("EstateUnits");

                    b.Navigation("Floors");

                    b.Navigation("Refactorings");

                    b.Navigation("Stairs");

                    b.Navigation("Valuations");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateAggregate.Floor", b =>
                {
                    b.Navigation("EstateUnitFloor");
                });

            modelBuilder.Entity("RealGimm.Core.Asst.EstateUnitAggregate.EstateUnit", b =>
                {
                    b.Navigation("CadastralUnits");

                    b.Navigation("EstateSubUnits");

                    b.Navigation("EstateUnitFloors");

                    b.Navigation("Repossessions");

                    b.Navigation("Surfaces");

                    b.Navigation("UnitExpenses");
                });
#pragma warning restore 612, 618
        }
    }
}
