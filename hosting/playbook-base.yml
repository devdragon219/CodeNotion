- name: Setup VM
  hosts: all
  become: true
  tasks:

    - name: Remove packages
      apt:
        name:
          - firewalld
        state: absent

    - name: Download and install Google Cloud SDK
      shell: |
        echo "Downloading Google Cloud CLI..."
        curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-linux-x86_64.tar.gz
        echo "Extracting Google Cloud CLI..."
        sudo mkdir -p /usr/local/google-cloud-sdk
        sudo tar -xzf google-cloud-cli-linux-x86_64.tar.gz -C /usr/local
        echo "Installing Google Cloud CLI..."
        sudo /usr/local/google-cloud-sdk/install.sh --quiet --usage-reporting=false --path-update=true
        sudo ln -sf /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/gcloud
        sudo ln -sf /usr/local/google-cloud-sdk/bin/docker-credential-gcloud /usr/local/bin/docker-credential-gcloud
        echo "Google Cloud CLI installation completed."
      args:
        executable: /bin/bash

    - name: Update apt repository and install prerequisites
      apt:
        update_cache: yes
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - fail2ban
          - docker.io
          - docker-compose-v2
          - ufw
          - unattended-upgrades
          - software-properties-common
        state: present

    - name: Configure docker local logging
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
              "log-driver": "journald"
          }

    - name: Create journald configuration directory
      file:
        path: /etc/systemd/journald.conf.d
        state: directory
    
    - name: Configure journald logging options
      copy:
        dest: /etc/systemd/journald.conf.d/gmgr-journald.conf
        content: |
          [Journal]
          SystemMaxFileSize=50M
          MaxRetentionSec=21day
          Storage=persistent

    - name: Apply journald configuration
      systemd:
        name: systemd-journald
        state: restarted
        
    - name: Remove systemd override for Docker
      file:
        path: /etc/systemd/system/docker.service.d
        state: absent
          
    - name: Backup current SSH configuration
      copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.bak
        owner: root
        group: root
        mode: 0600
        backup: yes
        remote_src: yes

    - name: Update sshd_config with strong algorithms
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        create: yes
        regexp: '^#*\\s*{{ item.key }}'
        line: '{{ item.key }} {{ item.value }}'
      with_items:
        - { key: 'Ciphers', value: 'chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com' }
        - { key: 'MACs', value: 'hmac-sha2-256,hmac-sha2-512,umac-128-etm@openssh.com' }
        - { key: 'HostKeyAlgorithms', value: 'ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519' }
        - { key: 'KexAlgorithms', value: 'curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256' }

    - name: Restart SSH service
      service:
        name: ssh
        state: restarted

    - name: Configure unattended-upgrades
      copy:
        dest: /etc/apt/apt.conf.d/99unattended-upgrades-config
        content: |
          // Automatically upgrade packages from these origins
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}";
              "${distro_id}:${distro_codename}-security";
          };

          // Enable automatic reboots
          Unattended-Upgrade::Automatic-Reboot "true";

          // Schedule the automatic reboot time
          Unattended-Upgrade::Automatic-Reboot-Time "03:00";

          // Enable periodic updates
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";

    - name: Enable and start unattended-upgrades service
      systemd:
        name: unattended-upgrades
        enabled: yes
        state: started

    - name: Configure Fail2ban
      copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          banaction = ufw
          bantime = 24h
          findtime = 10m
          maxretry = 3

          [sshd]
          enabled = true
          mode = aggressive

    - name: Start and enable Fail2ban service
      systemd:
        name: fail2ban
        enabled: yes
        state: started

    - name: Ensure UFW is enabled
      ufw:
        state: enabled
        policy: deny

    - name: Rate limit SSH
      ufw:
        rule: limit
        port: 22
        proto: tcp

    - name: Allow specific ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      with_items:
        - 80
        - 443

    - name: Create directories for container data
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /opt/backend-data
        - /opt/backend-fo-data
    
    - name: Copy Google Cloud Artifact Registry credentials
      copy:
        src: google-artifact-reader-key.json
        dest: /opt/google-artifact-reader-key.json
        mode: 0600

    - name: Authenticate with gcloud service account
      shell: gcloud auth activate-service-account --key-file /opt/google-artifact-reader-key.json

    - name: Configure Docker to use Google Artifact Registry
      shell: gcloud auth configure-docker --quiet europe-west8-docker.pkg.dev

    - name: Set swappiness to a low value
      sysctl:
        name: vm.swappiness
        value: '8'
        state: present